{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/intersection-based-offset.js","../src/index.js"],"sourcesContent":["export function parseLength(obj, acceptStr) {\n  if (obj instanceof CSSUnitValue || obj instanceof CSSMathSum)\n    return obj;\n  if (!acceptStr)\n    return null;\n  let matches = obj.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if (matches) {\n    let value = matches[1];\n    // The unit for % is percent.\n    let unit = matches[2] == '%' ? 'percent' : matches[2];\n    return new CSSUnitValue(value, unit);\n  }\n  return null;\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(scrollSource) {\n  if (scrollSource === document.scrollingElement) return document;\n  return scrollSource;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  let animations = scrollTimelineOptions.get(scrollTimelineInstance).animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates the number of milliseconds mapped to the scroll range in case of AUTO\n *  in case developer provided timeRange, we use that directly.\n * @param scrollTimeline {ScrollTimeline}\n * @returns {Number}\n */\nfunction calculateTimeRange(scrollTimeline) {\n  let timeRange = scrollTimeline.timeRange;\n  if (timeRange == AUTO) {\n    timeRange = 0;\n    let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n    for (let i = 0; i < animations.length; i++) {\n      timeRange = Math.max(timeRange,\n                           calculateTargetEffectEnd(animations[i].animation));\n    }\n    if (timeRange === Infinity) timeRange = 0;\n  }\n  return timeRange;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Enables the usage of custom parser and evaluator function, utilized by intersection based offset.\n * @param parseFunction {Function}\n * @param evaluateFunction {Function}\n * @returns {Array} all currently installed parsers\n */\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction,\n  });\n  return extensionScrollOffsetFunctions;\n}\n\n/**\n * Calculates scroll offset based on orientation and scrollSource geometry\n * @param scrollSource {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(scrollSource, orientation) {\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n  if (orientation === \"vertical\")\n    return scrollSource.scrollHeight - scrollSource.clientHeight;\n  else if (orientation === \"horizontal\")\n    return scrollSource.scrollWidth - scrollSource.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\nexport function calculateScrollOffset(\n  autoValue,\n  scrollSource,\n  orientation,\n  offset,\n  fn\n) {\n  if (fn)\n    return fn(\n      scrollSource,\n      orientation,\n      offset,\n      autoValue.value == 0 ? \"start\" : \"end\"\n    );\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n\n  let maxValue =\n    orientation === \"vertical\"\n      ? scrollSource.scrollHeight - scrollSource.clientHeight\n      : scrollSource.scrollWidth - scrollSource.clientWidth;\n  let parsed = parseLength(offset === AUTO ? autoValue : offset);\n  return resolvePx(parsed, maxValue);\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      scrollSource: null,\n      orientation: \"block\",\n      startScrollOffset: AUTO,\n      endScrollOffset: AUTO,\n      scrollOffsets: [],\n      timeRange: AUTO,\n\n      // Internal members\n      animations: [],\n      scrollOffsetFns: [],\n    });\n    this.scrollSource =\n      options && options.scrollSource !== undefined ? options.scrollSource : document.scrollingElement;\n    this.orientation = (options && options.orientation) || \"block\";\n    this.startScrollOffset = (options && options.startScrollOffset) || AUTO;\n    this.endScrollOffset = (options && options.endScrollOffset) || AUTO;\n    this.scrollOffsets = options && options.scrollOffsets !== undefined ? options.scrollOffsets : [];\n    this.timeRange = options && options.timeRange !== undefined ? options.timeRange : \"auto\";\n  }\n\n  set scrollSource(element) {\n    if (this.scrollSource)\n      scrollEventSource(this.scrollSource).removeEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    scrollTimelineOptions.get(this).scrollSource = element;\n    if (element) {\n      scrollEventSource(element).addEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    }\n    updateInternal(this);\n  }\n\n  get scrollSource() {\n    return scrollTimelineOptions.get(this).scrollSource;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set scrollOffsets(value) {\n    let offsets = [];\n    let fns = [];\n    for (let input of value) {\n      let fn = null;\n      let offset = undefined;\n      if (input == \"auto\")\n        input = AUTO;\n      for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n        let result = extensionScrollOffsetFunctions[i].parse(input);\n        if (result !== undefined) {\n          offset = result;\n          fn = extensionScrollOffsetFunctions[i].evaluate;\n          break;\n        }\n      }\n      if (!fn) {\n        if (input != AUTO) {\n          let parsed = parseLength(input);\n          // TODO: This should check CSSMathSum values as well.\n          if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n            throw TypeError(\"Invalid scrollOffsets entry.\");\n        }\n        offset = input;\n      }\n      offsets.push(offset);\n      fns.push(fn);\n    }\n    if (offsets.length == 1 && offsets[0] == AUTO)\n      throw TypeError(\"Invalid scrollOffsets value.\");\n    let data = scrollTimelineOptions.get(this);\n    data.scrollOffsets = offsets;\n    data.scrollOffsetFns = fns;\n  }\n\n  get scrollOffsets() {\n    let data = scrollTimelineOptions.get(this);\n    return data.scrollOffsets;\n  }\n\n  set startScrollOffset(offset) {\n    if (offset == \"auto\")\n      offset = AUTO;\n    let currentStlOptions = scrollTimelineOptions.get(this);\n    // Allow extensions to override scroll offset calculation.\n    currentStlOptions.startScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        currentStlOptions.startScrollOffsetFunction =\n          extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    if (offset != AUTO && !scrollTimelineOptions.get(this).startScrollOffsetFunction) {\n      let parsed = parseLength(offset);\n      // TODO: This should check CSSMathSum values as well.\n      if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n        throw TypeError(\"Invalid start offset.\");\n    }\n    currentStlOptions.startScrollOffset = offset;\n    updateInternal(this);\n  }\n\n  get startScrollOffset() {\n    return scrollTimelineOptions.get(this).startScrollOffset;\n  }\n\n  set endScrollOffset(offset) {\n    if (offset == \"auto\")\n      offset = AUTO;\n    // Allow extensions to override scroll offset calculation.\n    scrollTimelineOptions.get(this).endScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        scrollTimelineOptions.get(this).endScrollOffsetFunction =\n          extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    if (offset != AUTO && !scrollTimelineOptions.get(this).startScrollOffsetFunction) {\n      let parsed = parseLength(offset);\n      // TODO: This should check CSSMathSum values as well.\n      if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n        throw TypeError(\"Invalid end offset.\");\n    }\n    scrollTimelineOptions.get(this).endScrollOffset = offset;\n    updateInternal(this);\n  }\n\n  get endScrollOffset() {\n    return scrollTimelineOptions.get(this).endScrollOffset;\n  }\n\n  set timeRange(range) {\n    if (range != \"auto\") {\n      // Check for a valid number, which if finite and not NaN.\n      if (typeof(range) != \"number\" || !Number.isFinite(range) || range != range)\n        throw TypeError(\"Invalid timeRange value\");\n    }\n    scrollTimelineOptions.get(this).timeRange = range;\n    updateInternal(this);\n  }\n\n  get timeRange() {\n    return scrollTimelineOptions.get(this).timeRange;\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    let unresolved = null;\n    //   if source is null\n    if (!this.scrollSource) return \"inactive\";\n    let scrollerStyle = getComputedStyle(this.scrollSource);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (this.scrollSource != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    let startOffset = calculateScrollOffset(\n      new CSSUnitValue(0, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.startScrollOffset,\n      scrollTimelineOptions.get(this).startScrollOffsetFunction\n    );\n    let endOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.endScrollOffset,\n      scrollTimelineOptions.get(this).endScrollOffsetFunction\n    );\n    let maxOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      new CSSUnitValue(100, 'percent'),\n      null\n    );\n\n    //   if source's effective scroll range is null\n    if (startOffset === null || endOffset === null)\n      return \"inactive\";\n\n    // Step 2\n    // TODO: Support other writing directions.\n    let currentScrollOffset = this.scrollSource.scrollTop\n    if (this.orientation === 'inline' || this.orientation === 'horizontal') {\n      currentScrollOffset = this.scrollSource.scrollLeft\n    }\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return \"before\";\n    if (currentScrollOffset >= endOffset && endOffset < maxOffset)\n      return \"after\";\n    return \"active\"\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.scrollSource) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    let startOffset = calculateScrollOffset(\n      new CSSUnitValue(0, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.startScrollOffset,\n      scrollTimelineOptions.get(this).startScrollOffsetFunction\n    );\n    let endOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.endScrollOffset,\n      scrollTimelineOptions.get(this).endScrollOffsetFunction\n    );\n    let timeRange = calculateTimeRange(this);\n\n    // Step 2\n    // TODO: Support other writing directions.\n    let currentScrollOffset = this.scrollSource.scrollTop\n    if (this.orientation === 'inline' || this.orientation === 'horizontal') {\n      currentScrollOffset = this.scrollSource.scrollLeft\n    }\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return 0;\n\n    // Step 4\n    if (currentScrollOffset >= endOffset)\n      return timeRange;\n\n    // Step 5\n    return (\n      ((currentScrollOffset - startOffset) / (endOffset - startOffset)) *\n      timeRange\n    );\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n","import {\n  ScrollTimeline,\n  installScrollOffsetExtension,\n  addAnimation,\n  removeAnimation\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = details.timeline.currentTime;\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = details.timeline.currentTime;\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n  // Handle the finished event via the native animation.\n  // TODO: consider polyfilling queuing the event.\n  details.animation.finish();\n  details.animation.pause();\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = details.timeline.currentTime;\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = details.timeline.currentTime;\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  const unconstrainedCurrentTime =\n      didSeek ? details.proxy.currentTime : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    // TODO: Support hold phase.\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = details.proxy.currentTime;\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        // TODO: Timing not quite accurate. Should fire at the next microtask\n        // checkpoint.\n        requestAnimationFrame(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = details.animation.effect.getTiming();\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n  return Math.max(0, totalDuration);\n}\n\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = details.timeline.currentTime;\n    details.animation.currentTime =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n  } else if (details.holdTime !== null) {\n    details.animation.currentTime = details.holdTime;\n  }\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = details.proxy.currentTime;\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0;\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    details.animation.currentTime =\n        (timelineTime - this.startTime) * this.playbackRate;\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    return proxyAnimations.get(this).animation.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    const details = proxyAnimations.get(this);\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime = previousCurrentTime;\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = previousCurrentTime;\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return details.startTime;\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = details.timeline.currentTime;\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = this.currentTime;\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return details.holdTime;\n\n    return calculateCurrentTime(details);\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = this.currentTime;\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = limit;\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = details.timeline.currentTime;\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ? null :  this.currentTime;\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = details.timeline.currentTime;\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [\n    [TOP, BOTTOM],\n    [RIGHT, LEFT],\n  ],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]],\n];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: \"start\",\n      threshold: 0,\n      rootMargin: [\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n      ],\n    });\n    this.target = value.target;\n    this.edge = value.edge || \"start\";\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || \"0px 0px 0px 0px\";\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error(\"Intersection target must be an element.\");\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if ([\"start\", \"end\"].indexOf(value) == -1) return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a TypeError for a parse error.\n    if (threshold != threshold)\n      throw TypeError(\"Invalid threshold.\");\n    // TODO(https://crbug.com/1136516): This should throw a RangeError\n    // consistent with the intersection observer spec but the current\n    // test expectations are looking for a TypeError.\n    if (threshold < 0 || threshold > 1)\n      throw TypeError(\"threshold must be in the range [0, 1]\");\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/);\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError(\n        \"rootMargin must contain between 1 and 4 length components\"\n      );\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i], true);\n      if (!parsedValue) throw TypeError(\"Unrecognized rootMargin length\");\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [\n          parseFloat(parsedValue.value),\n          parsedValue.unit,\n        ];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this)\n      .rootMargin.map((margin) => {\n        return margin.join(\"\");\n      })\n      .join(\" \");\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n}\n\nexport function parseOffset(value) {\n  if (value.target) return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == \"percent\") return (length[0] * containerSize) / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(scrollSource, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == \"block\") orientation = \"vertical\";\n  else if (orientation == \"inline\") orientation = \"horizontal\";\n  let originalViewport =\n    scrollSource == document.scrollingElement\n      ? {\n          left: 0,\n          right: scrollSource.clientWidth,\n          top: 0,\n          bottom: scrollSource.clientHeight,\n          width: scrollSource.clientWidth,\n          height: scrollSource.clientHeight,\n        }\n      : scrollSource.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(\n      resolveLength(\n        parsedMargins[i],\n        i % 2 == 0 ? originalViewport.height : originalViewport.width\n      )\n    );\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width:\n      originalViewport.right -\n      originalViewport.left +\n      computedMargins[LEFT] +\n      computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height:\n      originalViewport.bottom -\n      originalViewport.top +\n      computedMargins[TOP] +\n      computedMargins[BOTTOM],\n  };\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == \"start\") threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == \"vertical\") {\n    let point =\n      target.top +\n      target.height * threshold -\n      viewport.top +\n      scrollSource.scrollTop;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.height);\n      return Math.min(point, scrollSource.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.height;\n      return point;\n    }\n  } else {\n    // orientation == 'horizontal'\n    let point =\n      target.left +\n      target.width * threshold -\n      viewport.left +\n      scrollSource.scrollLeft;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.width);\n      return Math.min(point, scrollSource.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  installScrollOffsetExtension\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\nimport { calculateOffset, parseOffset } from \"./intersection-based-offset\";\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["parseLength","obj","acceptStr","CSSUnitValue","CSSMathSum","matches","trim","match","AUTO","CSSKeywordValue","scrollTimelineOptions","WeakMap","extensionScrollOffsetFunctions","scrollEventSource","scrollSource","document","scrollingElement","updateInternal","scrollTimelineInstance","animations","get","length","timelineTime","currentTime","i","tickAnimation","calculateScrollOffset","autoValue","orientation","offset","fn","value","maxValue","scrollHeight","clientHeight","scrollWidth","clientWidth","resolvePx","cssValue","resolvedLength","unit","TypeError","total","values","removeAnimation","scrollTimeline","animation","splice","addAnimation","push","ScrollTimeline","options","set","this","startScrollOffset","endScrollOffset","scrollOffsets","timeRange","scrollOffsetFns","undefined","_createClass","element","removeEventListener","_this","addEventListener","indexOf","offsets","fns","input","result","parse","evaluate","parsed","data","currentStlOptions","startScrollOffsetFunction","endScrollOffsetFunction","range","Number","isFinite","scrollerStyle","getComputedStyle","display","overflow","startOffset","endOffset","maxOffset","currentScrollOffset","scrollTop","scrollLeft","phase","Math","max","effect","getComputedTiming","activeDuration","Infinity","calculateTimeRange","nativeElementAnimate","window","Element","prototype","animate","nativeAnimation","Animation","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","details","readyPromise","requestAnimationFrame","timeline","notifyReady","createAbortError","DOMException","commitFinishedNotification","finishedPromise","proxy","playState","finish","pause","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","effectEnd","boundary","previousCurrentTime","holdTime","syncCurrentTime","timing","getTiming","delay","endDelay","iterations","duration","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","play","bind","pendingTask","proxyAnimations","cancel","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animationTimeline","isScrollAnimation","limit","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","type","callback","dispatchEvent","event","newEffect","newTimeline","oldTimeline","previousPlayState","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","target","edge","threshold","rootMargin","clamp","Error","parseFloat","margins","split","parsedMargins","parsedValue","positions","j","map","margin","join","startOrEnd","originalViewport","left","right","top","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","min","Reflect","defineProperty","keyframes","apply","proxyAnimation"],"mappings":"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"}