{"version":3,"file":"scroll-timeline.js","sources":["../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  validateSource(scrollTimelineInstance);\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical orientation.\n * @param scrollTimeline {ScrollTimeline}\n * @param orientation {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, orientation) {\n  if (!source)\n    return null;\n\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (orientation == 'horizontal' ||\n     (orientation == 'inline' && horizontalWritingMode) ||\n     (orientation == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Calculates scroll offset based on orientation and source geometry\n * @param source {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, orientation) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(source).writingMode == 'horizontal-tb';\n  if (orientation === \"block\")\n    orientation = horizontalWritingMode ? \"vertical\" : \"horizontal\";\n  else if (orientation === \"inline\")\n    orientation = horizontalWritingMode ? \"horizontal\" : \"vertical\";\n  if (orientation === \"vertical\")\n    return source.scrollHeight - source.clientHeight;\n  else if (orientation === \"horizontal\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\n// Detects if the cached source is obsolete, and updates if required\n// to ensure the new source has a scroll listener.\nfunction validateSource(timeline) {\n  if (!(timeline instanceof ViewTimeline))\n    return;\n\n  const node = timeline.subject;\n  if (!node) {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const display  = getComputedStyle(node).display;\n  if (display == 'none') {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const source = getScrollParent(node);\n  updateSource(timeline, source);\n}\n\nfunction updateSource(timeline, source) {\n  const details = scrollTimelineOptions.get(timeline);\n  const oldSource = details.source;\n  const oldScrollListener = details.scrollListener;\n  if (oldSource == source)\n    return;\n\n  if (oldSource && oldScrollListener) {\n    scrollEventSource(oldSource).removeEventListener(\"scroll\",\n                                                     oldScrollListener);\n  }\n  scrollTimelineOptions.get(timeline).source = source;\n  if (source) {\n    const listener = () => {\n      updateInternal(timeline);\n    };\n    scrollEventSource(source).addEventListener(\"scroll\", listener);\n    details.scrollListener = listener;\n  }\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      orientation: \"block\",\n\n      // View timeline\n      subject: null,\n\n      // Internal members\n      animations: [],\n      scrollListener: null\n    });\n    const source =\n      options && options.source !== undefined ? options.source\n                                              : document.scrollingElement;\n    updateSource(this, source);\n    this.orientation = (options && options.orientation) || \"block\";\n    updateInternal(this);\n  }\n\n  set source(element) {\n    updateSource(this, element);\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    const unresolved = null;\n    //   if source is null\n    const container = this.source;\n    if (!container) return \"inactive\";\n    let scrollerStyle = getComputedStyle(container);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    return \"active\"\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const container = this.source;\n    if (!container) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    const orientation = this.orientation;\n    const scrollPos = directionAwareScrollOffset(container, orientation);\n    const maxScrollPos = calculateMaxScrollOffset(container, orientation);\n\n    return maxScrollPos > 0 ? CSS.percent(100 * scrollPos / maxScrollPos)\n                            : CSS.percent(100);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n\n// Methods for calculation of the containing block.\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block.\n\nfunction findClosestAncestor(element, matcher) {\n  let candidate = element.parentElement;\n  while(candidate != null) {\n    if (matcher(candidate))\n      return candidate;\n    candidate = candidate.parentElement;\n  }\n}\n\nfunction isBlockContainer(element) {\n  const style = getComputedStyle(element);\n  switch (style.display) {\n    case 'block':\n    case 'inline-block':\n    case 'list-item':\n    case 'table':\n    case 'table-caption':\n    case 'flow-root':\n    case 'flex':\n    case 'grid':\n      return true;\n  }\n\n  return false;\n}\n\nfunction isAbsoluteOrFixedElementContainer(element) {\n  const style = style.getComputedStyle(element);\n  if (style.transform != 'none' || style.perspective != 'none')\n    return true;\n\n  if (style.willChange == 'transform' || style.willChange == 'perspective')\n    return true;\n\n  if (style.filter != 'none' || style.willChange == 'filter')\n    return true;\n\n  if (style.backdropFilter != 'none')\n    return true;\n\n  return false;\n}\n\nfunction getContainingBlock(element) {\n  switch (getComputedStyle(element).position) {\n    case 'static':\n    case 'relative':\n    case 'sticky':\n      return findClosestAncestor(element, isBlockContainer);\n\n    case 'absolute':\n    case 'fixed':\n      return findClosestAncestor(element, isAbsoluteOrFixedElementContainer);\n  }\n}\n\nfunction getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  const containingBlock = getContainingBlock(node);\n  if (!containingBlock)\n    return document.scrollingElement;\n\n  const style = getComputedStyle(containingBlock);\n  switch(style['overflow-x']) {\n    case 'auto':\n    case 'scroll':\n    case 'hidden':\n      return containingBlock;\n\n    default:\n      return getScrollParent(containingBlock);\n  }\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\n// TODO: Track changes to determine when associated animations require their\n// timing to be renormalized.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline))\n    return unresolved;\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  let top = 0;\n  let left = 0;\n  let node = target;\n  const ancestor = container.offsetParent;\n  while (node && node != ancestor) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n  left -= container.offsetLeft + container.clientLeft;\n  top -= container.offsetTop + container.clientTop;\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl' || style.writingMode == 'vertical-rl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  const orientation = details.orientation;\n  if (orientation == 'horizontal' ||\n      (orientation == 'inline' && horizontalWritingMode) ||\n      (orientation == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const scrollPos = directionAwareScrollOffset(container, orientation);\n  let startOffset = undefined;\n  let endOffset = undefined;\n\n  switch(phase) {\n    case 'cover':\n      // Range of scroll offsets where the subject element intersects the\n      // source's viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize;\n      break;\n\n    case 'contain':\n      // Range of scroll offsets where the subject element is fully inside of\n      // the container's viewport. If the subject's bounds exceed the size\n      // of the viewport in the scroll direction then the scroll range is\n      // empty.\n      startOffset = viewPos + viewSize - containerSize;\n      endOffset = viewPos;\n      break;\n\n    case 'enter':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-start edge of the viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize - containerSize;\n      break;\n\n    case 'exit':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-end edge of the viewport.\n      startOffset = viewPos;\n      endOffset = viewPos + viewSize;\n      break;\n  }\n\n  // TODO: Revisit once the clamping issue is resolved.\n  // see github.com/w3c/csswg-drafts/issues/7432.\n\n  return { start: startOffset, end: endOffset };\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  if (!phaseRange || !coverRange)\n    return 0;\n\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/rewrite#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n    if (options.axis) {\n      // Orientation called axis for a view timeline. Internally we can still\n      // call this orientation, since the internal naming is not exposed.\n      options.orientation = options.axis;\n    }\n    super(options);\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n\n    validateSource(this);\n    updateInternal(this);\n  }\n\n  get source() {\n    validateSource(this);\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set source(source) {\n    throw new Error(\"Cannot set the source of a view timeline\");\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The orientation is called \"axis\" for a view timeline.\n  // Internally we still call it orientation.\n  get axis() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const scrollPos = directionAwareScrollOffset(this.source, this.orientation);\n    if (scrollPos == unresolved)\n      return unresolved;\n\n    const offsets = range(this, 'cover');\n    if (!offsets)\n      return unresolved;\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime == null)\n      return;\n\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(details,\n                         (timelineTimeMs - details.startTime) *\n                             details.animation.playbackRate);\n  } else if (details.holdTime !== null) {\n    setNativeCurrentTime(details, details.holdTime);\n  }\n}\n\n// Sets the time of the underlying animation, nudging the time slightly if at\n// a scroll-timeline boundary to remain in the active phase.\nfunction setNativeCurrentTime(details, time) {\n  const timeline = details.timeline;\n  const playbackRate = details.animation.playbackRate;\n  const atScrollTimelineBoundary =\n      timeline.currentTime &&\n      timeline.currentTime.value == (playbackRate < 0 ? 0 : 100);\n  const delta =\n      atScrollTimelineBoundary ? (playbackRate < 0 ? 0.001 : -0.001) : 0;\n\n  details.animation.currentTime = time + delta;\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0;\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(\n        details,\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate);\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime = details.timeRange.start;\n  return relativePosition(details.timeline, startTime.name, startTime.offset);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime = details.timeRange.end;\n  return 1 - relativePosition(details.timeline, endTime.name, endTime.offset);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline. The default range is cover 0% to\n      // 100%.\n      timeRange: null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\nfunction parseTimeRange(value) {\n  const timeRange = {\n    start: {\n      name: 'cover',\n      offset: CSS.percent(0)\n    },\n    end: {\n      name: 'cover',\n      offset: CSS.percent(100)\n    }\n  };\n\n  if (!value)\n    return timeRange;\n\n  // Format:\n  // <start-name> <start-offset> <end-name> <end-offset>\n  // <name> --> <name> 0% <name> 100%\n  // <name> <start-offset> <end-offset> --> <name> <start-offset>\n  //                                        <name> <end-offset>\n  // <start-offset> <end-offset> --> cover <start-offset> cover <end-offset>\n  // TODO: Support all formatting options once ratified in the spec.\n  const parts = value.split(' ');\n  const names = [];\n  const offsets = [];\n\n  parts.forEach(part => {\n    if (part.endsWith('%'))\n      offsets.push(parseFloat(part));\n    else\n      names.push(part);\n  });\n\n  if (names.length > 2 || offsets.length > 2 || offsets.length == 1) {\n    throw TypeError(\"Invalid time range\");\n  }\n\n  if (names.length) {\n    timeRange.start.name = names[0];\n    timeRange.end.name = names.length > 1 ? names[1] : names[0];\n  }\n\n  if (offsets.length > 1) {\n    timeRange.start.offset = CSS.percent(offsets[0]);\n    timeRange.end.offset = CSS.percent(offsets[1]);\n  }\n\n  return timeRange;\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      const details = proxyAnimations.get(proxyAnimation);\n      details.timeRange = parseTimeRange(options.timeRange);\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  SOURCE_ELEMENT: /selector\\(#([^)]+)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\n// 1 - Extracts @scroll-timeline and saves it in scrollTimelineOptions.\n// 2 - If we find any animation-timeline in any of the CSS Rules, \n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.scrollTimelineOptions = new Map(); // save options by name\n    this.keyframeNames = new Set();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // @scroll-timeline and @keyframe names, in the second pass\n  // we will parse other rules\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      if (this.lookAhead(\"@scroll-timeline\", p)) {\n        const { scrollTimeline, startIndex, endIndex } = this.parseScrollTimeline(p);\n        if (firstPass) this.scrollTimelineOptions.set(scrollTimeline.name, scrollTimeline);\n      } else {\n        const rule = this.parseQualifiedRule(p);\n        if (!rule) continue;\n        if (firstPass) {\n          this.extractAndSaveKeyframeName(rule.selector);\n        } else {\n          this.handleScrollTimelineProps(rule, p);\n        }\n      }\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getScrollTimelineName(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return current['animation-timeline'];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseScrollTimeline(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"@scroll-timeline\");\n    this.eatWhitespace(p);\n    let name = this.parseIdentifier(p);\n    this.eatWhitespace(p);\n    this.assertString(p, \"{\"); // eats {\n    this.eatWhitespace(p);\n\n    let scrollTimeline = {\n      name: name,\n      source: \"auto\",\n      orientation: undefined,\n    };\n\n    while (this.peek(p) !== \"}\") {\n      const property = this.parseIdentifier(p);\n      this.eatWhitespace(p);\n      this.assertString(p, \":\");\n      this.eatWhitespace(p);\n      scrollTimeline[property] = this.removeEnclosingDoubleQuotes(this.eatUntil(\";\", p));\n      this.assertString(p, \";\");\n      this.eatWhitespace(p);\n    }\n\n    this.assertString(p, \"}\");\n    const endIndex = p.index;\n    this.eatWhitespace(p);\n    return {\n      scrollTimeline,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    let timelineNames = [];\n    let animationNames = [];\n\n    if (hasAnimationTimeline) {\n      timelineNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIMELINE);\n    }\n\n    if (hasAnimationName) {\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n    }\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n          const timelineName = this.extractTimelineName(shorthand);\n          if (animationName) animationNames.push(animationName);\n          if (timelineName) {\n            timelineNames.push(timelineName);\n            // Remove timeline name from animation shorthand\n            // so the native implementation works with the rest of the properties\n            // Retain length of original name though, to play nice with multiple\n            // animations that might have been applied\n            rule.block.contents = rule.block.contents.replace(\n              timelineName,\n              \" \".repeat(timelineName.length)\n            );\n            this.replacePart(\n              rule.block.startIndex,\n              rule.block.endIndex,\n              rule.block.contents,\n              p\n            );\n          }\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(timelineName || hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                \"animation:\",\n                \"animation: 1s \"\n              );\n              this.replacePart(\n                rule.block.startIndex,\n                rule.block.endIndex,\n                rule.block.contents,\n                p\n              );\n            }\n          }\n        });\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    if (animationNames.length == 0) {\n      for (let i = 0; i < timelineNames.length; i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': undefined,\n          'animation-timeline': timelineNames[i]\n        });\n      }\n    } else {\n      for (let i = 0; i < Math.max(timelineNames.length, animationNames.length); i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': animationNames[i % animationNames.length],\n          'animation-timeline': timelineNames[i % timelineNames.length]\n        });\n      }\n    }\n\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNames);\n  }\n\n  extractTimelineName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.scrollTimelineOptions);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  /**\n   * @param {String} selector contains everything upto '{', eg: \"@keyframes expand\"\n   */\n  extractAndSaveKeyframeName(selector) {\n    if (selector.startsWith(\"@keyframes\")) {\n      selector.split(\" \").forEach((item, index) => {\n        if (index > 0) {\n          this.keyframeNames.add(item);\n        }\n      })\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  eatUntil(s, p) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher) {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(\",\").map(item => item.trim());\n  }\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser, RegexMatcher } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\n// This implementation is based on https://drafts.csswg.org/scroll-animations-1/\n// TODO: Should update accordingly when new spec lands.\nfunction getSourceElement(source) {\n  const matches = RegexMatcher.SOURCE_ELEMENT.exec(source);\n  const SOURCE_CAPTURE_INDEX = 1;\n  if (matches) {\n    return document.getElementById(matches[SOURCE_CAPTURE_INDEX]);\n  } else if (source === \"auto\") {\n    return document.scrollingElement;\n  } else {\n    return null;\n  }\n}\n\nfunction isDescendant(child, parent) {\n  while (child) {\n    if (child == parent) return true;\n    child = child.parentNode;\n  }\n  return false;\n}\n\nfunction createScrollTimeline(name) {\n  const options = parser.scrollTimelineOptions.get(name);\n  if (!options) return null;\n\n  const sourceElement = getSourceElement(options.source);\n\n  const scrollTimeline = new ScrollTimeline({\n    ...(sourceElement ? { source: getSourceElement(options.source) } : {}),\n    ...(options.orientation != \"auto\" ? { orientation: options.orientation } : {}),\n  });\n  return scrollTimeline;\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: works\")) {\n    return;\n  }\n\n  initMutationObserver();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      const timelineName = parser.getScrollTimelineName(anim.animationName, evt.target);\n      if (timelineName) {\n        const scrollTimeline = createScrollTimeline(timelineName);\n        if (anim.timeline != scrollTimeline) {\n          const proxyAnimation = new ProxyAnimation(anim, scrollTimeline);\n          anim.pause();\n          proxyAnimation.play();\n        }\n      }\n    });\n  });\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\ninitCSSPolyfill();\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\nif (\n  !Reflect.defineProperty(window, \"ViewTimeline\", { value: ViewTimeline })\n) {\n  throw Error(\n    \"Error installing ViewTimeline polyfill: could not attach ViewTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","CSSUnitValue","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","CSSMathSum","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","scrollTimelineOptions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","validateSource","animations","timelineTime","currentTime","tickAnimation","directionAwareScrollOffset","orientation","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","timeline","ViewTimeline","node","subject","display","updateSource","getScrollParent","oldSource","oldScrollListener","scrollListener","removeEventListener","listener","addEventListener","removeAnimation","scrollTimeline","animation","splice","addAnimation","push","ScrollTimeline","options","undefined","element","indexOf","TypeError","percent","container","scrollerStyle","overflow","phase","scrollPos","maxScrollPos","calculateMaxScrollOffset","scrollHeight","clientHeight","scrollWidth","clientWidth","findClosestAncestor","matcher","candidate","parentElement","isBlockContainer","isAbsoluteOrFixedElementContainer","style","transform","perspective","willChange","filter","backdropFilter","containingBlock","position","getContainingBlock","range","target","top","left","ancestor","offsetParent","offsetLeft","offsetTop","clientLeft","clientTop","viewSize","viewPos","containerSize","direction","startOffset","endOffset","start","end","relativePosition","phaseRange","coverRange","_ScrollTimeline","_this","axis","_assertThisInitialized","unresolved","offsets","nativeElementAnimate","Element","animate","nativeAnimation","Animation","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","effect","getTiming","normalizedTiming","max","delay","endDelay","iterations","setNativeCurrentTime","time","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animationTimeline","isScrollAnimation","specifiedTiming","timeRange","finish","_proto2","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","callback","event","nativeUpdateTiming","updateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","assign","computedDelays","offset","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","obj","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","progress","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","ANIMATION_TIMELINE","ANIMATION_NAME","ANIMATION","SOURCE_ELEMENT","parser","StyleParser","cssRulesWithTimelineName","Map","keyframeNames","Set","_proto","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","parseScrollTimeline","rule","parseQualifiedRule","extractAndSaveKeyframeName","selector","handleScrollTimelineProps","getScrollTimelineName","animationName","current","matches","startIndex","assertString","parseIdentifier","peek","property","removeEnclosingDoubleQuotes","eatUntil","endIndex","includes","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","timelineNames","animationNames","extractMatches","shorthand","extractAnimationName","timelineName","extractTimelineName","replace","repeat","replacePart","hasDuration","saveRelationInList","split","part","exec","findMatchingEntryInContainer","has","lastIndex","match","parseError","_this2","startsWith","item","add","parseSelector","trim","eatBlock","s","substring","substr","replacement","slice","level","advance","map","getSourceElement","getElementById","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","_step","_iterator","_createForOfIteratorHelperLoose","done","entry","_step2","addedNodes","_iterator2","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","querySelectorAll","tag","initMutationObserver","evt","getAnimations","anim","sourceElement","createScrollTimeline","proxyAnimation","keyframes","parts","names","endsWith","parseFloat","parseTimeRange"],"mappings":"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"}