{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/intersection-based-offset.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["export function parseLength(obj, acceptStr) {\n  if (obj instanceof CSSUnitValue || obj instanceof CSSMathSum)\n    return obj;\n  if (!acceptStr)\n    return null;\n  let matches = obj.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if (matches) {\n    let value = matches[1];\n    // The unit for % is percent.\n    let unit = matches[2] == '%' ? 'percent' : matches[2];\n    return new CSSUnitValue(value, unit);\n  }\n  return null;\n}\n","// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  const timelineRange = range(scrollTimelineInstance);\n  let forceTimingUpdate = false;\n  if (timelineRange != details.range) {\n    // Force renomalization of effect timing.\n    forceTimingUpdate = true;\n    details.range = timelineRange;\n  }\n  for (let i = 0; i < animations.length; i++) {\n    if (forceTimingUpdate) {\n      const effect = animations[i].effect;\n      if (effect)\n        effect.updateTiming({});\n    }\n\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical orientation.\n * @param scrollTimeline {ScrollTimeline}\n * @param orientation {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, orientation) {\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (orientation == 'horizontal' ||\n     (orientation == 'inline' && horizontalWritingMode) ||\n     (orientation == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Enables the usage of custom parser and evaluator function, utilized by intersection based offset.\n * @param parseFunction {Function}\n * @param evaluateFunction {Function}\n * @returns {Array} all currently installed parsers\n */\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction,\n  });\n  return extensionScrollOffsetFunctions;\n}\n\n/**\n * Calculates scroll offset based on orientation and source geometry\n * @param source {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, orientation) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(this.source).writingMode == 'horizontal-tb';\n  if (orientation === \"block\")\n    orientation = horizontalWritingMode ? \"vertical\" : \"horizontal\";\n  else if (orientation === \"inline\")\n    orientation = horizontalWritingMode ? \"horizontal\" : \"vertical\";\n  if (orientation === \"vertical\")\n    return source.scrollHeight - source.clientHeight;\n  else if (orientation === \"horizontal\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\nexport function calculateScrollOffset(\n  autoValue,\n  source,\n  orientation,\n  offset,\n  fn\n) {\n  if (fn)\n    return fn(\n      source,\n      orientation,\n      offset,\n      autoValue.value == 0 ? \"start\" : \"end\"\n    );\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n\n  let maxValue =\n    orientation === \"vertical\"\n      ? source.scrollHeight - source.clientHeight\n      : source.scrollWidth - source.clientWidth;\n  let parsed = parseLength(offset === AUTO ? autoValue : offset);\n  return resolvePx(parsed, maxValue);\n}\n\n/**\n * Resolve scroll offsets per\n * https://drafts.csswg.org/scroll-animations-1/#effective-scroll-offsets-algorithm\n * @param source {DOMElement}\n * @param orientation {String}\n * @param scrollOffsets {Array}\n * @param fns {Array}\n * @returns {Array}\n */\nexport function resolveScrollOffsets(\n  source,\n  orientation,\n  scrollOffsets,\n  fns\n) {\n  // 1. Let effective scroll offsets be an empty list of effective scroll\n  // offsets.\n  let effectiveScrollOffsets = [];\n  // 2. Let first offset be true.\n  let firstOffset = true;\n\n  // 3. If scrollOffsets is empty\n  if(scrollOffsets.length == 0) {\n    // 3.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 3.2 Set first offset to false.\n    firstOffset = false;\n    // 3.3 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(100, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n  }\n  // 4. If scrollOffsets has exactly one element\n  else if(scrollOffsets.length == 1) {\n    // 4.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 4.2 Set first offset to false.\n    firstOffset = false;\n  }\n  // 5. For each scroll offset in the list of scrollOffsets, perform the\n  // following steps:\n  for (let i = 0; i < scrollOffsets.length; i++) {\n    // 5.1 Let effective offset be the result of applying the procedure\n    // to resolve a scroll timeline offset for scroll offset with the is\n    // first flag set to first offset.\n    let effectiveOffset = calculateScrollOffset(\n      firstOffset ? new CSSUnitValue(0, 'percent') : new CSSUnitValue(100, 'percent'),\n      source,\n      orientation,\n      scrollOffsets[i],\n      fns[i]);\n    //  5.2 If effective offset is null, the effective scroll offsets is empty and abort the remaining steps.\n    if(effectiveOffset === null)\n      return [];\n    // 5.3 Add effective offset into effective scroll offsets.\n    effectiveScrollOffsets.push(effectiveOffset);\n    // 5.4 Set first offset to false.\n    firstOffset = false;\n  }\n  // 6. Return effective scroll offsets.\n  return effectiveScrollOffsets;\n}\n\n/**\n * Compute scroll timeline progress per\n * https://drafts.csswg.org/scroll-animations-1/#progress-calculation-algorithm\n * @param offset {number}\n * @param scrollOffsets {Array}\n * @returns {number}\n */\nexport function ComputeProgress(\n  offset,\n  scrollOffsets\n) {\n  // 1. Let scroll offsets be the result of applying the procedure to resolve\n  // scroll timeline offsets for scrollOffsets.\n  // 2. Let offset index correspond to the position of the last offset in\n  // scroll offsets whose value is less than or equal to offset and the value\n  // at the following position greater than offset.\n  let offsetIndex;\n  for (offsetIndex = scrollOffsets.length - 2;\n       offsetIndex >= 0 && \n         !(scrollOffsets[offsetIndex] <= offset && offset < scrollOffsets[offsetIndex + 1]);\n       offsetIndex--) {\n  }\n  // 3. Let start offset be the offset value at position offset index in\n  // scroll offsets.\n  let startOffset = scrollOffsets[offsetIndex];\n  // 4. Let end offset be the value of next offset in scroll offsets after\n  // start offset.\n  let endOffset = scrollOffsets[offsetIndex + 1];\n  // 5. Let size be the number of offsets in scroll offsets.\n  let size = scrollOffsets.length;\n  // 6. Let offset weight be the result of evaluating 1 / (size - 1).\n  let offsetWeight = 1 / (size - 1);\n  // 7. Let interval progress be the result of evaluating\n  // (offset - start offset) / (end offset - start offset).\n  let intervalProgress =  (offset - startOffset) / (endOffset - startOffset);\n  // 8. Return the result of evaluating\n  // (offset index + interval progress) × offset weight.\n  return (offsetIndex + intervalProgress) * offsetWeight;\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      orientation: \"block\",\n      scrollOffsets: [],\n\n      // Internal members\n      animations: [],\n      scrollOffsetFns: [],\n      range: undefined\n    });\n    this.source =\n      options && options.source !== undefined ? options.source : document.scrollingElement;\n    this.orientation = (options && options.orientation) || \"block\";\n    this.scrollOffsets = options && options.scrollOffsets !== undefined ? options.scrollOffsets : [];\n  }\n\n  set source(element) {\n    if (this.source)\n      scrollEventSource(this.source).removeEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    scrollTimelineOptions.get(this).source = element;\n    if (element) {\n      scrollEventSource(element).addEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    }\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set scrollOffsets(value) {\n    let offsets = [];\n    let fns = [];\n    for (let input of value) {\n      let fn = null;\n      let offset = undefined;\n      if (input == \"auto\")\n        input = AUTO;\n      for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n        let result = extensionScrollOffsetFunctions[i].parse(input);\n        if (result !== undefined) {\n          offset = result;\n          fn = extensionScrollOffsetFunctions[i].evaluate;\n          break;\n        }\n      }\n      if (!fn) {\n        if (input != AUTO) {\n          let parsed = parseLength(input);\n          // TODO: This should check CSSMathSum values as well.\n          if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n            throw TypeError(\"Invalid scrollOffsets entry.\");\n        }\n        offset = input;\n      }\n      offsets.push(offset);\n      fns.push(fn);\n    }\n    if (offsets.length == 1 && offsets[0] == AUTO)\n      throw TypeError(\"Invalid scrollOffsets value.\");\n    let data = scrollTimelineOptions.get(this);\n    data.scrollOffsets = offsets;\n    data.scrollOffsetFns = fns;\n    updateInternal(this);\n  }\n\n  get scrollOffsets() {\n    let data = scrollTimelineOptions.get(this);\n    return data.scrollOffsets;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    let unresolved = null;\n    //   if source is null\n    if (!this.source) return \"inactive\";\n    let scrollerStyle = getComputedStyle(this.source);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (this.source != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n\n    //   if source's effective scroll range is null\n    if (effectiveScrollOffsets.length == 0)\n      return \"inactive\";\n\n    let maxOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.source,\n      this.orientation,\n      new CSSUnitValue(100, 'percent'),\n      null\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return \"before\";\n    if (currentScrollOffset >= endOffset && endOffset < maxOffset)\n      return \"after\";\n    return \"active\"\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.source) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return CSS.percent(0);\n\n    // Step 4\n    if (currentScrollOffset >= endOffset)\n      return CSS.percent(100);\n\n    // Step 5\n    let progress = ComputeProgress(\n      currentScrollOffset,\n      effectiveScrollOffsets\n    );\n    return CSS.percent(100 * progress);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n\nfunction getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  const style = getComputedStyle(node);\n  switch(style['overflow-x']) {\n    case 'auto':\n    case 'scroll':\n    case 'hidden':\n      return node;\n\n    default:\n      return getScrollParent(node.parentNode);\n  }\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline)) {\n    return {\n      start: 0,\n      end: calculateMaxScrollOffset(timeline.source, timeline.orientation)\n    }\n  }\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  let top = 0;\n  let left = 0;\n  let node = target;\n  while (node && node != container) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  const orientation = details.orientation;\n  if (orientation == 'horizontal' ||\n      (orientation == 'inline' && horizontalWritingMode) ||\n      (orientation == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const scrollPos = directionAwareScrollOffset(container, orientation);\n  let startOffset = undefined;\n  let endOffset = undefined;\n\n  switch(phase) {\n    case 'cover':\n      // Range of scroll offsets where the subject element intersects the\n      // source's viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize;\n      break;\n\n    case 'contain':\n      // Range of scroll offsets where the subject element is fully inside of\n      // the container's viewport. If the subject's bounds exceed the size\n      // of the viewport in the scroll direction then the scroll range is\n      // empty.\n      startOffset = viewPos + viewSize - containerSize;\n      endOffset = viewPos;\n      break;\n\n    case 'enter':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-start edge of the viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize - containerSize;\n      break;\n\n    case 'exit':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-end edge of the viewport.\n      startOffset = viewPos;\n      endOffset = viewPos + viewSize;\n      break;\n  }\n\n  return { start: startOffset, end: endOffset };\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/rewrite#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n\n    // We rely on having source set in order to properly set up the\n    // scroll listener. Ideally, this should be null if left unspecified.\n    // TODO: Add a mutation observer that detects any style change that could\n    // affect resolution of the source container.\n    options.source = getScrollParent(options.subject.parentNode);\n    if (options.axis) {\n      // Orientation called axis for a view timeline. Internally we can still\n      // call this orientation, since the internal naming is not exposed.\n      options.orientation = options.axis;\n    }\n\n    super(options);\n\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The orientation is called \"axis\" for a view timeline.\n  // Internally we still call it orientation.\n  get axis() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get phase() {\n    if (!this.subject)\n      return \"inactive\";\n\n    const container = this.source;\n    if (!container)\n      return \"inactive\";\n\n    let scrollerStyle = getComputedStyle(container);\n\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    // This check is not in the spec.\n    // http://github.com/w3c/csswg-drafts/issues/7259\n    // TODO: Update once specced.\n    let node = this.subject;\n    while (node && node != container) {\n      node = node.offsetParent;\n    }\n    if (node != container)\n      return \"inactive\";\n\n    return \"active\";\n  }\n\n  get currentTime() {\n    const scrollPos = directionAwareScrollOffset(this.source, this.orientation);\n    const offsets = range(this, 'cover');\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  installScrollOffsetExtension,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    // TODO: Support hold phase.\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n    details.animation.currentTime =\n        (timelineTime - details.startTime) *\n            details.animation.playbackRate;\n  } else if (details.holdTime !== null) {\n    details.animation.currentTime = details.holdTime;\n  }\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0; // <-- This is not right was it doesn't support start delay.\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    details.animation.currentTime =\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate;\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for timeline phase.\n        const phase = details.timeline.phase;\n        const fill = timing.fill;\n\n        if(phase == 'before' && fill != 'backwards' && fill != 'both') {\n          timing.progress = null;\n        }\n        if (phase == 'after' && fill != 'forwards' && fill != 'both') {\n          timing.progress = null;\n        }\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime =\n      details.timelineStartTime|| { phase: 'cover', percent: CSS.percent(0) };\n  return relativePosition(details.timeline, startTime.phase, startTime.percent);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime =\n      details.timelineEndTime || { phase: 'cover', percent: CSS.percent(100) };\n  return 1 - relativePosition(details.timeline, endTime.phase, endTime.percent);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline.  The default range is cover 0% to\n      // 100%.\n      timelineStartTime: null,\n      timelineEndTime: null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\nfunction parseViewTimelineTime(value, defaultPercentage) {\n  const PHASE_INDEX = 1;\n  const PERCENT_INDEX = 3;\n\n  if (!value)\n    return null;\n\n  const match = /(\\w+)\\s+((\\-?\\d+)%)?/.exec(value);\n  if (!match)\n    return null;\n\n  const phase = match[PHASE_INDEX];\n  const percent = parseFloat(match[PERCENT_INDEX] || defaultPercentage);\n\n  return { phase: phase, percent: CSS.percent(percent) };\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      details = proxyAnimations.get(proxyAnimation);\n      details.timelineStartTime = parseViewTimelineTime(options.startTime);\n      details.timelineEndTime = parseViewTimelineTime(options.endTime);\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [\n    [TOP, BOTTOM],\n    [RIGHT, LEFT],\n  ],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]],\n];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: \"start\",\n      threshold: 0,\n      rootMargin: [\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n      ],\n    });\n    this.target = value.target;\n    this.edge = value.edge || \"start\";\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || \"0px 0px 0px 0px\";\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error(\"Intersection target must be an element.\");\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if ([\"start\", \"end\"].indexOf(value) == -1) return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a TypeError for a parse error.\n    if (threshold != threshold)\n      throw TypeError(\"Invalid threshold.\");\n    // TODO(https://crbug.com/1136516): This should throw a RangeError\n    // consistent with the intersection observer spec but the current\n    // test expectations are looking for a TypeError.\n    if (threshold < 0 || threshold > 1)\n      throw TypeError(\"threshold must be in the range [0, 1]\");\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/);\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError(\n        \"rootMargin must contain between 1 and 4 length components\"\n      );\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i], true);\n      if (!parsedValue) throw TypeError(\"Unrecognized rootMargin length\");\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [\n          parseFloat(parsedValue.value),\n          parsedValue.unit,\n        ];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this)\n      .rootMargin.map((margin) => {\n        return margin.join(\"\");\n      })\n      .join(\" \");\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n}\n\nexport function parseOffset(value) {\n  if (value.target) return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == \"percent\") return (length[0] * containerSize) / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(source, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == \"block\") orientation = \"vertical\";\n  else if (orientation == \"inline\") orientation = \"horizontal\";\n  let originalViewport =\n    source == document.scrollingElement\n      ? {\n          left: 0,\n          right: source.clientWidth,\n          top: 0,\n          bottom: source.clientHeight,\n          width: source.clientWidth,\n          height: source.clientHeight,\n        }\n      : source.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(\n      resolveLength(\n        parsedMargins[i],\n        i % 2 == 0 ? originalViewport.height : originalViewport.width\n      )\n    );\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width:\n      originalViewport.right -\n      originalViewport.left +\n      computedMargins[LEFT] +\n      computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height:\n      originalViewport.bottom -\n      originalViewport.top +\n      computedMargins[TOP] +\n      computedMargins[BOTTOM],\n  };\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == \"start\") threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == \"vertical\") {\n    let point =\n      target.top +\n      target.height * threshold -\n      viewport.top +\n      source.scrollTop;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.height);\n      return Math.min(point, source.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.height;\n      return point;\n    }\n  } else {\n    // orientation == 'horizontal'\n    let point =\n      target.left +\n      target.width * threshold -\n      viewport.left +\n      source.scrollLeft;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.width);\n      return Math.min(point, source.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  SOURCE_ELEMENT: /selector\\(#([^)]+)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\n// 1 - Extracts @scroll-timeline and saves it in scrollTimelineOptions.\n// 2 - If we find any animation-timeline in any of the CSS Rules, \n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.scrollTimelineOptions = new Map(); // save options by name\n    this.keyframeNames = new Set();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // @scroll-timeline and @keyframe names, in the second pass\n  // we will parse other rules\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      if (this.lookAhead(\"@scroll-timeline\", p)) {\n        const { scrollTimeline, startIndex, endIndex } = this.parseScrollTimeline(p);\n        if (firstPass) this.scrollTimelineOptions.set(scrollTimeline.name, scrollTimeline);\n      } else {\n        const rule = this.parseQualifiedRule(p);\n        if (!rule) continue;\n        if (firstPass) {\n          this.extractAndSaveKeyframeName(rule.selector);\n        } else {\n          this.handleScrollTimelineProps(rule, p);\n        }\n      }\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getScrollTimelineName(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return current['animation-timeline'];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseScrollTimeline(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"@scroll-timeline\");\n    this.eatWhitespace(p);\n    let name = this.parseIdentifier(p);\n    this.eatWhitespace(p);\n    this.assertString(p, \"{\"); // eats {\n    this.eatWhitespace(p);\n\n    let scrollTimeline = {\n      name: name,\n      source: \"auto\",\n      orientation: undefined,\n    };\n\n    while (this.peek(p) !== \"}\") {\n      const property = this.parseIdentifier(p);\n      this.eatWhitespace(p);\n      this.assertString(p, \":\");\n      this.eatWhitespace(p);\n      scrollTimeline[property] = this.removeEnclosingDoubleQuotes(this.eatUntil(\";\", p));\n      this.assertString(p, \";\");\n      this.eatWhitespace(p);\n    }\n\n    this.assertString(p, \"}\");\n    const endIndex = p.index;\n    this.eatWhitespace(p);\n    return {\n      scrollTimeline,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    let timelineNames = [];\n    let animationNames = [];\n\n    if (hasAnimationTimeline) {\n      timelineNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIMELINE);\n    }\n\n    if (hasAnimationName) {\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n    }\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n          const timelineName = this.extractTimelineName(shorthand);\n          if (animationName) animationNames.push(animationName);\n          if (timelineName) {\n            timelineNames.push(timelineName);\n            // Remove timeline name from animation shorthand\n            // so the native implementation works with the rest of the properties\n            // Retain length of original name though, to play nice with multiple\n            // animations that might have been applied\n            rule.block.contents = rule.block.contents.replace(\n              timelineName,\n              \" \".repeat(timelineName.length)\n            );\n            this.replacePart(\n              rule.block.startIndex,\n              rule.block.endIndex,\n              rule.block.contents,\n              p\n            );\n          }\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(timelineName || hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                \"animation:\",\n                \"animation: 1s \"\n              );\n              this.replacePart(\n                rule.block.startIndex,\n                rule.block.endIndex,\n                rule.block.contents,\n                p\n              );\n            }\n          }\n        });\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    if (animationNames.length == 0) {\n      for (let i = 0; i < timelineNames.length; i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': undefined,\n          'animation-timeline': timelineNames[i]\n        });\n      }\n    } else {\n      for (let i = 0; i < Math.max(timelineNames.length, animationNames.length); i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': animationNames[i % animationNames.length],\n          'animation-timeline': timelineNames[i % timelineNames.length]\n        });\n      }\n    }\n\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNames);\n  }\n\n  extractTimelineName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.scrollTimelineOptions);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  /**\n   * @param {String} selector contains everything upto '{', eg: \"@keyframes expand\"\n   */\n  extractAndSaveKeyframeName(selector) {\n    if (selector.startsWith(\"@keyframes\")) {\n      selector.split(\" \").forEach((item, index) => {\n        if (index > 0) {\n          this.keyframeNames.add(item);\n        }\n      })\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  eatUntil(s, p) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher) {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(\",\").map(item => item.trim());\n  }\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser, RegexMatcher } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\n// This implementation is based on https://drafts.csswg.org/scroll-animations-1/\n// TODO: Should update accordingly when new spec lands.\nfunction getSourceElement(source) {\n  const matches = RegexMatcher.SOURCE_ELEMENT.exec(source);\n  const SOURCE_CAPTURE_INDEX = 1;\n  if (matches) {\n    return document.getElementById(matches[SOURCE_CAPTURE_INDEX]);\n  } else if (source === \"auto\") {\n    return document.scrollingElement;\n  } else {\n    return null;\n  }\n}\n\nfunction isDescendant(child, parent) {\n  while (child) {\n    if (child == parent) return true;\n    child = child.parentNode;\n  }\n  return false;\n}\n\nfunction createScrollTimeline(name) {\n  const options = parser.scrollTimelineOptions.get(name);\n  if (!options) return null;\n\n  const sourceElement = getSourceElement(options.source);\n\n  const scrollTimeline = new ScrollTimeline({\n    ...(sourceElement ? { source: getSourceElement(options.source) } : {}),\n    ...(options.orientation != \"auto\" ? { orientation: options.orientation } : {}),\n  });\n  return scrollTimeline;\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: works\")) {\n    return;\n  }\n\n  initMutationObserver();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      const timelineName = parser.getScrollTimelineName(anim.animationName, evt.target);\n      if (timelineName) {\n        const scrollTimeline = createScrollTimeline(timelineName);\n        if (anim.timeline != scrollTimeline) {\n          const proxyAnimation = new ProxyAnimation(anim, scrollTimeline);\n          anim.pause();\n          proxyAnimation.play();\n        }\n      }\n    });\n  });\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n  installScrollOffsetExtension\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { calculateOffset, parseOffset } from \"./intersection-based-offset\";\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\ninitCSSPolyfill();\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\nif (\n  !Reflect.defineProperty(window, \"ViewTimeline\", { value: ViewTimeline })\n) {\n  throw Error(\n    \"Error installing ViewTimeline polyfill: could not attach ViewTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["parseLength","obj","acceptStr","CSSUnitValue","CSSMathSum","matches","trim","match","_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","AUTO","scrollTimelineOptions","extensionScrollOffsetFunctions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","animations","timelineTime","currentTime","timelineRange","range","forceTimingUpdate","effect","updateTiming","tickAnimation","directionAwareScrollOffset","orientation","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","calculateMaxScrollOffset","scrollHeight","clientHeight","scrollWidth","clientWidth","resolvePx","cssValue","resolvedLength","TypeError","_step","total","_iterator","_createForOfIteratorHelperLoose","done","calculateScrollOffset","autoValue","offset","fn","maxValue","resolveScrollOffsets","scrollOffsets","fns","effectiveScrollOffsets","firstOffset","push","effectiveOffset","removeAnimation","scrollTimeline","animation","splice","addAnimation","ScrollTimeline","options","scrollOffsetFns","undefined","element","_this","removeEventListener","addEventListener","indexOf","_step2","offsets","_iterator2","input","parse","evaluate","parsed","data","percent","scrollerStyle","display","overflow","maxOffset","startOffset","endOffset","phase","progress","offsetIndex","ComputeProgress","getScrollParent","node","parentNode","timeline","ViewTimeline","start","end","container","target","subject","top","left","offsetLeft","offsetTop","offsetParent","style","viewSize","viewPos","containerSize","direction","relativePosition","phaseRange","coverRange","_ScrollTimeline","_this2","axis","scrollPos","nativeElementAnimate","Element","animate","nativeAnimation","Animation","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","getTiming","normalizedTiming","max","delay","endDelay","iterations","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","timelineTimeMs","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animationTimeline","isScrollAnimation","specifiedTiming","timelineStartTime","timelineEndTime","finish","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","_proto2","persist","resetPendingTasks","callback","event","nativeUpdateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","fill","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","assign","computedDelays","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","parseViewTimelineTime","defaultPercentage","exec","parseFloat","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","edge","threshold","rootMargin","clamp","map","margin","margins","split","parsedMargins","parsedValue","positions","j","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","ANIMATION_TIMELINE","ANIMATION_NAME","ANIMATION","SOURCE_ELEMENT","parser","StyleParser","cssRulesWithTimelineName","Map","keyframeNames","Set","_proto","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","parseScrollTimeline","rule","parseQualifiedRule","extractAndSaveKeyframeName","selector","handleScrollTimelineProps","getScrollTimelineName","animationName","current","startIndex","assertString","parseIdentifier","peek","property","removeEnclosingDoubleQuotes","eatUntil","endIndex","includes","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","timelineNames","animationNames","extractMatches","shorthand","extractAnimationName","timelineName","extractTimelineName","replace","repeat","replacePart","hasDuration","saveRelationInList","filter","part","findMatchingEntryInContainer","has","lastIndex","parseError","startsWith","item","add","parseSelector","eatBlock","s","substring","substr","replacement","slice","level","advance","matcher","getSourceElement","getElementById","calculateOffset","startOrEnd","originalViewport","right","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","min","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","entry","addedNodes","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","querySelectorAll","tag","initMutationObserver","evt","getAnimations","anim","sourceElement","createScrollTimeline","proxyAnimation","keyframes"],"mappings":"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"}