{"version":3,"file":"scroll-timeline.js","sources":["../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  validateSource(scrollTimelineInstance);\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical orientation.\n * @param scrollTimeline {ScrollTimeline}\n * @param orientation {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, orientation) {\n  if (!source)\n    return null;\n\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (orientation == 'horizontal' ||\n     (orientation == 'inline' && horizontalWritingMode) ||\n     (orientation == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Calculates scroll offset based on orientation and source geometry\n * @param source {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, orientation) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(source).writingMode == 'horizontal-tb';\n  if (orientation === \"block\")\n    orientation = horizontalWritingMode ? \"vertical\" : \"horizontal\";\n  else if (orientation === \"inline\")\n    orientation = horizontalWritingMode ? \"horizontal\" : \"vertical\";\n  if (orientation === \"vertical\")\n    return source.scrollHeight - source.clientHeight;\n  else if (orientation === \"horizontal\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\n// Detects if the cached source is obsolete, and updates if required\n// to ensure the new source has a scroll listener.\nfunction validateSource(timeline) {\n  if (!(timeline instanceof ViewTimeline))\n    return;\n\n  const node = timeline.subject;\n  if (!node) {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const display  = getComputedStyle(node).display;\n  if (display == 'none') {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const source = getScrollParent(node);\n  updateSource(timeline, source);\n}\n\nfunction updateSource(timeline, source) {\n  const details = scrollTimelineOptions.get(timeline);\n  const oldSource = details.source;\n  const oldScrollListener = details.scrollListener;\n  if (oldSource == source)\n    return;\n\n  if (oldSource && oldScrollListener) {\n    scrollEventSource(oldSource).removeEventListener(\"scroll\",\n                                                     oldScrollListener);\n  }\n  scrollTimelineOptions.get(timeline).source = source;\n  if (source) {\n    const listener = () => {\n      updateInternal(timeline);\n    };\n    scrollEventSource(source).addEventListener(\"scroll\", listener);\n    details.scrollListener = listener;\n  }\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      orientation: \"block\",\n\n      // View timeline\n      subject: null,\n\n      // Internal members\n      animations: [],\n      scrollListener: null\n    });\n    const source =\n      options && options.source !== undefined ? options.source\n                                              : document.scrollingElement;\n    updateSource(this, source);\n    this.orientation = (options && options.orientation) || \"block\";\n    updateInternal(this);\n  }\n\n  set source(element) {\n    updateSource(this, element);\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    const unresolved = null;\n    //   if source is null\n    const container = this.source;\n    if (!container) return \"inactive\";\n    let scrollerStyle = getComputedStyle(container);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    return \"active\"\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const container = this.source;\n    if (!container) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    const orientation = this.orientation;\n    const scrollPos = directionAwareScrollOffset(container, orientation);\n    const maxScrollPos = calculateMaxScrollOffset(container, orientation);\n\n    return maxScrollPos > 0 ? CSS.percent(100 * scrollPos / maxScrollPos)\n                            : CSS.percent(100);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n\n// Methods for calculation of the containing block.\n// See https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block.\n\nfunction findClosestAncestor(element, matcher) {\n  let candidate = element.parentElement;\n  while(candidate != null) {\n    if (matcher(candidate))\n      return candidate;\n    candidate = candidate.parentElement;\n  }\n}\n\nfunction isBlockContainer(element) {\n  const style = getComputedStyle(element);\n  switch (style.display) {\n    case 'block':\n    case 'inline-block':\n    case 'list-item':\n    case 'table':\n    case 'table-caption':\n    case 'flow-root':\n    case 'flex':\n    case 'grid':\n      return true;\n  }\n\n  return false;\n}\n\nfunction isFixedElementContainer(element) {\n  const style = getComputedStyle(element);\n  if (style.transform != 'none' || style.perspective != 'none')\n    return true;\n\n  if (style.willChange == 'transform' || style.willChange == 'perspective')\n    return true;\n\n  if (style.filter != 'none' || style.willChange == 'filter')\n    return true;\n\n  if (style.backdropFilter != 'none')\n    return true;\n\n  return false;\n}\n\nfunction isAbsoluteElementContainer(element) {\n  const style = getComputedStyle(element);\n  if (style.position != 'static')\n    return true;\n\n  return isFixedElementContainer(element);\n}\n\nfunction getContainingBlock(element) {\n  switch (getComputedStyle(element).position) {\n    case 'static':\n    case 'relative':\n    case 'sticky':\n      return findClosestAncestor(element, isBlockContainer);\n\n    case 'absolute':\n       return findClosestAncestor(element, isAbsoluteElementContainer);\n\n    case 'fixed':\n      return findClosestAncestor(element, isFixedElementContainer);\n  }\n}\n\nfunction getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  while (node = getContainingBlock(node)) {\n    const style = getComputedStyle(node);\n    switch(style['overflow-x']) {\n      case 'auto':\n      case 'scroll':\n      case 'hidden':\n        // https://drafts.csswg.org/css-overflow-3/#overflow-propagation\n        // The UA must apply the overflow from the root element to the viewport;\n        // however, if the overflow is visible in both axis, then the overflow\n        // of the first visible child body is applied instead.\n        if (node == document.body &&\n            getComputedStyle(document.scrollingElement).overflow == \"visible\")\n          return  document.scrollingElement;\n\n        return node;\n    }\n  }\n  return document.scrollingElement;\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\n// TODO: Track changes to determine when associated animations require their\n// timing to be renormalized.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline))\n    return unresolved;\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  let top = 0;\n  let left = 0;\n  let node = target;\n  const ancestor = container.offsetParent;\n  while (node && node != ancestor) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n  left -= container.offsetLeft + container.clientLeft;\n  top -= container.offsetTop + container.clientTop;\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl' || style.writingMode == 'vertical-rl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  const orientation = details.orientation;\n  if (orientation == 'horizontal' ||\n      (orientation == 'inline' && horizontalWritingMode) ||\n      (orientation == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const scrollPos = directionAwareScrollOffset(container, orientation);\n  let startOffset = undefined;\n  let endOffset = undefined;\n\n  // Cover:\n  // 0% progress represents the position at which the start border edge of the\n  // element’s principal box coincides with the end edge of its view progress\n  // visibility range.\n  // 100% progress represents the position at which the end border edge of the\n  // element’s principal box coincides with the start edge of its view progress\n  // visibility range.\n  const coverStart = viewPos - containerSize;\n  const coverEnd = viewPos + viewSize;\n\n  // Contain:\n  // The 0% progress represents the earlier of the following positions:\n  // 1. The start border edge of the element’s principal box coincides with\n  //    the start edge of its view progress visibility range.\n  // 2. The end border edge of the element’s principal box coincides with\n  //    the end edge of its view progress visibility range.\n  // The 100% progress represents the greater of the following positions:\n  // 1. The start border edge of the element’s principal box coincides with\n  //  the start edge of its view progress visibility range.\n  // 2. The end border edge of the element’s principal box coincides with\n  //    the end edge of its view progress visibility range.\n  const contain1 = viewPos + viewSize - containerSize;;\n  const contain2 =  viewPos;\n  const containStart = Math.min(contain1, contain2);\n  const containEnd = Math.max(contain1, contain2);\n\n  switch(phase) {\n    case 'cover':\n      // Range of scroll offsets where the subject element intersects the\n      // source's viewport.\n      startOffset = coverStart;\n      endOffset = coverEnd;\n      break;\n\n    case 'contain':\n      // Range of scroll offsets where the subject element is fully inside of\n      // the container's viewport.\n      startOffset = containStart;\n      endOffset = containEnd;\n      break;\n\n    case 'enter':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-start edge of the viewport.\n      startOffset = coverStart;\n      endOffset = containStart;\n      break;\n\n    case 'exit':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-end edge of the viewport.\n      startOffset = containEnd;\n      endOffset = coverEnd;\n      break;\n  }\n\n  // TODO: Revisit once the clamping issue is resolved.\n  // see github.com/w3c/csswg-drafts/issues/7432.\n\n  return { start: startOffset, end: endOffset };\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  if (!phaseRange || !coverRange)\n    return 0;\n\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/rewrite#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n    if (options.axis) {\n      // Orientation called axis for a view timeline. Internally we can still\n      // call this orientation, since the internal naming is not exposed.\n      options.orientation = options.axis;\n    }\n    super(options);\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n\n    validateSource(this);\n    updateInternal(this);\n  }\n\n  get source() {\n    validateSource(this);\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set source(source) {\n    throw new Error(\"Cannot set the source of a view timeline\");\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The orientation is called \"axis\" for a view timeline.\n  // Internally we still call it orientation.\n  get axis() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const scrollPos = directionAwareScrollOffset(this.source, this.orientation);\n    if (scrollPos == unresolved)\n      return unresolved;\n\n    const offsets = range(this, 'cover');\n    if (!offsets)\n      return unresolved;\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nconst ANIMATION_DELAY_NAMES = ['enter', 'exit', 'cover', 'contain'];\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime == null)\n      return;\n\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(details,\n                         (timelineTimeMs - details.startTime) *\n                             details.animation.playbackRate);\n  } else if (details.holdTime !== null) {\n    setNativeCurrentTime(details, details.holdTime);\n  }\n}\n\n// Sets the time of the underlying animation, nudging the time slightly if at\n// a scroll-timeline boundary to remain in the active phase.\nfunction setNativeCurrentTime(details, time) {\n  const timeline = details.timeline;\n  const playbackRate = details.animation.playbackRate;\n  const atScrollTimelineBoundary =\n      timeline.currentTime &&\n      timeline.currentTime.value == (playbackRate < 0 ? 0 : 100);\n  const delta =\n      atScrollTimelineBoundary ? (playbackRate < 0 ? 0.001 : -0.001) : 0;\n\n  details.animation.currentTime = time + delta;\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0;\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(\n        details,\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate);\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          if (timing.duration < 0)\n            timing.duration = 0;\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime = details.timeRange.start;\n  return relativePosition(details.timeline, startTime.name, startTime.offset);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime = details.timeRange.end;\n  return 1 - relativePosition(details.timeline, endTime.name, endTime.offset);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline, animOptions={}) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline. The default range is cover 0% to\n      // 100%.\n      timeRange: timeline instanceof ViewTimeline ? parseAnimationDelays(animOptions) : null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\n// animation-delay or animation-end-delay should be in the form of a name and an optional percentage\nfunction parseOneAnimationDelay(delay, defaultOffset) {\n  if(!delay) return null;\n\n  const parts = delay.split(' ');\n\n  if(!ANIMATION_DELAY_NAMES.includes(parts[0]) ||\n    (parts.length == 2 && !parts[1].endsWith('%')))\n    throw TypeError(\"Invalid animation delay\");\n\n  let offset = defaultOffset;\n  if(parts.length == 2) {\n    const percentage = parseFloat(parts[1]);\n    if(Number.isNaN(percentage))\n      throw TypeError(`\\\"${parts[1]}\\\" is not a valid percentage for animation delay`);\n\n    offset = CSS.percent(percentage);\n  }\n\n  return { name: parts[0], offset: offset };\n}\n\nfunction defaultAnimationDelay() { return { name: 'cover', offset: CSS.percent(0) }; }\n\nfunction defaultAnimationEndDelay() { return { name: 'cover', offset: CSS.percent(100) }; }\n\nfunction parseAnimationDelays(animOptions) {\n  const timeRange = parseTimeRange(animOptions['animation-time-range']);\n\n  if(animOptions['animation-delay'])\n    timeRange.start = parseOneAnimationDelay(animOptions['animation-delay'], defaultAnimationDelay().offset);\n\n  if(animOptions['animation-end-delay'])\n    timeRange.end = parseOneAnimationDelay(animOptions['animation-end-delay'], defaultAnimationEndDelay().offset);\n\n  return timeRange;\n}\n\nfunction parseTimeRange(value) {\n  const timeRange = {\n    start: defaultAnimationDelay(),\n    end: defaultAnimationEndDelay()\n  };\n\n  if (!value)\n    return timeRange;\n\n  // Format:\n  // <start-name> <start-offset> <end-name> <end-offset>\n  // <name> --> <name> 0% <name> 100%\n  // <name> <start-offset> <end-offset> --> <name> <start-offset>\n  //                                        <name> <end-offset>\n  // <start-offset> <end-offset> --> cover <start-offset> cover <end-offset>\n  // TODO: Support all formatting options once ratified in the spec.\n  const parts = value.split(' ');\n  const names = [];\n  const offsets = [];\n\n  parts.forEach(part => {\n    if (part.endsWith('%'))\n      offsets.push(parseFloat(part));\n    else\n      names.push(part);\n  });\n\n  if (names.length > 2 || offsets.length > 2 || offsets.length == 1) {\n    throw TypeError(\"Invalid time range\");\n  }\n\n  if (names.length) {\n    timeRange.start.name = names[0];\n    timeRange.end.name = names.length > 1 ? names[1] : names[0];\n  }\n\n  if (offsets.length > 1) {\n    timeRange.start.offset = CSS.percent(offsets[0]);\n    timeRange.end.offset = CSS.percent(offsets[1]);\n  }\n\n  return timeRange;\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const timelineOffset = (options, property) => {\n     if (property in options) {\n        const value = options[property];\n        if (typeof value != 'number') {\n          delete options[property];\n          return value;\n        }\n        return null;\n     }\n  };\n\n  const updateDelay = (timelineOffset, value) => {\n    if (!value)\n      return;\n\n    // TODO(kevers): Update property names once ratified.\n    // https://github.com/w3c/csswg-drafts/issues/7589\n    if (value.phase)\n      timelineOffset.name = value.phase;\n\n    if (value.percent)\n      timelineOffset.offset = value.percent;\n  };\n\n  const delayTimelineOffset = timelineOffset(options, 'delay');\n  const endDelayTimelineOffset = timelineOffset(options, 'endDelay');\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      const details = proxyAnimations.get(proxyAnimation);\n      details.timeRange = parseTimeRange(options.timeRange);\n      updateDelay(details.timeRange.start, delayTimelineOffset);\n      updateDelay(details.timeRange.end, endDelayTimelineOffset);\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  VIEW_TIMELINE: /view-timeline\\s*:([^;}]+)/,\n  VIEW_TIMELINE_NAME: /view-timeline-name\\s*:([^;}]+)/,\n  VIEW_TIMELINE_AXIS: /view-timeline-axis\\s*:([^;}]+)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_DELAY: /animation-delay\\s*:([^;}]+)/,\n  ANIMATION_END_DELAY: /animation-end-delay\\s*:([^;}]+)/,\n  ANIMATION_TIME_RANGE: /animation-time-range\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  SOURCE_ELEMENT: /selector\\(#([^)]+)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\nconst VIEW_TIMELINE_AXIS_TYPES = ['block', 'inline',  'vertical', 'horizontal'];\n\n// 1 - Extracts @scroll-timeline and saves it in scrollTimelineOptions.\n// 2 - If we find any animation-timeline in any of the CSS Rules, \n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.scrollTimelineOptions = new Map(); // save options by name\n    this.subjectSelectorToViewTimeline = [];\n    this.keyframeNames = new Set();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // @scroll-timeline and @keyframe names, in the second pass\n  // we will parse other rules\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      if (this.lookAhead(\"@scroll-timeline\", p)) {\n        const { scrollTimeline, startIndex, endIndex } = this.parseScrollTimeline(p);\n        if (firstPass) this.scrollTimelineOptions.set(scrollTimeline.name, scrollTimeline);\n      } else {\n        const rule = this.parseQualifiedRule(p);\n        if (!rule) continue;\n        if (firstPass) {\n          this.extractAndSaveKeyframeName(rule.selector);\n        } else {\n          this.handleScrollTimelineProps(rule, p);\n        }\n      }\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getAnimationTimelineOptions(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return {\n            'animation-timeline': current['animation-timeline'],\n            'animation-delay': current['animation-delay'],\n            'animation-end-delay': current['animation-end-delay'],\n            'animation-time-range': current['animation-time-range']\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  // This implementation is based on https://drafts.csswg.org/scroll-animations-1/\n  // TODO: Should update accordingly when new spec lands.\n  getSourceElement(source) {\n    const matches = RegexMatcher.SOURCE_ELEMENT.exec(source);\n    const SOURCE_CAPTURE_INDEX = 1;\n    if (matches)\n      return document.getElementById(matches[SOURCE_CAPTURE_INDEX]);\n    else if (source === \"auto\")\n      return document.scrollingElement;\n    else\n      return null;\n  }\n\n  getScrollTimelineOptions(timelineName) {\n    const options = this.scrollTimelineOptions.get(timelineName);\n\n    if(options?.source) {\n      const sourceElement = this.getSourceElement(options.source);\n      return {\n        ...(sourceElement ? { source: sourceElement } : {}),\n        ...(options.orientation != \"auto\" ? { orientation: options.orientation } : {}),\n      };\n    }\n\n    return null;\n  }\n\n  getViewTimelineOptions(timelineName) {\n    // TODO: Take into account the scoping of the ViewTimelines\n    // https://github.com/w3c/csswg-drafts/issues/7047\n    for (let i = this.subjectSelectorToViewTimeline.length - 1; i >= 0; i--) {\n      const options = this.subjectSelectorToViewTimeline[i];\n      if(options.name == timelineName) {\n        const allSubjects = document.querySelectorAll(options.selector);\n        if(allSubjects.length) {\n          return {\n            subject: allSubjects[allSubjects.length - 1],\n            axis: options.axis,\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseScrollTimeline(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"@scroll-timeline\");\n    this.eatWhitespace(p);\n    let name = this.parseIdentifier(p);\n    this.eatWhitespace(p);\n    this.assertString(p, \"{\"); // eats {\n    this.eatWhitespace(p);\n\n    let scrollTimeline = {\n      name: name,\n      source: \"auto\",\n      orientation: undefined,\n    };\n\n    while (this.peek(p) !== \"}\") {\n      const property = this.parseIdentifier(p);\n      this.eatWhitespace(p);\n      this.assertString(p, \":\");\n      this.eatWhitespace(p);\n      scrollTimeline[property] = this.removeEnclosingDoubleQuotes(this.eatUntil(\";\", p));\n      this.assertString(p, \";\");\n      this.eatWhitespace(p);\n    }\n\n    this.assertString(p, \"}\");\n    const endIndex = p.index;\n    this.eatWhitespace(p);\n    return {\n      scrollTimeline,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    this.saveSubjectSelectorToViewTimeline(rule);\n\n    let timelineNames = [];\n    let animationNames = [];\n\n    if (hasAnimationTimeline)\n      timelineNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIMELINE);\n\n    if (hasAnimationName)\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n          const timelineName = this.extractTimelineName(shorthand);\n          if (animationName) animationNames.push(animationName);\n          if (timelineName) {\n            timelineNames.push(timelineName);\n            // Remove timeline name from animation shorthand\n            // so the native implementation works with the rest of the properties\n            // Retain length of original name though, to play nice with multiple\n            // animations that might have been applied\n            rule.block.contents = rule.block.contents.replace(\n              timelineName,\n              \" \".repeat(timelineName.length)\n            );\n            this.replacePart(\n              rule.block.startIndex,\n              rule.block.endIndex,\n              rule.block.contents,\n              p\n            );\n          }\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(timelineName || hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                \"animation:\",\n                \"animation: 1s \"\n              );\n              this.replacePart(\n                rule.block.startIndex,\n                rule.block.endIndex,\n                rule.block.contents,\n                p\n              );\n            }\n          }\n        });\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  saveSubjectSelectorToViewTimeline(rule) {\n    const hasViewTimeline = rule.block.contents.includes(\"view-timeline:\");\n    const hasViewTimelineName = rule.block.contents.includes(\"view-timeline-name:\");\n    const hasViewTimelineAxis = rule.block.contents.includes(\"view-timeline-axis:\");\n\n    if(!hasViewTimeline && !hasViewTimelineName) return;\n\n    let viewTimeline = {selector: rule.selector, name: '', axis: 'block'};\n\n    if(hasViewTimeline) {\n      const parts = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE, separator=' ');\n      if(parts.length == 1) {\n        viewTimeline.name = parts[0];\n      } else if(parts.length == 2) {\n        if(VIEW_TIMELINE_AXIS_TYPES.includes(parts[0]))\n          viewTimeline.axis = parts[0], viewTimeline.name = parts[1];\n        else\n          viewTimeline.axis = parts[1], viewTimeline.name = parts[0];\n      }\n    }\n\n    if(hasViewTimelineName) {\n      const parts = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE_NAME);\n      viewTimeline.name = parts[0];\n    }\n\n    if(hasViewTimelineAxis) {\n      const parts = this.extractMatches(rule.block.contents, RegexMatcher.VIEW_TIMELINE_AXIS);\n      if(VIEW_TIMELINE_AXIS_TYPES.includes(parts[0]))\n        viewTimeline.axis = parts[0];\n    }\n\n    this.subjectSelectorToViewTimeline.push(viewTimeline);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    const hasAnimationDelay = rule.block.contents.includes(\"animation-delay:\");\n    const hasAnimationEndDelay = rule.block.contents.includes(\"animation-end-delay:\");\n    const hasAnimationTimeRange = rule.block.contents.includes(\"animation-time-range:\");\n\n    let animationDelays = [];\n    let animationEndDelays = [];\n    let animationTimeRanges = [];\n\n    if (hasAnimationDelay)\n      animationDelays = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_DELAY);\n\n    if (hasAnimationEndDelay)\n      animationEndDelays = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_END_DELAY);\n\n    if (hasAnimationTimeRange)\n      animationTimeRanges = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIME_RANGE);\n\n    const maxLength = Math.max(timelineNames.length, animationNames.length,\n      animationDelays.length, animationEndDelays.length, animationTimeRanges.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      this.cssRulesWithTimelineName.push({\n        selector: rule.selector,\n        'animation-timeline': timelineNames[i % timelineNames.length],\n        ...(animationNames.length ? {'animation-name': animationNames[i % animationNames.length]}: {}),\n        ...(animationDelays.length ? {'animation-delay': animationDelays[i % animationDelays.length]}: {}),\n        ...(animationEndDelays.length ? {'animation-end-delay': animationEndDelays[i % animationEndDelays.length]}: {}),\n        ...(animationTimeRanges.length ? {'animation-time-range': animationTimeRanges[i % animationTimeRanges.length]}: {}),\n      });\n    }\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNames);\n  }\n\n  extractTimelineName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.scrollTimelineOptions);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  /**\n   * @param {String} selector contains everything upto '{', eg: \"@keyframes expand\"\n   */\n  extractAndSaveKeyframeName(selector) {\n    if (selector.startsWith(\"@keyframes\")) {\n      selector.split(\" \").forEach((item, index) => {\n        if (index > 0) {\n          this.keyframeNames.add(item);\n        }\n      })\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  eatUntil(s, p) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher, separator=',') {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(separator).map(item => item.trim());\n  }\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser, RegexMatcher } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\nimport { ScrollTimeline, ViewTimeline } from \"./scroll-timeline-base\";\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\nfunction isDescendant(child, parent) {\n  while (child) {\n    if (child == parent) return true;\n    child = child.parentNode;\n  }\n  return false;\n}\n\nfunction createScrollTimeline(animationName, target) {\n  const animOptions = parser.getAnimationTimelineOptions(animationName, target);\n  const timelineName = animOptions['animation-timeline'];\n  if(!timelineName) return null;\n\n  let options = parser.getScrollTimelineOptions(timelineName) ||\n    parser.getViewTimelineOptions(timelineName);\n  if (!options) return null;\n\n  return {\n    timeline: options.source ? new ScrollTimeline(options) : new ViewTimeline(options),\n    animOptions: animOptions\n  };\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: works\")) {\n    return;\n  }\n\n  initMutationObserver();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      const result = createScrollTimeline(anim.animationName, evt.target);\n      if (result.timeline && anim.timeline != result.timeline) {\n        const proxyAnimation = new ProxyAnimation(anim, result.timeline, result.animOptions);\n        anim.pause();\n        proxyAnimation.play();\n      }\n    });\n  });\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\ninitCSSPolyfill();\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\nif (\n  !Reflect.defineProperty(window, \"ViewTimeline\", { value: ViewTimeline })\n) {\n  throw Error(\n    \"Error installing ViewTimeline polyfill: could not attach ViewTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","CSSUnitValue","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","CSSMathSum","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","scrollTimelineOptions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","validateSource","animations","timelineTime","currentTime","tickAnimation","directionAwareScrollOffset","orientation","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","timeline","ViewTimeline","node","subject","display","getContainingBlock","body","overflow","getScrollParent","updateSource","oldSource","oldScrollListener","scrollListener","removeEventListener","listener","addEventListener","removeAnimation","scrollTimeline","animation","splice","addAnimation","push","ScrollTimeline","options","undefined","element","indexOf","TypeError","percent","container","scrollerStyle","phase","scrollPos","maxScrollPos","scrollHeight","clientHeight","scrollWidth","clientWidth","calculateMaxScrollOffset","findClosestAncestor","matcher","candidate","parentElement","isBlockContainer","isFixedElementContainer","style","transform","perspective","willChange","filter","backdropFilter","isAbsoluteElementContainer","position","range","target","top","left","ancestor","offsetParent","offsetLeft","offsetTop","clientLeft","clientTop","viewSize","viewPos","containerSize","direction","startOffset","endOffset","coverStart","coverEnd","contain1","contain2","containStart","min","containEnd","max","start","end","relativePosition","phaseRange","coverRange","_ScrollTimeline","_this","axis","_assertThisInitialized","unresolved","offsets","nativeElementAnimate","Element","animate","nativeAnimation","Animation","ANIMATION_DELAY_NAMES","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","effect","getTiming","normalizedTiming","delay","endDelay","iterations","setNativeCurrentTime","time","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animOptions","animationTimeline","isScrollAnimation","specifiedTiming","timeRange","parseAnimationDelays","finish","_proto2","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","callback","event","nativeUpdateTiming","updateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","assign","computedDelays","offset","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","obj","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","progress","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","parseOneAnimationDelay","defaultOffset","parts","split","includes","endsWith","percentage","parseFloat","Number","isNaN","defaultAnimationDelay","defaultAnimationEndDelay","parseTimeRange","names","part","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","VIEW_TIMELINE","VIEW_TIMELINE_NAME","VIEW_TIMELINE_AXIS","ANIMATION_TIMELINE","ANIMATION_DELAY","ANIMATION_END_DELAY","ANIMATION_TIME_RANGE","ANIMATION_NAME","ANIMATION","SOURCE_ELEMENT","VIEW_TIMELINE_AXIS_TYPES","parser","StyleParser","cssRulesWithTimelineName","Map","subjectSelectorToViewTimeline","keyframeNames","Set","_proto","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","parseScrollTimeline","rule","parseQualifiedRule","extractAndSaveKeyframeName","selector","handleScrollTimelineProps","getAnimationTimelineOptions","animationName","current","matches","getSourceElement","exec","getElementById","getScrollTimelineOptions","timelineName","sourceElement","getViewTimelineOptions","allSubjects","querySelectorAll","startIndex","assertString","parseIdentifier","peek","property","removeEnclosingDoubleQuotes","eatUntil","endIndex","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","saveSubjectSelectorToViewTimeline","timelineNames","animationNames","extractMatches","shorthand","extractAnimationName","extractTimelineName","replace","repeat","replacePart","hasDuration","saveRelationInList","hasViewTimeline","hasViewTimelineName","hasViewTimelineAxis","viewTimeline","separator","hasAnimationDelay","hasAnimationEndDelay","hasAnimationTimeRange","animationDelays","animationEndDelays","animationTimeRanges","maxLength","_extends","findMatchingEntryInContainer","has","lastIndex","match","parseError","startsWith","item","_this2","add","parseSelector","trim","eatBlock","s","substring","substr","replacement","slice","level","advance","map","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","_step","_iterator","_createForOfIteratorHelperLoose","done","_step2","_iterator2","addedNodes","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","tag","initMutationObserver","evt","getAnimations","anim","createScrollTimeline","proxyAnimation","keyframes","timelineOffset","updateDelay","delayTimelineOffset","endDelayTimelineOffset"],"mappings":"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"}