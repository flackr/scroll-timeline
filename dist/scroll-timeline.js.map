{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/intersection-based-offset.js","../src/index.js"],"sourcesContent":["export function parseLength(obj, acceptStr) {\n  if (obj instanceof CSSUnitValue || obj instanceof CSSMathSum)\n    return obj;\n  if (!acceptStr)\n    return null;\n  let matches = obj.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if (matches) {\n    let value = matches[1];\n    // The unit for % is percent.\n    let unit = matches[2] == '%' ? 'percent' : matches[2];\n    return new CSSUnitValue(value, unit);\n  }\n  return null;\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(scrollSource) {\n  if (scrollSource === document.scrollingElement) return document;\n  return scrollSource;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  let animations = scrollTimelineOptions.get(scrollTimelineInstance).animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates the number of milliseconds mapped to the scroll range in case of AUTO\n *  in case developer provided timeRange, we use that directly.\n * @param scrollTimeline {ScrollTimeline}\n * @returns {Number}\n */\nfunction calculateTimeRange(scrollTimeline) {\n  let timeRange = scrollTimeline.timeRange;\n  if (timeRange == AUTO) {\n    timeRange = 0;\n    let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n    for (let i = 0; i < animations.length; i++) {\n      timeRange = Math.max(timeRange,\n                           calculateTargetEffectEnd(animations[i].animation));\n    }\n    if (timeRange === Infinity) timeRange = 0;\n  }\n  return timeRange;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Enables the usage of custom parser and evaluator function, utilized by intersection based offset.\n * @param parseFunction {Function}\n * @param evaluateFunction {Function}\n * @returns {Array} all currently installed parsers\n */\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction,\n  });\n  return extensionScrollOffsetFunctions;\n}\n\n/**\n * Calculates scroll offset based on orientation and scrollSource geometry\n * @param scrollSource {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(scrollSource, orientation) {\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n  if (orientation === \"vertical\")\n    return scrollSource.scrollHeight - scrollSource.clientHeight;\n  else if (orientation === \"horizontal\")\n    return scrollSource.scrollWidth - scrollSource.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\nexport function calculateScrollOffset(\n  autoValue,\n  scrollSource,\n  orientation,\n  offset,\n  fn\n) {\n  if (fn)\n    return fn(\n      scrollSource,\n      orientation,\n      offset,\n      autoValue.value == 0 ? \"start\" : \"end\"\n    );\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n\n  let maxValue =\n    orientation === \"vertical\"\n      ? scrollSource.scrollHeight - scrollSource.clientHeight\n      : scrollSource.scrollWidth - scrollSource.clientWidth;\n  let parsed = parseLength(offset === AUTO ? autoValue : offset);\n  return resolvePx(parsed, maxValue);\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      scrollSource: null,\n      orientation: \"block\",\n      startScrollOffset: AUTO,\n      endScrollOffset: AUTO,\n      scrollOffsets: [],\n      timeRange: AUTO,\n\n      // Internal members\n      animations: [],\n      scrollOffsetFns: [],\n    });\n    this.scrollSource =\n      options && options.scrollSource !== undefined ? options.scrollSource : document.scrollingElement;\n    this.orientation = (options && options.orientation) || \"block\";\n    this.startScrollOffset = (options && options.startScrollOffset) || AUTO;\n    this.endScrollOffset = (options && options.endScrollOffset) || AUTO;\n    this.scrollOffsets = options && options.scrollOffsets !== undefined ? options.scrollOffsets : [];\n    this.timeRange = options && options.timeRange !== undefined ? options.timeRange : \"auto\";\n  }\n\n  set scrollSource(element) {\n    if (this.scrollSource)\n      scrollEventSource(this.scrollSource).removeEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    scrollTimelineOptions.get(this).scrollSource = element;\n    if (element) {\n      scrollEventSource(element).addEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    }\n    updateInternal(this);\n  }\n\n  get scrollSource() {\n    return scrollTimelineOptions.get(this).scrollSource;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set scrollOffsets(value) {\n    let offsets = [];\n    let fns = [];\n    for (let input of value) {\n      let fn = null;\n      let offset = undefined;\n      if (input == \"auto\")\n        input = AUTO;\n      for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n        let result = extensionScrollOffsetFunctions[i].parse(input);\n        if (result !== undefined) {\n          offset = result;\n          fn = extensionScrollOffsetFunctions[i].evaluate;\n          break;\n        }\n      }\n      if (!fn) {\n        if (input != AUTO) {\n          let parsed = parseLength(input);\n          // TODO: This should check CSSMathSum values as well.\n          if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n            throw TypeError(\"Invalid scrollOffsets entry.\");\n        }\n        offset = input;\n      }\n      offsets.push(offset);\n      fns.push(fn);\n    }\n    if (offsets.length == 1 && offsets[0] == AUTO)\n      throw TypeError(\"Invalid scrollOffsets value.\");\n    let data = scrollTimelineOptions.get(this);\n    data.scrollOffsets = offsets;\n    data.scrollOffsetFns = fns;\n  }\n\n  get scrollOffsets() {\n    let data = scrollTimelineOptions.get(this);\n    return data.scrollOffsets;\n  }\n\n  set startScrollOffset(offset) {\n    if (offset == \"auto\")\n      offset = AUTO;\n    let currentStlOptions = scrollTimelineOptions.get(this);\n    // Allow extensions to override scroll offset calculation.\n    currentStlOptions.startScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        currentStlOptions.startScrollOffsetFunction =\n          extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    if (offset != AUTO && !scrollTimelineOptions.get(this).startScrollOffsetFunction) {\n      let parsed = parseLength(offset);\n      // TODO: This should check CSSMathSum values as well.\n      if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n        throw TypeError(\"Invalid start offset.\");\n    }\n    currentStlOptions.startScrollOffset = offset;\n    updateInternal(this);\n  }\n\n  get startScrollOffset() {\n    return scrollTimelineOptions.get(this).startScrollOffset;\n  }\n\n  set endScrollOffset(offset) {\n    if (offset == \"auto\")\n      offset = AUTO;\n    // Allow extensions to override scroll offset calculation.\n    scrollTimelineOptions.get(this).endScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        scrollTimelineOptions.get(this).endScrollOffsetFunction =\n          extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    if (offset != AUTO && !scrollTimelineOptions.get(this).startScrollOffsetFunction) {\n      let parsed = parseLength(offset);\n      // TODO: This should check CSSMathSum values as well.\n      if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n        throw TypeError(\"Invalid end offset.\");\n    }\n    scrollTimelineOptions.get(this).endScrollOffset = offset;\n    updateInternal(this);\n  }\n\n  get endScrollOffset() {\n    return scrollTimelineOptions.get(this).endScrollOffset;\n  }\n\n  set timeRange(range) {\n    if (range != \"auto\") {\n      // Check for a valid number, which if finite and not NaN.\n      if (typeof(range) != \"number\" || !Number.isFinite(range) || range != range)\n        throw TypeError(\"Invalid timeRange value\");\n    }\n    scrollTimelineOptions.get(this).timeRange = range;\n    updateInternal(this);\n  }\n\n  get timeRange() {\n    return scrollTimelineOptions.get(this).timeRange;\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    let unresolved = null;\n    //   if source is null\n    if (!this.scrollSource) return \"inactive\";\n    let scrollerStyle = getComputedStyle(this.scrollSource);\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n    //   if source's layout box is not a scroll container\"\n    if (scrollerStyle.overflow == \"visible\" || scrollerStyle.overflow == \"clip\")\n      return \"inactive\";\n    let startOffset = calculateScrollOffset(\n      new CSSUnitValue(0, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.startScrollOffset,\n      scrollTimelineOptions.get(this).startScrollOffsetFunction\n    );\n    let endOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.endScrollOffset,\n      scrollTimelineOptions.get(this).endScrollOffsetFunction\n    );\n    let maxOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      new CSSUnitValue(100, 'percent'),\n      null\n    );\n    //   if source's effective scroll range is null\n    if (startOffset === null || endOffset === null)\n      return \"inactive\";\n\n    // Step 2\n    // TODO: Support other writing directions.\n    let currentScrollOffset = this.scrollSource.scrollTop\n    if (this.orientation === 'inline' || this.orientation === 'horizontal') {\n      currentScrollOffset = this.scrollSource.scrollLeft\n    }\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return \"before\";\n    if (currentScrollOffset >= endOffset && endOffset < maxOffset)\n      return \"after\";\n    return \"active\"\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.scrollSource) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    let startOffset = calculateScrollOffset(\n      new CSSUnitValue(0, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.startScrollOffset,\n      scrollTimelineOptions.get(this).startScrollOffsetFunction\n    );\n    let endOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.scrollSource,\n      this.orientation,\n      this.endScrollOffset,\n      scrollTimelineOptions.get(this).endScrollOffsetFunction\n    );\n    let timeRange = calculateTimeRange(this);\n\n    // Step 2\n    // TODO: Support other writing directions.\n    let currentScrollOffset = this.scrollSource.scrollTop\n    if (this.orientation === 'inline' || this.orientation === 'horizontal') {\n      currentScrollOffset = this.scrollSource.scrollLeft\n    }\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return 0;\n\n    // Step 4\n    if (currentScrollOffset >= endOffset)\n      return timeRange;\n\n    // Step 5\n    return (\n      ((currentScrollOffset - startOffset) / (endOffset - startOffset)) *\n      timeRange\n    );\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n","import {\n  ScrollTimeline,\n  installScrollOffsetExtension,\n  addAnimation,\n  removeAnimation\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\n\n/**\n * Creates a ready promise with a pending task, to be executed at the time\n * the promise is resolved. The promise will auto-resolve in the next animation\n * frame, but may be resolved or rejected earlier as a result of API calls that\n * change the state of the animation. The state of the promise\n * (pending|resolved|rejected) may be queried to determine when a replacement\n * promise is needed.\n * @param details {Ojbect}\n * @param task {function}\n */\nfunction createReadyPromise(details) {\n  let nativeResolve = undefined;\n  let nativeReject = undefined;\n  let pendingTask = undefined;\n  let pendingTaskName = undefined;\n  let state = 'pending';\n  const p = new Promise((resolve, reject) => {\n    nativeResolve = resolve;\n    nativeReject = reject;\n  });\n\n  p.resolve = () => {\n    state = 'resolved';\n    pendingTask = null;\n    pendingTaskName = null;\n    nativeResolve(details.proxy);\n  }\n  p.reject = () => {\n    state = 'rejected';\n    pendingTask = null;\n    pendingTaskName = null;\n    nativeReject(new DOMException(\"The user aborted a request\", \"AbortError\"));\n  }\n  p.cancelTask = () => {\n    pendingTask = null;\n  }\n  p.queueTask = (task, name) => {\n    pendingTask = task;\n    pendingTaskName = name;\n  }\n  p.state = () => {\n    return state;\n  }\n  p.taskName = () => {\n    return pendingTaskName;\n  }\n\n  const runOrRequeueTask = () => {\n    if (!pendingTask)\n      return;\n\n    if (details.timeline.currentTime !== null) {\n      pendingTask();\n      pendingTask = null;\n      return;\n    }\n    requestAnimationFrame(runOrRequeueTask);\n  }\n\n  // Run the pending task in the next animation frame. The task is responsible\n  // for resolving the promise. The pending task will not run while the timeline\n  // is inactive.\n  requestAnimationFrame(runOrRequeueTask);\n\n  details.readyPromise = p;\n  return p;\n}\n\nfunction pendingPlay(details) {\n  if (!details.readyPromise)\n    return false;\n  return details.readyPromise.taskName() == 'play';\n}\n\nfunction pendingPause(details) {\n  if (!details.readyPromise)\n    return false;\n  return details.readyPromise.taskName() == 'pause';\n}\n\n/**\n * Creates a finished promise that can be synchronously resolved or scheduled to\n * resolve on the next animation frame after entering the finished state.\n */\nfunction createFinishedPromise(details) {\n  let nativeResolve = undefined;\n  let nativeReject = undefined;\n  let state = 'pending';\n  const p = new Promise((resolve, reject) => {\n    nativeResolve = resolve;\n    nativeReject = reject;\n  });\n  p.resolve = () => {\n    state = 'resolved';\n    nativeResolve(details.proxy);\n  }\n  p.reject = () => {\n    state = 'rejected';\n    nativeReject(new DOMException(\"The user aborted a request\", \"AbortError\"));\n  }\n  p.ScheduleAsyncFinish = () => {\n    requestAnimationFrame(() => {\n      // Ensure that we are still in the finished state as it may have been a\n      // temporary state.\n      if (details.proxy.playState == 'finished' && state == 'pending') {\n         p.resolve();\n         details.animation.finish();\n      }\n    });\n  };\n  details.finishedPromise = p;\n  return p;\n}\n\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = details.timeline.curentTime;\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  return (timelineTime - details.startTime) * details.animation.playbackRate;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = details.timeline.currentTime;\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  const unconstrainedCurrentTime =\n      didSeek ? details.proxy.currentTime : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const effectEnd = details.animation.effect.getTiming().duration;\n    let boundary = details.previousCurrentTime;\n    // TODO: Support hold phase.\n    if (playbackRate > 0 && unconstrainedCurrentTime >= effectEnd) {\n      if (boundary === null || boundary < effectEnd)\n        boundary = effectEnd;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = details.animation.currentTime;\n\n  // 4. Set the current finished state.\n  const playState = this.playState;\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      createFinishedPromise(details);\n\n    if (details.finishedPromise.state() == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        details.resolve();\n        details.animation.finish();\n      } else {\n        details.finishdPromise.ScheduleAsyncFinish();\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state() == 'resolved') {\n      details.finsihedPromise = null;\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = details.timeline.currentTime;\n    details.animation.currentTime =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n  } else if (details.holdTime !== null) {\n    details.animation.currentTime = details.holdTime;\n  }\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.readyPromise || !details.readyPromise.state() == 'pending')\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.readyPromise.cancelTask();\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject();\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  details.readyPromise = null;\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (this.playState == 'running') {\n    details.animation.currentTime =\n        (timelineTime - this.startTime) * this.playbackRate;\n    updateFinishedState(details, false, false);\n  }\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      proxy: this,\n      sequence: 0, /* Used to track ready promises. */\n      aborted: new Set(), /* Aborted sequences. */\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    return proxyAnimations.get(this).animation.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    const details = proxyAnimations.get(this);\n\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n    const previousCurrentTime = this.currentTime;\n    const previousPlayState = this.playState;\n    const playbackRate = effectivePlaybackRate(details);\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    details.resetCurrentTimeOnResume = false;\n    if (toScrollTimeline) {\n      details.timeline = newTimeline;\n      applyPendingPlaybackRate(details);\n      details.animation.pause();\n      switch(previousPlayState) {\n        case 'idle':\n          details.holdTime = null;\n          details.startTime = null;\n          break;\n\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.animation.currentTime = previousCurrentTime;\n          removeAnimation(details.timeline, details.animation);\n          break;\n\n        case 'running':\n        case 'finished':\n          details.startTime =\n              playbackRate < 0 ? details.animation.effect.getTiming().duration\n                               : 0;\n          details.holdTime =\n              previousPlayState == 'finished' ? previousCurrentTime : null;\n          addAnimation(details.timeline, details.animation,\n              tickAnimation.bind(this));\n          break;\n      }\n      if (pending)\n        createReadyPromise(details); // TODO: Need to queue up a task.\n      return;\n    }\n\n    if (details.animation.timeline == newTimeline) {\n      if (fromScrollTimeline) {\n        details.timeline = null;\n        details.animation.currentTime = previousCurrentTime;\n        switch (details.playbackRate) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeilne: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return details.startTime;\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // TODO: handle hold phase.\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime === null && value !== null)\n      details.holdTime = null;\n\n    const previousCurrentTime = this.currentTime;\n    applyPendingPlaybackRate(details);\n    details.startTime = value;\n    details.resetCurrentTimeOnResume = false;\n    details.readyPromise = null;\n\n    if (value === null) {\n      details.holdTime = previousCurrentTime;\n    } else {\n      if (timelineTime !== null) {\n        details.animation.currentTime =\n            (timelineTime - value) * this.playbackRate;\n        updateFinishedState(details, true, false);\n      }\n    }\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return details.holdTime;\n\n    return calculateCurrentTime(details);\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    details.animation.currentTime = value;\n    if (!details.timeline || value == null)\n      return;\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (pendingPause(details)) {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.readyPromise.cancelTask();\n      details.readyPromise.resolve();\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n    details.animation.playbackRate = value;\n    details.pendingPlaybackRate = null;\n    updateFinishedState(details, false, false);\n  }\n\n  get playState() {\n    details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = this.currentTime;\n    const pendingTask =\n        details.readyPromise ? details.readyPromise.taskName() : null;\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (pendingTask == 'pause' ||\n        (details.startTime === null && pendingTask == 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= details.animation.effect.getTiming().duration)\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return details.readyPromise && details.readyPromise.state() == 'pending';\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = details.animation.effect.getTiming().duration;\n    if (playbackRate == 0 || (playbackRate < 0 && duration == Infinity)) {\n      // Let native implementation handle throwing the exception. This should\n      // not affect the state of the native animation.\n      details.animation.finish();\n      return;\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = limit;\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = details.timeline.currentTime;\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (pendingPause(details) && details.startTime !== null) {\n      details.holdTime = null;\n      details.readyPromise.cancelTask();\n      details.readyPromise.resolve();\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (pendingPlay(details) && details.startTime !== null) {\n      details.readyPromise.cancelTask();\n      details.readyPromise.resolve();\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n\n    // // Additional step to update the play state.\n    // // TODO: Calculate the play state rather than storing it to better align\n    // //       with the spec.\n    // const currentTime = this.currentTime;\n    // if (currentTime) {\n    //   details.holdTime = currentTime;\n    //   details.playState =\n    //       (details.startTime != null) ? 'finished' : 'paused';\n    // } else {\n    //   if (details.startTime != null || details.holdTime != null) {\n    //     details.playState = 'paused';\n    //   } else {\n    //     details.playState = 'idle';\n    //   }\n    // }\n    // syncCurrentTime(details);\n    // details.animation.finish();\n  }\n\n    // if (hasActiveTimeline(details)) {\n    //   details.startTime = timelineTime - seekTime / playbackRate;\n    //   details.holdTime = seekTime;\n    //   details.playState = 'finished';\n    //   removeAnimation(details.timeline, details.animation);\n    //   if (details.readyPromise && details.readyPromise.state() == 'pending')\n    //     details.readyPromise.resolve();\n    // } else {\n    //   details.startTime = null;\n    //   details.holdTime = seekTime;\n    //   details.playState = 'paused';\n    // }\n    // // Resolve the finished promise and fire the finished event.\n    // details.animation.finish();\n  // }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n    // 1. Let aborted pause be a boolean flag that is true if animation has a\n    //    pending pause task, and false otherwise.\n    // 2. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: this value will always true at this point in the polyfill.\n    //    Following steps are pruned based on the procedure for scroll\n    //    timelines.\n    const abortedPause = details.playState == 'paused' && this.pending;\n\n    let hasPendingReadyPromise = false;\n    let seekTime = null;\n\n    // 5. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n    //\n    // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n    //    true and either animation’s:\n    //      current time is unresolved, or\n    //      current time < zero, or\n    //      current time >= target effect end,\n    //    5a1. Set seek time to zero.\n    //\n    // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n    //    true and either animation’s:\n    //      current time is unresolved, or\n    //      current time ≤ zero, or\n    //      current time > target effect end,\n    //    5b1. If associated effect end is positive infinity,\n    //         throw an \"InvalidStateError\" DOMException and abort these steps.\n    //    5b2. Otherwise,\n    //         5b2a Set seek time to animation's associated effect end.\n    //\n    // 5c If animation’s effective playback rate = 0 and animation’s current time\n    //    is unresolved,\n    //    5c1. Set seek time to zero.\n    // Note: the auto-rewind flag is always true if directly calling play.\n\n    let previousCurrentTime = details.animation.currentTime;\n\n    // Resume of a paused animation after a timeline change snaps to the scroll\n    // position.\n    if (details.resetCurrentTimeOnResume) {\n      previousCurrentTime = null;\n      details.resetCurrentTimeOnResume = false;\n    }\n\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = details.animation.effect.getTiming().duration;\n    if (playbackRate > 0 && (previousCurrentTime == null ||\n                             previousCurrentTime < 0 ||\n                             previousCurrentTime >= duration)) {\n      seekTime = 0;\n    } else if (playbackRate < 0 && (previousCurrentTime == null ||\n                                    previousCurrentTime <= 0 ||\n                                    previousCurrentTime > duration)) {\n      if (duration == Infinity) {\n        // Defer to native implementation to handle throwing the exception.\n        details.animation.play();\n        return;\n      }\n      seekTime = duration;\n    } else if (playbackRate == 0 && previousCurrentTime == null) {\n      seekTime = 0;\n    }\n\n    // 6. If seek time is resolved,\n    //        6a1. Set animation's start time to seek time.\n    //        6a2. Let animation's hold time be unresolved.\n    //        6a3. Apply any pending playback rate on animation.\n    if (seekTime != null) {\n      details.startTime = seekTime;\n      details.holdTime = null;\n      applyPendingPlaybackRate(details);\n    }\n\n    // Additional steps for the polyfill.\n    details.playState = \"running\";\n    addAnimation(details.timeline, details.animation,\n                 tickAnimation.bind(this));\n\n    // 7. If animation's hold time is resolved, let its start time be\n    //    unresolved.\n    if (details.holdTime) {\n      details.startTime = null;\n    }\n\n    // 8. If animation has a pending play task or a pending pause task,\n    //   8.1 Cancel that task.\n    //   8.2 Set has pending ready promise to true.\n    if (details.readyPromise && this.pending) {\n      details.readyPromise.cancelTask();\n      hasPendingReadyPromise = true;\n    }\n\n    // 9. If the following three conditions are all satisfied:\n    //      animation’s hold time is unresolved, and\n    //      seek time is unresolved, and\n    //      aborted pause is false, and\n    //      animation does not have a pending playback rate,\n    //    abort this procedure.\n    if (details.holdTime === null && seekTime === null &&\n        !abortedPause && details.pendingPlaybackRate === null)\n    return;\n\n    // 10. If has pending ready promise is false, let animation’s current ready\n    //    promise be a new promise in the relevant Realm of animation.\n    if (details.readyPromise && !hasPendingReadyPromise)\n      details.readyPromise = null;\n\n    // Additional polyfill step to ensure that the native animation has the\n    // correct value for current time.\n    syncCurrentTime(details);\n\n    // 11. Schedule a task to run as soon as animation is ready.\n    const commitPendingPlay = () => {\n      const timelineTime = details.timeline.currentTime;\n      if (details.holdTime != null) {\n        // A: If animation’s hold time is resolved,\n        // A.1. Apply any pending playback rate on animation.\n        // A.2. Let new start time be the result of evaluating:\n        //        ready time - hold time / playback rate for animation.\n        //      If the playback rate is zero, let new start time be simply ready\n        //      time.\n        // A.3. Set the start time of animation to new start time.\n        // A.4. If animation’s playback rate is not 0, make animation’s hold\n        //      time unresolved.\n        applyPendingPlaybackRate(details);\n        if (playbackRate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime\n              = timelineTime -\n                  details.holdTime / details.animation.playbackRate;\n          details.holdTime = null;\n        }\n      } else if (details.startTime !== null &&\n                 details.pendingPlaybackRate !== null) {\n        // B: If animation’s start time is resolved and animation has a pending\n        //    playback rate,\n        // B.1. Let current time to match be the result of evaluating:\n        //        (ready time - start time) × playback rate for animation.\n        // B.2 Apply any pending playback rate on animation.\n        // B.3 If animation’s playback rate is zero, let animation’s hold time\n        //     be current time to match.\n        // B.4 Let new start time be the result of evaluating:\n        //       ready time - current time to match / playback rate\n        //     for animation.\n        //     If the playback rate is zero, let new start time be simply ready\n        //     time.\n        // B.5 Set the start time of animation to new start time.\n        const currentTimeToMatch =\n            (timelineTime - details.startTime) * details.animation.playbackRate;\n        applyPendingPlaybackRate(details);\n        const playbackRate = details.animation.playbackRate;\n        if (playbackRate == 0) {\n          details.holdTime = null;\n          details.startTime = timelineTime;\n        } else {\n          details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n        }\n      }\n\n      // 8.4 Resolve animation’s current ready promise with animation.\n      if (details.readyPromise && details.readyPromise.state() == 'pending')\n         details.readyPromise.resolve();\n\n      // 8.5 Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously notify flag set to false.\n      updateFinishedState(details, false, false);\n\n      // Additional polyfill step to update the native animation's current time.\n      syncCurrentTime(details);\n    };\n\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.readyPromise.queueTask(commitPendingPlay, 'play');\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (details.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = details.animation.effect.getTiming().duration;\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.playState == 'running' && details.readyPromise &&\n        details.readyPromise.state() == 'pending') {\n      details.readyPromise.cancelTask();\n    } else {\n      details.readyPromise = null;\n    }\n\n    // Extra step for the polyfill.\n    details.playState = 'paused';\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any. The task shall perform\n    //     the following steps:\n    const commitPendingPause = () => {\n      // 1. Let ready time be the time value of the timeline associated with\n      //    animation at the moment when the user agent completed processing\n      //    necessary to suspend playback of animation’s target effect.\n      const readyTime = details.timeline.currentTime;\n\n      // 2. If animation’s start time is resolved and its hold time is not\n      //    resolved, let animation’s hold time be the result of evaluating\n      //    (ready time - start time) × playback rate.\n      if (details.startTime != null && details.holdTime == null) {\n        details.holdTime =\n            (readyTime - details.startTime) * details.animation.playbackRate;\n      }\n\n      // 3. Apply any pending playback rate on animation.\n      applyPendingPlaybackRate(details);\n\n      // 4. Make animation’s start time unresolved.\n      details.startTime = null;\n\n      // 5. Resolve animation’s current ready promise with animation.\n      details.readyPromise.resolve();\n\n      // 6. Run the procedure to update an animation’s finished state for\n      // animation with the did seek flag set to false, and the synchronously\n      //  notify flag set to false.\n      updateFinishedState(details, false, false);\n\n      // Additional polyfill step to update the native animation's current time.\n      syncCurrentTime(details);\n    };\n\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.readyPromise.queueTask(commitPendingPause, 'pause');\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.reverse();\n      return;\n    }\n\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = details.animation.effect.getTiming().duration;\n    if (playbackRate == 0 || (playbackRate > 0 && duration == Infinity)) {\n      // Let native implementation handle throwing the exception.\n      details.animation.reverse();\n      return;\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    this.play();\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    const previousPlayState = details.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state() == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = details.timeline.currentTime;\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (value == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / value : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        this.play();\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2+ Handled by native implementation.\n    if (details.playState == 'idle')\n      return;\n    resetPendingTasks(details);\n    details.animation.cancel();\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n    // details.playState = 'idle';\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      createFinishedPromise(details);\n      if (this.playState == 'finished')\n        details.finishedPromsie.resolve();\n    }\n    return details.finishedPromise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      createReadyPromise(details);\n      details.readyPromise.resolve();\n    }\n    return details.readyPromise;\n  }\n};\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [\n    [TOP, BOTTOM],\n    [RIGHT, LEFT],\n  ],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]],\n];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: \"start\",\n      threshold: 0,\n      rootMargin: [\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n      ],\n    });\n    this.target = value.target;\n    this.edge = value.edge || \"start\";\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || \"0px 0px 0px 0px\";\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error(\"Intersection target must be an element.\");\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if ([\"start\", \"end\"].indexOf(value) == -1) return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a TypeError for a parse error.\n    if (threshold != threshold)\n      throw TypeError(\"Invalid threshold.\");\n    // TODO(https://crbug.com/1136516): This should throw a RangeError\n    // consistent with the intersection observer spec but the current\n    // test expectations are looking for a TypeError.\n    if (threshold < 0 || threshold > 1)\n      throw TypeError(\"threshold must be in the range [0, 1]\");\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/);\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError(\n        \"rootMargin must contain between 1 and 4 length components\"\n      );\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i], true);\n      if (!parsedValue) throw TypeError(\"Unrecognized rootMargin length\");\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [\n          parseFloat(parsedValue.value),\n          parsedValue.unit,\n        ];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this)\n      .rootMargin.map((margin) => {\n        return margin.join(\"\");\n      })\n      .join(\" \");\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n}\n\nexport function parseOffset(value) {\n  if (value.target) return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == \"percent\") return (length[0] * containerSize) / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(scrollSource, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == \"block\") orientation = \"vertical\";\n  else if (orientation == \"inline\") orientation = \"horizontal\";\n  let originalViewport =\n    scrollSource == document.scrollingElement\n      ? {\n          left: 0,\n          right: scrollSource.clientWidth,\n          top: 0,\n          bottom: scrollSource.clientHeight,\n          width: scrollSource.clientWidth,\n          height: scrollSource.clientHeight,\n        }\n      : scrollSource.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(\n      resolveLength(\n        parsedMargins[i],\n        i % 2 == 0 ? originalViewport.height : originalViewport.width\n      )\n    );\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width:\n      originalViewport.right -\n      originalViewport.left +\n      computedMargins[LEFT] +\n      computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height:\n      originalViewport.bottom -\n      originalViewport.top +\n      computedMargins[TOP] +\n      computedMargins[BOTTOM],\n  };\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == \"start\") threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == \"vertical\") {\n    let point =\n      target.top +\n      target.height * threshold -\n      viewport.top +\n      scrollSource.scrollTop;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.height);\n      return Math.min(point, scrollSource.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.height;\n      return point;\n    }\n  } else {\n    // orientation == 'horizontal'\n    let point =\n      target.left +\n      target.width * threshold -\n      viewport.left +\n      scrollSource.scrollLeft;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.width);\n      return Math.min(point, scrollSource.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  installScrollOffsetExtension\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\nimport { calculateOffset, parseOffset } from \"./intersection-based-offset\";\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["parseLength","obj","acceptStr","CSSUnitValue","CSSMathSum","matches","trim","match","AUTO","CSSKeywordValue","scrollTimelineOptions","WeakMap","extensionScrollOffsetFunctions","scrollEventSource","scrollSource","document","scrollingElement","updateInternal","scrollTimelineInstance","animations","get","length","timelineTime","currentTime","i","tickAnimation","calculateScrollOffset","autoValue","orientation","offset","fn","value","maxValue","scrollHeight","clientHeight","scrollWidth","clientWidth","resolvePx","cssValue","resolvedLength","unit","TypeError","total","values","removeAnimation","scrollTimeline","animation","splice","addAnimation","push","ScrollTimeline","options","set","this","startScrollOffset","endScrollOffset","scrollOffsets","timeRange","scrollOffsetFns","undefined","_createClass","element","removeEventListener","_this","addEventListener","indexOf","offsets","fns","input","result","parse","evaluate","parsed","data","currentStlOptions","startScrollOffsetFunction","endScrollOffsetFunction","range","Number","isFinite","scrollerStyle","getComputedStyle","display","overflow","startOffset","endOffset","maxOffset","currentScrollOffset","scrollTop","scrollLeft","phase","Math","max","effect","getComputedTiming","activeDuration","Infinity","calculateTimeRange","nativeElementAnimate","window","Element","prototype","animate","nativeAnimation","Animation","createReadyPromise","details","nativeResolve","nativeReject","pendingTask","pendingTaskName","state","p","Promise","resolve","reject","proxy","DOMException","cancelTask","queueTask","task","name","taskName","requestAnimationFrame","runOrRequeueTask","timeline","readyPromise","pendingPause","createFinishedPromise","ScheduleAsyncFinish","playState","finish","finishedPromise","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","curentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","effectEnd","getTiming","duration","boundary","previousCurrentTime","holdTime","syncCurrentTime","finishdPromise","finsihedPromise","pause","proxyAnimations","cancel","ProxyAnimation","animationTimeline","isScrollAnimation","resetCurrentTimeOnResume","sequence","aborted","Set","limit","pendingPlay","play","abortedPause","hasPendingReadyPromise","seekTime","bind","currentTimeToMatch","reverse","updatePlaybackRate","rate","previousPlayState","persist","resetPendingTasks","newEffect","newTimeline","oldTimeline","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finishedPromsie","finished","ready","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","target","edge","threshold","rootMargin","clamp","Error","parseFloat","margins","split","parsedMargins","parsedValue","positions","j","map","margin","join","startOrEnd","originalViewport","left","right","top","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","min","Reflect","defineProperty","keyframes","apply","proxyAnimation"],"mappings":"mjCAAgBA,EAAYC,EAAKC,GAC/B,GAAID,aAAeE,cAAgBF,aAAeG,WAChD,OAAOH,EACT,IAAKC,EACH,YACF,IAAIG,EAAUJ,EAAIK,OAAOC,MAAM,+BAC/B,OAAIF,MAISF,aAHCE,EAAQ,GAEK,KAAdA,EAAQ,GAAY,UAAYA,EAAQ,SCOvD,IAAMG,EAAO,IAAIC,gBAAgB,QAE7BC,EAAwB,IAAIC,QAC5BC,EAAiC,GAErC,SAASC,EAAkBC,GACzB,OAAIA,IAAiBC,SAASC,iBAAyBD,SAChDD,EAOT,SAASG,EAAeC,GACtB,IAAIC,EAAaT,EAAsBU,IAAIF,GAAwBC,WACnE,GAA0B,IAAtBA,EAAWE,OAGf,IAFA,IAAIC,EAAeJ,EAAuBK,YAEjCC,EAAI,EAAGA,EAAIL,EAAWE,OAAQG,IACrCL,EAAWK,GAAGC,cAAcH,GAkFhC,SAAgBI,EACdC,EACAb,EACAc,EACAC,EACAC,GAEA,GAAIA,EACF,OAAOA,EACLhB,EACAc,EACAC,EACmB,GAAnBF,EAAUI,MAAa,QAAU,OAGjB,UAAhBH,EAAyBA,EAAc,WAClB,WAAhBA,IAA0BA,EAAc,cAEjD,IAAII,EACc,aAAhBJ,EACId,EAAamB,aAAenB,EAAaoB,aACzCpB,EAAaqB,YAAcrB,EAAasB,YAE9C,OAnDF,SAUSC,EAAUC,EAAUC,GAC3B,GAAID,aAAoBnC,aAAc,CACpC,GAAqB,WAAjBmC,EAASE,KACX,OAAOF,EAASP,MAAQQ,EAAiB,OACjB,MAAjBD,EAASE,KAChB,OAAOF,EAASP,YAEVU,UAAU,uBAAyBH,EAASE,SAC3CF,aAAoBlC,WAAY,CAEzC,IADA,MAAIsC,EAAQ,MACMJ,EAASK,uBACzBD,GAASL,UAAiBE,GAE5B,OAAOG,EAET,MAAMD,UAAU,kCAAoCH,GA0B7CD,CADMrC,EAAY6B,IAAWrB,EAAOmB,EAAYE,GAC9BG,YASXY,EAAgBC,EAAgBC,GAE9C,IADA,IAAI3B,EAAaT,EAAsBU,IAAIyB,GAAgB1B,WAClDK,EAAI,EAAGA,EAAIL,EAAWE,OAAQG,IACjCL,EAAWK,GAAGsB,WAAaA,GAC7B3B,EAAW4B,OAAOvB,EAAG,GAW3B,SAAgBwB,EAAaH,EAAgBC,EAAWrB,GAEtD,IADA,IAAIN,EAAaT,EAAsBU,IAAIyB,GAAgB1B,WAClDK,EAAI,EAAGA,EAAIL,EAAWE,OAAQG,IACrC,GAAIL,EAAWK,GAAGsB,WAAaA,EAC7B,OAGJ3B,EAAW8B,KAAK,CACdH,UAAWA,EACXrB,cAAeA,IAEjBR,EAAe4B,OAQJK,aACX,WAAYC,GACVzC,EAAsB0C,IAAIC,KAAM,CAC9BvC,aAAc,KACdc,YAAa,QACb0B,kBAAmB9C,EACnB+C,gBAAiB/C,EACjBgD,cAAe,GACfC,UAAWjD,EAGXW,WAAY,GACZuC,gBAAiB,KAEnBL,KAAKvC,aACHqC,QAAoCQ,IAAzBR,EAAQrC,aAA6BqC,EAAQrC,aAAeC,SAASC,iBAClFqC,KAAKzB,YAAeuB,GAAWA,EAAQvB,aAAgB,QACvDyB,KAAKC,kBAAqBH,GAAWA,EAAQG,mBAAsB9C,EACnE6C,KAAKE,gBAAmBJ,GAAWA,EAAQI,iBAAoB/C,EAC/D6C,KAAKG,cAAgBL,QAAqCQ,IAA1BR,EAAQK,cAA8BL,EAAQK,cAAgB,GAC9FH,KAAKI,UAAYN,QAAiCQ,IAAtBR,EAAQM,UAA0BN,EAAQM,UAAY,cApBtFG,sCAuBmBC,cACXR,KAAKvC,cACPD,EAAkBwC,KAAKvC,cAAcgD,oBAAoB,SAAU,kBACjE7C,EAAe8C,KAEnBrD,EAAsBU,IAAIiC,MAAMvC,aAAe+C,EAC3CA,GACFhD,EAAkBgD,GAASG,iBAAiB,SAAU,kBACpD/C,EAAe8C,KAGnB9C,EAAeoC,sBAIf,OAAO3C,EAAsBU,IAAIiC,MAAMvC,+CAGzBc,GACd,IAC0E,IAAxE,CAAC,QAAS,SAAU,aAAc,YAAYqC,QAAQrC,GAEtD,MAAMa,UAAU,uBAElB/B,EAAsBU,IAAIiC,MAAMzB,YAAcA,EAC9CX,EAAeoC,sBAIf,OAAO3C,EAAsBU,IAAIiC,MAAMzB,gDAGvBG,GAGhB,IAFA,MAAImC,EAAU,GACVC,EAAM,OACQpC,kBAAO,KAAhBqC,UACHtC,EAAK,KACLD,OAAS8B,EACA,QAATS,IACFA,EAAQ5D,GACV,IAAK,IAAIgB,EAAI,EAAGA,EAAIZ,EAA+BS,OAAQG,IAAK,CAC9D,IAAI6C,EAASzD,EAA+BY,GAAG8C,MAAMF,GACrD,QAAeT,IAAXU,EAAsB,CACxBxC,EAASwC,EACTvC,EAAKlB,EAA+BY,GAAG+C,SACvC,OAGJ,IAAKzC,EAAI,CACP,GAAIsC,GAAS5D,EAAM,CACjB,IAAIgE,EAASxE,EAAYoE,GAEzB,IAAKI,GAAWA,aAAkBrE,cAA+B,UAAfqE,EAAOhC,KACvD,MAAMC,UAAU,gCAEpBZ,EAASuC,EAEXF,EAAQjB,KAAKpB,GACbsC,EAAIlB,KAAKnB,GAEX,GAAsB,GAAlBoC,EAAQ7C,QAAe6C,EAAQ,IAAM1D,EACvC,MAAMiC,UAAU,gCAClB,IAAIgC,EAAO/D,EAAsBU,IAAIiC,MACrCoB,EAAKjB,cAAgBU,EACrBO,EAAKf,gBAAkBS,kBAKvB,OADWzD,EAAsBU,IAAIiC,MACzBG,sDAGQ3B,GACN,QAAVA,IACFA,EAASrB,GACX,IAAIkE,EAAoBhE,EAAsBU,IAAIiC,MAElDqB,EAAkBC,0BAA4B,KAC9C,IAAK,IAAInD,EAAI,EAAGA,EAAIZ,EAA+BS,OAAQG,IAAK,CAC9D,IAAI6C,EAASzD,EAA+BY,GAAG8C,MAAMzC,GACrD,QAAe8B,IAAXU,EAAsB,CACxBxC,EAASwC,EACTK,EAAkBC,0BAChB/D,EAA+BY,GAAG+C,SACpC,OAGJ,GAAI1C,GAAUrB,IAASE,EAAsBU,IAAIiC,MAAMsB,0BAA2B,CAChF,IAAIH,EAASxE,EAAY6B,GAEzB,IAAK2C,GAAWA,aAAkBrE,cAA+B,UAAfqE,EAAOhC,KACvD,MAAMC,UAAU,yBAEpBiC,EAAkBpB,kBAAoBzB,EACtCZ,EAAeoC,sBAIf,OAAO3C,EAAsBU,IAAIiC,MAAMC,wDAGrBzB,GACJ,QAAVA,IACFA,EAASrB,GAEXE,EAAsBU,IAAIiC,MAAMuB,wBAA0B,KAC1D,IAAK,IAAIpD,EAAI,EAAGA,EAAIZ,EAA+BS,OAAQG,IAAK,CAC9D,IAAI6C,EAASzD,EAA+BY,GAAG8C,MAAMzC,GACrD,QAAe8B,IAAXU,EAAsB,CACxBxC,EAASwC,EACT3D,EAAsBU,IAAIiC,MAAMuB,wBAC9BhE,EAA+BY,GAAG+C,SACpC,OAGJ,GAAI1C,GAAUrB,IAASE,EAAsBU,IAAIiC,MAAMsB,0BAA2B,CAChF,IAAIH,EAASxE,EAAY6B,GAEzB,IAAK2C,GAAWA,aAAkBrE,cAA+B,UAAfqE,EAAOhC,KACvD,MAAMC,UAAU,uBAEpB/B,EAAsBU,IAAIiC,MAAME,gBAAkB1B,EAClDZ,EAAeoC,sBAIf,OAAO3C,EAAsBU,IAAIiC,MAAME,gDAG3BsB,GACZ,GAAa,QAATA,IAEmB,iBAAVA,IAAuBC,OAAOC,SAASF,IAAUA,GAASA,GACnE,MAAMpC,UAAU,2BAEpB/B,EAAsBU,IAAIiC,MAAMI,UAAYoB,EAC5C5D,EAAeoC,sBAIf,OAAO3C,EAAsBU,IAAIiC,MAAMI,wCAQvC,IAAKJ,KAAKvC,aAAc,MAAO,WAC/B,IAAIkE,EAAgBC,iBAAiB5B,KAAKvC,cAE1C,GAA6B,QAAzBkE,EAAcE,QAChB,MAAO,WAET,GAA8B,WAA1BF,EAAcG,UAAmD,QAA1BH,EAAcG,SACvD,MAAO,WACT,IAAIC,EAAc1D,EAChB,IAAIvB,aAAa,EAAG,WACpBkD,KAAKvC,aACLuC,KAAKzB,YACLyB,KAAKC,kBACL5C,EAAsBU,IAAIiC,MAAMsB,2BAE9BU,EAAY3D,EACd,IAAIvB,aAAa,IAAK,WACtBkD,KAAKvC,aACLuC,KAAKzB,YACLyB,KAAKE,gBACL7C,EAAsBU,IAAIiC,MAAMuB,yBAE9BU,EAAY5D,EACd,IAAIvB,aAAa,IAAK,WACtBkD,KAAKvC,aACLuC,KAAKzB,YACL,IAAIzB,aAAa,IAAK,WACtB,MAGF,GAAoB,OAAhBiF,GAAsC,OAAdC,EAC1B,MAAO,WAIT,IAAIE,EAAsBlC,KAAKvC,aAAa0E,UAM5C,MALyB,WAArBnC,KAAKzB,aAAiD,eAArByB,KAAKzB,cACxC2D,EAAsBlC,KAAKvC,aAAa2E,YAItCF,EAAsBH,EACjB,SACLG,GAAuBF,GAAaA,EAAYC,EAC3C,QACF,6CAOP,IAAKjC,KAAKvC,aAAc,OADP,KAEjB,GAAkB,YAAduC,KAAKqC,MACP,OAHe,KAKjB,IAAIN,EAAc1D,EAChB,IAAIvB,aAAa,EAAG,WACpBkD,KAAKvC,aACLuC,KAAKzB,YACLyB,KAAKC,kBACL5C,EAAsBU,IAAIiC,MAAMsB,2BAE9BU,EAAY3D,EACd,IAAIvB,aAAa,IAAK,WACtBkD,KAAKvC,aACLuC,KAAKzB,YACLyB,KAAKE,gBACL7C,EAAsBU,IAAIiC,MAAMuB,yBAE9BnB,EA3XR,SAA4BZ,GAC1B,IAAIY,EAAYZ,EAAeY,UAC/B,GAAIA,GAAajD,EAAM,CACrBiD,EAAY,EAEZ,IADA,IAAItC,EAAaT,EAAsBU,IAAIyB,GAAgB1B,WAClDK,EAAI,EAAGA,EAAIL,EAAWE,OAAQG,IACrCiC,EAAYkC,KAAKC,IAAInC,EACyBtC,EAAWK,GAAGsB,UAc/C+C,OAAOC,oBAAoBC,gBAZxBC,WAAdvC,IAAwBA,EAAY,GAE1C,OAAOA,EAgXWwC,CAAmB5C,MAI/BkC,EAAsBlC,KAAKvC,aAAa0E,UAM5C,MALyB,WAArBnC,KAAKzB,aAAiD,eAArByB,KAAKzB,cACxC2D,EAAsBlC,KAAKvC,aAAa2E,YAItCF,EAAsBH,IAItBG,GAAuBF,EAClB5B,GAIL8B,EAAsBH,IAAgBC,EAAYD,GACpD3B,qCAKF,kBC3bEyC,EAAuBC,OAAOC,QAAQC,UAAUC,QAChDC,EAAkBJ,OAAOK,UAa/B,SAASC,EAAmBC,GAC1B,IAAIC,OAAgBhD,EAChBiD,OAAejD,EACfkD,OAAclD,EACdmD,OAAkBnD,EAClBoD,EAAQ,UACNC,EAAI,IAAIC,QAAQ,SAACC,EAASC,GAC9BR,EAAgBO,EAChBN,EAAeO,IA+CjB,OA5CAH,EAAEE,QAAU,WACVH,EAAQ,WACRF,EAAc,KACdC,EAAkB,KAClBH,EAAcD,EAAQU,QAExBJ,EAAEG,OAAS,WACTJ,EAAQ,WACRF,EAAc,KACdC,EAAkB,KAClBF,EAAa,IAAIS,aAAa,6BAA8B,gBAE9DL,EAAEM,WAAa,WACbT,EAAc,MAEhBG,EAAEO,UAAY,SAACC,EAAMC,GACnBZ,EAAcW,EACdV,EAAkBW,GAEpBT,EAAED,MAAQ,WACR,OAAOA,GAETC,EAAEU,SAAW,WACX,OAAOZ,GAkBTa,sBAfyB,SAAnBC,IACJ,GAAKf,EAGL,OAAqC,OAAjCH,EAAQmB,SAAStG,aACnBsF,SACAA,EAAc,YAGhBc,sBAAsBC,KAQxBlB,EAAQoB,aAAed,EAChBA,EAST,SAASe,EAAarB,GACpB,QAAKA,EAAQoB,cAE6B,SAAnCpB,EAAQoB,aAAaJ,WAO9B,SAASM,EAAsBtB,GAC7B,IAAIC,OAAgBhD,EAChBiD,OAAejD,EACfoD,EAAQ,UACNC,EAAI,IAAIC,QAAQ,SAACC,EAASC,GAC9BR,EAAgBO,EAChBN,EAAeO,IAqBjB,OAnBAH,EAAEE,QAAU,WACVH,EAAQ,WACRJ,EAAcD,EAAQU,QAExBJ,EAAEG,OAAS,WACTJ,EAAQ,WACRH,EAAa,IAAIS,aAAa,6BAA8B,gBAE9DL,EAAEiB,oBAAsB,WACtBN,sBAAsB,WAGW,YAA3BjB,EAAQU,MAAMc,WAAoC,WAATnB,IAC1CC,EAAEE,UACFR,EAAQ5D,UAAUqF,aAIzBzB,EAAQ0B,gBAAkBpB,EACnBA,EAIT,SAASqB,EAAsB3B,GAC7B,OAAIA,EAAQ4B,oBACH5B,EAAQ4B,oBACV5B,EAAQ5D,UAAUyF,aAG3B,SAASC,EAAyB9B,GAC5BA,EAAQ4B,sBACV5B,EAAQ5D,UAAUyF,aAAe7B,EAAQ4B,oBACzC5B,EAAQ4B,oBAAsB,MAIlC,SAASG,EAAqB/B,GAC5B,IAAKA,EAAQmB,SACX,YAEF,IAAMvG,EAAeoF,EAAQmB,SAASa,WACtC,OAAqB,OAAjBpH,GAGsB,OAAtBoF,EAAQiC,gBAGJrH,EAAeoF,EAAQiC,WAAajC,EAAQ5D,UAAUyF,aAGhE,SAASK,EAAmBlC,EAASnF,GACnC,IAAKmF,EAAQmB,SACX,YAEF,IAAMvG,EAAeoF,EAAQmB,SAAStG,YACtC,OAAoB,MAAhBD,OAGGA,EAAeC,EAAcmF,EAAQ5D,UAAUyF,aAGxD,SAASM,EAAoBnC,EAASoC,EAASC,GAC7C,GAAKrC,EAAQmB,SAAb,CAOA,IAAMmB,EACFF,EAAUpC,EAAQU,MAAM7F,YAAckH,EAAqB/B,GAG/D,GAAIsC,GAAiD,MAArBtC,EAAQiC,YACnCjC,EAAQU,MAAM6B,QAAS,CAQ1B,IAAMV,EAAeF,EAAsB3B,GACrCwC,EAAYxC,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SACnDC,EAAW3C,EAAQ4C,oBAEnBf,EAAe,GAAKS,GAA4BE,IACjC,OAAbG,GAAqBA,EAAWH,KAClCG,EAAWH,GACbxC,EAAQ6C,SAAWT,EAAUE,EAA2BK,GAC/Cd,EAAe,GAAKS,GAA4B,IACzC,MAAZK,GAAoBA,EAAW,KACjCA,EAAW,GACb3C,EAAQ6C,SAAWT,EAAUE,EAA2BK,GAC/B,GAAhBd,IAELO,GAAgC,OAArBpC,EAAQ6C,WACrB7C,EAAQiC,UAAYC,EAAmBlC,EAASA,EAAQ6C,WAC1D7C,EAAQ6C,SAAW,MAMvBC,EAAgB9C,GAGhBA,EAAQ4C,oBAAsB5C,EAAQ5D,UAAUvB,YAI/B,YADC8B,KAAK6E,WAEhBxB,EAAQ0B,iBACXJ,EAAsBtB,GAEe,WAAnCA,EAAQ0B,gBAAgBrB,UAEtBgC,GACFrC,EAAQQ,UACRR,EAAQ5D,UAAUqF,UAElBzB,EAAQ+C,eAAexB,yBAMvBvB,EAAQ0B,iBAC2B,YAAnC1B,EAAQ0B,gBAAgBrB,UAC1BL,EAAQgD,gBAAkB,MAEO,UAA/BhD,EAAQ5D,UAAUoF,WACpBxB,EAAQ5D,UAAU6G,UAIxB,SAISH,EAAgB9C,GAClBA,EAAQmB,WAGa,OAAtBnB,EAAQiC,UAEVjC,EAAQ5D,UAAUvB,aADGmF,EAAQmB,SAAStG,YAElBmF,EAAQiC,WAAajC,EAAQ5D,UAAUyF,aAC7B,OAArB7B,EAAQ6C,WACjB7C,EAAQ5D,UAAUvB,YAAcmF,EAAQ6C,WA4B5C,SAAS9H,EAAcH,GACrB,IAAMoF,EAAUkD,EAAgBxI,IAAIiC,MAChB,MAAhB/B,EAQkB,WAAlB+B,KAAK6E,YACPxB,EAAQ5D,UAAUvB,aACbD,EAAe+B,KAAKsF,WAAatF,KAAKkF,aAC3CM,EAAoBnC,GAAS,GAAO,IARD,QAA/BA,EAAQ5D,UAAUoF,WACpBxB,EAAQ5D,UAAU+G,SAcxB,IAAID,EAAkB,IAAIjJ,QAEbmJ,aACX,WAAYjE,EAAQgC,GAClB,IAAM/E,EACD+C,aAAkBU,EAChBV,EAAS,IAAIU,EAAgBV,EAAQkE,GACtCC,EAAoBnC,aAAoB3E,EACxC6G,EAAoBC,OAAoBrG,EAAYkE,EAC1D+B,EAAgBxG,IAAIC,KAAM,CACxBP,UAAWA,EACX+E,SAAUmC,EAAoBnC,OAAWlE,EACzCuE,UAAW8B,EAAoB,OAAS,KACxClC,aAAc,KACdM,gBAAiB,KAOjBO,UAAW,KACXY,SAAU,KACVD,oBAAqB,KAGrBW,0BAA0B,EAK1B3B,oBAAqB,KACrBlB,MAAO/D,KACP6G,SAAU,EACVC,QAAS,IAAIC,MAhCnB,2BA4REjC,OAAA,WACE,IAAMzB,EAAUkD,EAAgBxI,IAAIiC,MACpC,GAAKqD,EAAQmB,SAAb,CAQA,IAAMU,EAAeF,EAAsB3B,GACrC0C,EAAW1C,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SACtD,GAAoB,GAAhBb,GAAsBA,EAAe,GAAiBvC,UAAZoD,EAG5C1C,EAAQ5D,UAAUqF,aAHpB,CAQAK,EAAyB9B,GAOzB,IAAM2D,EAAQ9B,EAAe,EAAI,EAAIa,EAGrC/F,KAAK9B,YAAc8I,EAQnB,IAAM/I,EAAeoF,EAAQmB,SAAStG,YACZ,OAAtBmF,EAAQiC,WAAuC,OAAjBrH,IAC/BoF,EAAQiC,UACJrH,EAAgB+I,EAAQ3D,EAAQ5D,UAAUyF,cAO7CR,EAAarB,IAAkC,OAAtBA,EAAQiC,YACnCjC,EAAQ6C,SAAW,KACnB7C,EAAQoB,aAAaR,aACrBZ,EAAQoB,aAAaZ,WA9iB3B,SAAqBR,GACnB,QAAKA,EAAQoB,cAE6B,QAAnCpB,EAAQoB,aAAaJ,WAijBtB4C,CAAY5D,IAAkC,OAAtBA,EAAQiC,YAClCjC,EAAQoB,aAAaR,aACrBZ,EAAQoB,aAAaZ,WAMvB2B,EAAoBnC,GAAS,GAAM,SA9DjCA,EAAQ5D,UAAUqF,YAmGtBoC,KAAA,WACE,IAAM7D,EAAUkD,EAAgBxI,IAAIiC,MACpC,GAAKqD,EAAQmB,SAAb,CAgBA,IAAM2C,EAAoC,UAArB9D,EAAQwB,WAAyB7E,KAAK4F,QAEvDwB,GAAyB,EACzBC,EAAW,KA2BXpB,EAAsB5C,EAAQ5D,UAAUvB,YAIxCmF,EAAQuD,2BACVX,EAAsB,KACtB5C,EAAQuD,0BAA2B,GAGrC,IAAM1B,EAAeF,EAAsB3B,GACrC0C,EAAW1C,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SACtD,GAAIb,EAAe,IAA6B,MAAvBe,GACAA,EAAsB,GACtBA,GAAuBF,GAC9CsB,EAAW,UACFnC,EAAe,IAA6B,MAAvBe,GACAA,GAAuB,GACvBA,EAAsBF,GAAW,CAC/D,GAAgBpD,UAAZoD,EAGF,YADA1C,EAAQ5D,UAAUyH,OAGpBG,EAAWtB,OACc,GAAhBb,GAA4C,MAAvBe,IAC9BoB,EAAW,GAOG,MAAZA,IACFhE,EAAQiC,UAAY+B,EACpBhE,EAAQ6C,SAAW,KACnBf,EAAyB9B,IAI3BA,EAAQwB,UAAY,UACpBlF,EAAa0D,EAAQmB,SAAUnB,EAAQ5D,UAC1BrB,EAAckJ,KAAKtH,OAI5BqD,EAAQ6C,WACV7C,EAAQiC,UAAY,MAMlBjC,EAAQoB,cAAgBzE,KAAK4F,UAC/BvC,EAAQoB,aAAaR,aACrBmD,GAAyB,IASF,OAArB/D,EAAQ6C,UAAkC,OAAbmB,GAC5BF,GAAgD,OAAhC9D,EAAQ4B,uBAKzB5B,EAAQoB,eAAiB2C,IAC3B/D,EAAQoB,aAAe,MAIzB0B,EAAgB9C,GAgEXA,EAAQoB,cACXrB,EAAmBC,GACrBA,EAAQoB,aAAaP,UA/DK,WACxB,IAAMjG,EAAeoF,EAAQmB,SAAStG,YACtC,GAAwB,MAApBmF,EAAQ6C,SAUVf,EAAyB9B,GACL,GAAhB6B,EACF7B,EAAQiC,UAAYrH,GAEpBoF,EAAQiC,UACFrH,EACEoF,EAAQ6C,SAAW7C,EAAQ5D,UAAUyF,aAC7C7B,EAAQ6C,SAAW,cAEU,OAAtB7C,EAAQiC,WACwB,OAAhCjC,EAAQ4B,oBAA8B,CAc/C,IAAMsC,GACDtJ,EAAeoF,EAAQiC,WAAajC,EAAQ5D,UAAUyF,aAC3DC,EAAyB9B,GACzB,IAAM6B,EAAe7B,EAAQ5D,UAAUyF,aACnB,GAAhBA,GACF7B,EAAQ6C,SAAW,KACnB7C,EAAQiC,UAAYrH,GAEpBoF,EAAQiC,UAAYrH,EAAesJ,EAAqBrC,EAKxD7B,EAAQoB,cAAgD,WAAhCpB,EAAQoB,aAAaf,SAC9CL,EAAQoB,aAAaZ,UAKxB2B,EAAoBnC,GAAS,GAAO,GAGpC8C,EAAgB9C,IAKgC,cAzLhDA,EAAQ5D,UAAUyH,UA4LtBZ,MAAA,WACE,IAAMjD,EAAUkD,EAAgBxI,IAAIiC,MACpC,GAAKqD,EAAQmB,UASb,GAAyB,UAArBnB,EAAQwB,UAAZ,CAQA,IAAIwC,EAAW,KAaTnC,EAAe7B,EAAQ5D,UAAUyF,aACjCa,EAAW1C,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SAEtD,GAAsC,OAAlC1C,EAAQ5D,UAAUvB,YACpB,GAAIgH,GAAgB,EAClBmC,EAAW,UACU1E,UAAZoD,EAGT,YADA1C,EAAQ5D,UAAU6G,QAGlBe,EAAWtB,EAOE,OAAbsB,IACFhE,EAAQiC,UAAY+B,GAQG,WAArBhE,EAAQwB,WAA0BxB,EAAQoB,cACV,WAAhCpB,EAAQoB,aAAaf,QACvBL,EAAQoB,aAAaR,aAErBZ,EAAQoB,aAAe,KAIzBpB,EAAQwB,UAAY,SAsCfxB,EAAQoB,cACXrB,EAAmBC,GACrBA,EAAQoB,aAAaP,UAlCM,WASA,MAArBb,EAAQiC,WAAyC,MAApBjC,EAAQ6C,WACvC7C,EAAQ6C,UANQ7C,EAAQmB,SAAStG,YAOhBmF,EAAQiC,WAAajC,EAAQ5D,UAAUyF,cAI1DC,EAAyB9B,GAGzBA,EAAQiC,UAAY,KAGpBjC,EAAQoB,aAAaZ,UAKrB2B,EAAoBnC,GAAS,GAAO,GAGpC8C,EAAgB9C,IAKiC,eAxGjDA,EAAQ5D,UAAU6G,WA2GtBkB,QAAA,WACE,IAAMnE,EAAUkD,EAAgBxI,IAAIiC,MACpC,GAAKqD,EAAQmB,SAAb,CAKA,IAAMU,EAAeF,EAAsB3B,GACrC0C,EAAW1C,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SAClC,GAAhBb,GAAsBA,EAAe,GAAiBvC,UAAZoD,EAE5C1C,EAAQ5D,UAAU+H,WAIpBxH,KAAKyH,oBAAoBvC,GACzBlF,KAAKkH,aAbH7D,EAAQ5D,UAAU+H,aAgBtBC,mBAAA,SAAmBC,GACjB,IAAMrE,EAAUkD,EAAgBxI,IAAIiC,MAEpC,GADAqD,EAAQ4B,oBAAsByC,EACzBrE,EAAQmB,SAAb,CASA,IAAMmD,EAAoBtE,EAAQwB,UAOlC,IAAIxB,EAAQoB,cAAgD,WAAhCpB,EAAQoB,aAAaf,QAGjD,OAAOiE,GAGL,IAAK,OACL,IAAK,SACHxC,EAAyB9B,GACzB,MAkBF,IAAK,WACH,IAAMpF,EAAeoF,EAAQmB,SAAStG,YAChCyH,EAA4C,OAAjB1H,GAC5BA,EAAeoF,EAAQiC,WAAajC,EAAQ5D,UAAUyF,aACrD,KAEJ7B,EAAQiC,UADG,GAAT5G,MACkBT,EAGA,MAAhBA,GAAoD,MAA5B0H,GACnB1H,EAAe0H,GAA4BjH,MAAQ,KAE9DyG,EAAyB9B,GACzBmC,EAAoBnC,GAAS,GAAO,GACpC8C,EAAgB9C,GAChB,MAKF,QACErD,KAAKkH,aA/DP7D,EAAQ5D,UAAUgI,mBAAmBC,MAmEzCE,QAAA,WACErB,EAAgBxI,IAAIiC,MAAMP,UAAUmI,aAOtCpB,OAAA,WACE,IAAMnD,EAAUkD,EAAgBxI,IAAIiC,MAC/BqD,EAAQmB,SAUY,QAArBnB,EAAQwB,YA30BhB,SAA2BxB,GAKpBA,EAAQoB,cAAiD,YAAhCpB,EAAQoB,aAAaf,UAKnDL,EAAQoB,aAAaR,aAGrBkB,EAAyB9B,GAIzBA,EAAQoB,aAAaX,SAIrBT,EAAQoB,aAAe,MAwzBrBoD,CAAkBxE,GAClBA,EAAQ5D,UAAU+G,SAIlBnD,EAAQiC,UAAY,KACpBjC,EAAQ6C,SAAW,KAInB3G,EAAgB8D,EAAQmB,SAAUnB,EAAQ5D,YArBxC4D,EAAQ5D,UAAU+G,4CA3uBpB,OAAOD,EAAgBxI,IAAIiC,MAAMP,UAAU+C,qBAElCsF,GACTvB,EAAgBxI,IAAIiC,MAAMP,UAAU+C,OAASsF,mCAI7C,IAAMzE,EAAUkD,EAAgBxI,IAAIiC,MAGpC,OAAOqD,EAAQmB,UAAYnB,EAAQ5D,UAAU+E,uBAElCuD,GACX,IAAMC,EAAchI,KAAKwE,SACzB,GAAIwD,GAAeD,EAAnB,CAGA,IAAM1E,EAAUkD,EAAgBxI,IAAIiC,MAE9BiI,EAAsBD,aAAuBnI,EAC7CqI,EAAoBH,aAAuBlI,EAC3CoG,EAAsBjG,KAAK9B,YAC3ByJ,EAAoB3H,KAAK6E,UACzBK,EAAeF,EAAsB3B,GACrCuC,EAAU5F,KAAK4F,QAOrB,GALIqC,GACF1I,EAAgB8D,EAAQmB,SAAUnB,EAAQ5D,WAG5C4D,EAAQuD,0BAA2B,EAC/BsB,EAAJ,CAIE,OAHA7E,EAAQmB,SAAWuD,EACnB5C,EAAyB9B,GACzBA,EAAQ5D,UAAU6G,QACXqB,GACL,IAAK,OACHtE,EAAQ6C,SAAW,KACnB7C,EAAQiC,UAAY,KACpB,MAEF,IAAK,SACHjC,EAAQuD,0BAA2B,EACnCvD,EAAQ5D,UAAUvB,YAAc+H,EAChC1G,EAAgB8D,EAAQmB,SAAUnB,EAAQ5D,WAC1C,MAEF,IAAK,UACL,IAAK,WACH4D,EAAQiC,UACJJ,EAAe,EAAI7B,EAAQ5D,UAAU+C,OAAOsD,YAAYC,SACrC,EACvB1C,EAAQ6C,SACiB,YAArByB,EAAkC1B,EAAsB,KAC5DtG,EAAa0D,EAAQmB,SAAUnB,EAAQ5D,UACnCrB,EAAckJ,KAAKtH,OAGvB4F,GACFxC,EAAmBC,OA5BvB,CAgCA,GAAIA,EAAQ5D,UAAU+E,UAAYuD,EAehC,MAAM3I,UAAU,yBAA2B2I,GAd3C,GAAIE,EAGF,OAFA5E,EAAQmB,SAAW,KACnBnB,EAAQ5D,UAAUvB,YAAc+H,EACxB5C,EAAQ6B,cACd,IAAK,SACH7B,EAAQ5D,UAAU6G,QAClB,MAEF,IAAK,UACL,IAAK,WACHjD,EAAQ5D,UAAUyH,4CAS1B,IAAM7D,EAAUkD,EAAgBxI,IAAIiC,MACpC,OAAIqD,EAAQmB,SACHnB,EAAQiC,UAEVjC,EAAQ5D,UAAU6F,wBAEb5G,GAEZ,IAAM2E,EAAUkD,EAAgBxI,IAAIiC,MACpC,GAAKqD,EAAQmB,SAAb,CAMA,IAAMvG,EAAeoF,EAAQmB,SAAStG,YACjB,OAAjBD,GAAmC,OAAVS,IAC3B2E,EAAQ6C,SAAW,MAErB,IAAMD,EAAsBjG,KAAK9B,YACjCiH,EAAyB9B,GACzBA,EAAQiC,UAAY5G,EACpB2E,EAAQuD,0BAA2B,EACnCvD,EAAQoB,aAAe,KAET,OAAV/F,EACF2E,EAAQ6C,SAAWD,EAEE,OAAjBhI,IACFoF,EAAQ5D,UAAUvB,aACbD,EAAeS,GAASsB,KAAKkF,aAClCM,EAAoBnC,GAAS,GAAM,IAKvC8C,EAAgB9C,QA1BdA,EAAQ5D,UAAU6F,UAAY5G,sCA8BhC,IAAM2E,EAAUkD,EAAgBxI,IAAIiC,MACpC,OAAKqD,EAAQmB,SAGW,MAApBnB,EAAQ6C,SACH7C,EAAQ6C,SAEVd,EAAqB/B,GALnBA,EAAQ5D,UAAUvB,0BAObQ,GACd,IAAM2E,EAAUkD,EAAgBxI,IAAIiC,MAEpC,GADAqD,EAAQ5D,UAAUvB,YAAcQ,EAC3B2E,EAAQmB,UAAqB,MAAT9F,EAAzB,CAIA,IAEMyJ,EAAgB9E,EAAQmB,SAASnC,MAGd,OAArBgB,EAAQ6C,UAA2C,OAAtB7C,EAAQiC,WACpB,YAAjB6C,GAAiE,GAAlC9E,EAAQ5D,UAAUyF,aAEnD7B,EAAQ6C,SAAWxH,EAEnB2E,EAAQiC,UAAYC,EAAmBlC,EAAS3E,GAElD2E,EAAQuD,0BAA2B,EAId,YAAjBuB,IACF9E,EAAQiC,UAAY,MAGtBjC,EAAQ4C,oBAAsB,KAG1BvB,EAAarB,KACfA,EAAQ6C,SAAWxH,EACnByG,EAAyB9B,GACzBA,EAAQiC,UAAY,KACpBjC,EAAQoB,aAAaR,aACrBZ,EAAQoB,aAAaZ,WAIvB2B,EAAoBnC,GAAS,GAAM,yCAInC,OAAOkD,EAAgBxI,IAAIiC,MAAMP,UAAUyF,2BAE5BxG,GACf,IAAM2E,EAAUkD,EAAgBxI,IAAIiC,MACpCqD,EAAQ5D,UAAUyF,aAAexG,EACjC2E,EAAQ4B,oBAAsB,KAC9BO,EAAoBnC,GAAS,GAAO,qCAKpC,GADAA,QAAUkD,EAAgBxI,IAAIiC,OACzBqD,QAAQmB,SACX,OAAOnB,QAAQ5D,UAAUoF,UAE3B,IAAM3G,EAAc8B,KAAK9B,YACnBsF,EACFH,QAAQoB,aAAepB,QAAQoB,aAAaJ,WAAa,KAQ7D,GAAoB,OAAhBnG,GAA8C,OAAtBmF,QAAQiC,WACjB,MAAf9B,EACF,MAAO,OAOT,GAAmB,SAAfA,GACuB,OAAtBH,QAAQiC,WAAqC,QAAf9B,EACjC,MAAO,SAQT,GAAmB,MAAftF,EAAqB,CACvB,GAAImF,QAAQ5D,UAAUyF,aAAe,GACjChH,GAAemF,QAAQ5D,UAAU+C,OAAOsD,YAAYC,SACtD,MAAO,WACT,GAAI1C,QAAQ5D,UAAUyF,aAAe,GAAKhH,GAAe,EACvD,MAAO,WAIX,MAAO,+CAKP,OAAOqI,EAAgBxI,IAAIiC,MAAMP,UAAUmG,wCAI3C,IAAMvC,EAAUkD,EAAgBxI,IAAIiC,MACpC,OAAIqD,EAAQmB,SACHnB,EAAQoB,cAAgD,WAAhCpB,EAAQoB,aAAaf,QAE/CL,EAAQ5D,UAAUmG,mCAqfzB,OAAOW,EAAgBxI,IAAIiC,MAAMP,UAAU2I,oCA+B3C,OAAO7B,EAAgBxI,IAAIiC,MAAMP,UAAU4I,uBAEhC3J,GACX6H,EAAgBxI,IAAIiC,MAAMP,UAAU4I,SAAW3J,mCAG/C,OAAO6H,EAAgBxI,IAAIiC,MAAMP,UAAU6I,uBAEhC5J,GACX6H,EAAgBxI,IAAIiC,MAAMP,UAAU6I,SAAW5J,mCAG/C,OAAO6H,EAAgBxI,IAAIiC,MAAMP,UAAU8I,uBAEhC7J,GACX6H,EAAgBxI,IAAIiC,MAAMP,UAAU8I,SAAW7J,mCAI/C,IAAM2E,EAAUkD,EAAgBxI,IAAIiC,MACpC,OAAKqD,EAAQmB,UAGRnB,EAAQ0B,kBACXJ,EAAsBtB,GACA,YAAlBrD,KAAK6E,WACPxB,EAAQmF,gBAAgB3E,WAErBR,EAAQ0B,iBAPL1B,EAAQ5D,UAAUgJ,uCAW5B,IAAMpF,EAAUkD,EAAgBxI,IAAIiC,MACpC,OAAKqD,EAAQmB,UAGRnB,EAAQoB,eACXrB,EAAmBC,GACnBA,EAAQoB,aAAaZ,WAEhBR,EAAQoB,cANNpB,EAAQ5D,UAAUiJ,eC7mC3BC,EAAsB,IAAIrL,QASxBsL,EAAa,CAEjB,CAAC,CANS,EACE,EACC,EACF,IAKX,CACE,CATQ,EAEG,GAQX,CATU,EAED,IAUX,CAAC,CAbS,GAaF,CAZI,EAED,GAUY,CAXV,IAab,CAAC,CAfS,GAeF,CAdI,GAcK,CAbJ,GAac,CAZhB,KAePC,aACJ,WAAYnK,GACViK,EAAoB5I,IAAIC,KAAM,CAC5B8I,OAAQ,KACRC,KAAM,QACNC,UAAW,EACXC,WAAY,CACV,CAAC,EAAG,MACJ,CAAC,EAAG,MACJ,CAAC,EAAG,MACJ,CAAC,EAAG,SAGRjJ,KAAK8I,OAASpK,EAAMoK,OACpB9I,KAAK+I,KAAOrK,EAAMqK,MAAQ,QAC1B/I,KAAKgJ,UAAYtK,EAAMsK,WAAa,EACpChJ,KAAKiJ,WAAavK,EAAMuK,YAAc,kBACtCjJ,KAAKkJ,MAAQxK,EAAMwK,QAAS,yCAGnB1I,GACT,KAAMA,aAAmBuC,SAEvB,MADA4F,EAAoB5K,IAAIiC,MAAM8I,OAAS,KACjCK,MAAM,2CAEdR,EAAoB5K,IAAIiC,MAAM8I,OAAStI,kBAIvC,OAAOmI,EAAoB5K,IAAIiC,MAAM8I,kCAG9BpK,IACiC,GAApC,CAAC,QAAS,OAAOkC,QAAQlC,KAC7BiK,EAAoB5K,IAAIiC,MAAM+I,KAAOrK,mBAIrC,OAAOiK,EAAoB5K,IAAIiC,MAAM+I,qCAGzBrK,GACZ,IAAIsK,EAAYI,WAAW1K,GAE3B,GAAIsK,GAAaA,EACf,MAAM5J,UAAU,sBAIlB,GAAI4J,EAAY,GAAKA,EAAY,EAC/B,MAAM5J,UAAU,yCAClBuJ,EAAoB5K,IAAIiC,MAAMgJ,UAAYA,kBAI1C,OAAOL,EAAoB5K,IAAIiC,MAAMgJ,2CAGxBtK,GACb,IAAI2K,EAAU3K,EAAM4K,MAAM,MAC1B,GAAID,EAAQrL,OAAS,GAAKqL,EAAQrL,OAAS,EACzC,MAAMoB,UACJ,6DAGJ,IADA,IAAImK,EAAgB,CAAC,GAAI,GAAI,GAAI,IACxBpL,EAAI,EAAGA,EAAIkL,EAAQrL,OAAQG,IAAK,CACvC,IAAIqL,EAAc7M,EAAY0M,EAAQlL,IAAI,GAC1C,IAAKqL,EAAa,MAAMpK,UAAU,kCAElC,IADA,IAAIqK,EAAYb,EAAWS,EAAQrL,OAAS,GAAGG,GACtCuL,EAAI,EAAGA,EAAID,EAAUzL,OAAQ0L,IACpCH,EAAcE,EAAUC,IAAM,CAC5BN,WAAWI,EAAY9K,OACvB8K,EAAYrK,MAIlBwJ,EAAoB5K,IAAIiC,MAAMiJ,WAAaM,kBAK3C,OAAOZ,EAAoB5K,IAAIiC,MAC5BiJ,WAAWU,IAAI,SAACC,GACf,OAAOA,EAAOC,KAAK,MAEpBA,KAAK,iCAGAnL,GAGRiK,EAAoB5K,IAAIiC,MAAMkJ,QAAUxK,WCxG5C,GHmDEnB,EAA+BqC,KAAK,CAClCqB,MEwDJ,SAA4BvC,GAC1B,GAAIA,EAAMoK,OAAQ,WAAWD,EAAwBnK,IFxDnDwC,SEkEJ,SAAgCzD,EAAcc,EAAaC,EAAQsL,GAE9C,SAAfvL,EAAwBA,EAAc,WAClB,UAAfA,IAAyBA,EAAc,cAgBhD,IAfA,IAXqBP,EAWjB+L,EACFtM,GAAgBC,SAASC,iBACrB,CACEqM,KAAM,EACNC,MAAOxM,EAAasB,YACpBmL,IAAK,EACLC,OAAQ1M,EAAaoB,aACrBuL,MAAO3M,EAAasB,YACpBsL,OAAQ5M,EAAaoB,cAEvBpB,EAAa6M,wBAGff,EAAgBZ,EAAoB5K,IAAIS,GAAQyK,WAChDsB,EAAkB,GACbpM,EAAI,EAAGA,EAAI,EAAGA,IACrBoM,EAAgB3K,KA1BD,YADI5B,EA6BfuL,EAAcpL,IA5BT,GAAyBH,EAAO,IA6BrCG,EAAI,GAAK,EAAI4L,EAAiBM,OAASN,EAAiBK,OA7BG,IAG1DpM,EAAO,IA8Bd,IAAIwM,EACIT,EAAiBC,KAAOO,EArJrB,GAoJPC,EAIAT,EAAiBE,MACjBF,EAAiBC,KACjBO,EA1JO,GA2JPA,EA7JQ,GAsJRC,EAQGT,EAAiBG,IAAMK,EA/JpB,GAuJNC,EAWAT,EAAiBI,OACjBJ,EAAiBG,IACjBK,EApKM,GAqKNA,EAnKS,GAsKTE,EAAU9B,EAAoB5K,IAAIS,GAAQ0K,MAC1CJ,EAAStK,EAAOsK,OAAOwB,wBACvBtB,EAAYxK,EAAOwK,UAIvB,GAFmB,SAAfxK,EAAOuK,OAAiBC,EAAY,EAAIA,GAEzB,YAAfzK,EAA2B,CAC7B,IAAImM,EACF5B,EAAOoB,IACPpB,EAAOuB,OAASrB,EAChBwB,EACA/M,EAAa0E,UACf,OAAIsI,EACiB,OAAfjM,EAAOuK,KAAsBzG,KAAKC,IAAI,EAAGmI,EAAQF,GAC9ClI,KAAKqI,IAAID,EAAOjN,EAAamB,aAAe4L,GAEhC,OAAfhM,EAAOuK,KAAsB2B,EAAQF,EAClCE,EAIT,IAAIA,EACF5B,EAAOkB,KACPlB,EAAOsB,MAAQpB,EACfwB,EACA/M,EAAa2E,WACf,OAAIqI,EACiB,OAAfjM,EAAOuK,KAAsBzG,KAAKC,IAAI,EAAGmI,EAAQF,GAC9ClI,KAAKqI,IAAID,EAAOjN,EAAaqB,YAAc0L,GAE/B,OAAfhM,EAAOuK,KAAsB2B,EAAQF,EAClCE,MCjMVE,QAAQC,eAAe/H,OAAQ,iBAAkB,CAAEpE,MAAOmB,IAE3D,MAAMsJ,MACJ,uFAIJ,IAAKyB,QAAQC,eAAe9H,QAAQC,UAAW,UAAW,CAAEtE,MFmmC3D,SAEuBoM,EAAWhL,GACjC,IAAM0E,EAAW1E,EAAQ0E,SACrBA,aAAoB3E,UACfC,EAAQ0E,SAEjB,IAAM/E,EAAYoD,EAAqBkI,MAAM/K,KAAM,CAAC8K,EAAWhL,IACzDkL,EAAiB,IAAIvE,EAAehH,EAAW+E,GAOrD,OALIA,aAAoB3E,IACtBJ,EAAU6G,QACV0E,EAAe9D,QAGV8D,KEjnCP,MAAM7B,MACJ,6FAGJ,IAAKyB,QAAQC,eAAe/H,OAAQ,YAAa,CAACpE,MAAO+H,IACvD,MAAM0C,MAAM"}