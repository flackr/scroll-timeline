{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/intersection-based-offset.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["export function parseLength(obj, acceptStr) {\n  if (obj instanceof CSSUnitValue || obj instanceof CSSMathSum)\n    return obj;\n  if (!acceptStr)\n    return null;\n  let matches = obj.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if (matches) {\n    let value = matches[1];\n    // The unit for % is percent.\n    let unit = matches[2] == '%' ? 'percent' : matches[2];\n    return new CSSUnitValue(value, unit);\n  }\n  return null;\n}\n","// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  validateSource(scrollTimelineInstance);\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical orientation.\n * @param scrollTimeline {ScrollTimeline}\n * @param orientation {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, orientation) {\n  if (!source)\n    return null;\n\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (orientation == 'horizontal' ||\n     (orientation == 'inline' && horizontalWritingMode) ||\n     (orientation == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Enables the usage of custom parser and evaluator function, utilized by intersection based offset.\n * @param parseFunction {Function}\n * @param evaluateFunction {Function}\n * @returns {Array} all currently installed parsers\n */\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction,\n  });\n  return extensionScrollOffsetFunctions;\n}\n\n/**\n * Calculates scroll offset based on orientation and source geometry\n * @param source {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, orientation) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(source).writingMode == 'horizontal-tb';\n  if (orientation === \"block\")\n    orientation = horizontalWritingMode ? \"vertical\" : \"horizontal\";\n  else if (orientation === \"inline\")\n    orientation = horizontalWritingMode ? \"horizontal\" : \"vertical\";\n  if (orientation === \"vertical\")\n    return source.scrollHeight - source.clientHeight;\n  else if (orientation === \"horizontal\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\n// Detects if the cached source is obsolete, and updates if required\n// to ensure the new source has a scroll listener.\nfunction validateSource(timeline) {\n  if (!(timeline instanceof ViewTimeline))\n    return;\n\n  const node = timeline.subject;\n  if (!node) {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const display  = getComputedStyle(node).display;\n  if (display == 'none') {\n    updateSource(timeline, null);\n    return;\n  }\n\n  const source = getScrollParent(node.parentNode);\n  updateSource(timeline, source);\n}\n\nfunction updateSource(timeline, source) {\n  const oldSource = scrollTimelineOptions.get(timeline).source;\n  if (oldSource == source)\n    return;\n\n  const listener = () => {\n    updateInternal(timeline);\n  };\n  if (oldSource)\n    scrollEventSource(oldSource).removeEventListener(\"scroll\", listener);\n  scrollTimelineOptions.get(timeline).source = source;\n  if (source)\n    scrollEventSource(source).addEventListener(\"scroll\", listener);\n}\n\nexport function calculateScrollOffset(\n  autoValue,\n  source,\n  orientation,\n  offset,\n  fn\n) {\n  if (fn)\n    return fn(\n      source,\n      orientation,\n      offset,\n      autoValue.value == 0 ? \"start\" : \"end\"\n    );\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n\n  let maxValue =\n    orientation === \"vertical\"\n      ? source.scrollHeight - source.clientHeight\n      : source.scrollWidth - source.clientWidth;\n  let parsed = parseLength(offset === AUTO ? autoValue : offset);\n  return resolvePx(parsed, maxValue);\n}\n\n/**\n * Resolve scroll offsets per\n * https://drafts.csswg.org/scroll-animations-1/#effective-scroll-offsets-algorithm\n * @param source {DOMElement}\n * @param orientation {String}\n * @param scrollOffsets {Array}\n * @param fns {Array}\n * @returns {Array}\n */\nexport function resolveScrollOffsets(\n  source,\n  orientation,\n  scrollOffsets,\n  fns\n) {\n  // 1. Let effective scroll offsets be an empty list of effective scroll\n  // offsets.\n  let effectiveScrollOffsets = [];\n  // 2. Let first offset be true.\n  let firstOffset = true;\n\n  // 3. If scrollOffsets is empty\n  if(scrollOffsets.length == 0) {\n    // 3.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 3.2 Set first offset to false.\n    firstOffset = false;\n    // 3.3 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(100, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n  }\n  // 4. If scrollOffsets has exactly one element\n  else if(scrollOffsets.length == 1) {\n    // 4.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 4.2 Set first offset to false.\n    firstOffset = false;\n  }\n  // 5. For each scroll offset in the list of scrollOffsets, perform the\n  // following steps:\n  for (let i = 0; i < scrollOffsets.length; i++) {\n    // 5.1 Let effective offset be the result of applying the procedure\n    // to resolve a scroll timeline offset for scroll offset with the is\n    // first flag set to first offset.\n    let effectiveOffset = calculateScrollOffset(\n      firstOffset ? new CSSUnitValue(0, 'percent') : new CSSUnitValue(100, 'percent'),\n      source,\n      orientation,\n      scrollOffsets[i],\n      fns[i]);\n    //  5.2 If effective offset is null, the effective scroll offsets is empty and abort the remaining steps.\n    if(effectiveOffset === null)\n      return [];\n    // 5.3 Add effective offset into effective scroll offsets.\n    effectiveScrollOffsets.push(effectiveOffset);\n    // 5.4 Set first offset to false.\n    firstOffset = false;\n  }\n  // 6. Return effective scroll offsets.\n  return effectiveScrollOffsets;\n}\n\n/**\n * Compute scroll timeline progress per\n * https://drafts.csswg.org/scroll-animations-1/#progress-calculation-algorithm\n * @param offset {number}\n * @param scrollOffsets {Array}\n * @returns {number}\n */\nexport function ComputeProgress(\n  offset,\n  scrollOffsets\n) {\n  // 1. Let scroll offsets be the result of applying the procedure to resolve\n  // scroll timeline offsets for scrollOffsets.\n  // 2. Let offset index correspond to the position of the last offset in\n  // scroll offsets whose value is less than or equal to offset and the value\n  // at the following position greater than offset.\n  let offsetIndex;\n  for (offsetIndex = scrollOffsets.length - 2;\n       offsetIndex >= 0 && \n         !(scrollOffsets[offsetIndex] <= offset && offset < scrollOffsets[offsetIndex + 1]);\n       offsetIndex--) {\n  }\n  // 3. Let start offset be the offset value at position offset index in\n  // scroll offsets.\n  let startOffset = scrollOffsets[offsetIndex];\n  // 4. Let end offset be the value of next offset in scroll offsets after\n  // start offset.\n  let endOffset = scrollOffsets[offsetIndex + 1];\n  // 5. Let size be the number of offsets in scroll offsets.\n  let size = scrollOffsets.length;\n  // 6. Let offset weight be the result of evaluating 1 / (size - 1).\n  let offsetWeight = 1 / (size - 1);\n  // 7. Let interval progress be the result of evaluating\n  // (offset - start offset) / (end offset - start offset).\n  let intervalProgress =  (offset - startOffset) / (endOffset - startOffset);\n  // 8. Return the result of evaluating\n  // (offset index + interval progress) × offset weight.\n  return (offsetIndex + intervalProgress) * offsetWeight;\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      orientation: \"block\",\n      scrollOffsets: [],\n\n      // View timeline\n      subject: null,\n\n      // Internal members\n      animations: [],\n      scrollOffsetFns: []\n    });\n    const source =\n      options && options.source !== undefined ? options.source\n                                              : document.scrollingElement;\n    updateSource(this, source);\n    this.orientation = (options && options.orientation) || \"block\";\n    this.scrollOffsets = options && options.scrollOffsets !== undefined ? options.scrollOffsets : [];\n    updateInternal(this);\n  }\n\n  set source(element) {\n    updateSource(this, element);\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set scrollOffsets(value) {\n    let offsets = [];\n    let fns = [];\n    for (let input of value) {\n      let fn = null;\n      let offset = undefined;\n      if (input == \"auto\")\n        input = AUTO;\n      for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n        let result = extensionScrollOffsetFunctions[i].parse(input);\n        if (result !== undefined) {\n          offset = result;\n          fn = extensionScrollOffsetFunctions[i].evaluate;\n          break;\n        }\n      }\n      if (!fn) {\n        if (input != AUTO) {\n          let parsed = parseLength(input);\n          // TODO: This should check CSSMathSum values as well.\n          if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n            throw TypeError(\"Invalid scrollOffsets entry.\");\n        }\n        offset = input;\n      }\n      offsets.push(offset);\n      fns.push(fn);\n    }\n    if (offsets.length == 1 && offsets[0] == AUTO)\n      throw TypeError(\"Invalid scrollOffsets value.\");\n    let data = scrollTimelineOptions.get(this);\n    data.scrollOffsets = offsets;\n    data.scrollOffsetFns = fns;\n    updateInternal(this);\n  }\n\n  get scrollOffsets() {\n    let data = scrollTimelineOptions.get(this);\n    return data.scrollOffsets;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    let unresolved = null;\n    //   if source is null\n    if (!this.source) return \"inactive\";\n    let scrollerStyle = getComputedStyle(this.source);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (this.source != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n\n    //   if source's effective scroll range is null\n    if (effectiveScrollOffsets.length == 0)\n      return \"inactive\";\n\n    let maxOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.source,\n      this.orientation,\n      new CSSUnitValue(100, 'percent'),\n      null\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return \"before\";\n    if (currentScrollOffset >= endOffset && endOffset < maxOffset)\n      return \"after\";\n    return \"active\"\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.source) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return CSS.percent(0);\n\n    // Step 4\n    if (currentScrollOffset >= endOffset)\n      return CSS.percent(100);\n\n    // Step 5\n    let progress = ComputeProgress(\n      currentScrollOffset,\n      effectiveScrollOffsets\n    );\n    return CSS.percent(100 * progress);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n\nfunction getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  if (!(node instanceof HTMLElement)) {\n     return node.parentNode ? getScrollParent(node.parentNode)\n                            : document.scrollingElement;\n  }\n\n  const style = getComputedStyle(node);\n  switch(style['overflow-x']) {\n    case 'auto':\n    case 'scroll':\n    case 'hidden':\n      return node;\n\n    default:\n      return getScrollParent(node.parentNode);\n  }\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\n// TODO: Track changes to determine when associated animations require their\n// timing to be renormalized.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline))\n    return unresolved;\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  let top = 0;\n  let left = 0;\n  let node = target;\n  const ancestor = container.offsetParent;\n  while (node && node != ancestor) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n  left -= container.offsetLeft + container.clientLeft;\n  top -= container.offsetTop + container.clientTop;\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl' || style.writingMode == 'vertical-rl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  const orientation = details.orientation;\n  if (orientation == 'horizontal' ||\n      (orientation == 'inline' && horizontalWritingMode) ||\n      (orientation == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const scrollPos = directionAwareScrollOffset(container, orientation);\n  let startOffset = undefined;\n  let endOffset = undefined;\n\n  switch(phase) {\n    case 'cover':\n      // Range of scroll offsets where the subject element intersects the\n      // source's viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize;\n      break;\n\n    case 'contain':\n      // Range of scroll offsets where the subject element is fully inside of\n      // the container's viewport. If the subject's bounds exceed the size\n      // of the viewport in the scroll direction then the scroll range is\n      // empty.\n      startOffset = viewPos + viewSize - containerSize;\n      endOffset = viewPos;\n      break;\n\n    case 'enter':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-start edge of the viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize - containerSize;\n      break;\n\n    case 'exit':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-end edge of the viewport.\n      startOffset = viewPos;\n      endOffset = viewPos + viewSize;\n      break;\n  }\n\n  // TODO: Clamping of offsets is not specced. Update once ratified.\n  const maxOffset = calculateMaxScrollOffset(container, orientation);\n  startOffset = Math.max(0, startOffset);\n  endOffset = Math.min(maxOffset, endOffset);\n\n  return { start: startOffset, end: endOffset };\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  if (!phaseRange || !coverRange)\n    return 0;\n\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/rewrite#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n    if (options.axis) {\n      // Orientation called axis for a view timeline. Internally we can still\n      // call this orientation, since the internal naming is not exposed.\n      options.orientation = options.axis;\n    }\n    super(options);\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n\n    validateSource(this);\n    updateInternal(this);\n  }\n\n  get source() {\n    validateSource(this);\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set source(source) {\n    throw new Error(\"Cannot set the source of a view timeline\");\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The orientation is called \"axis\" for a view timeline.\n  // Internally we still call it orientation.\n  get axis() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get phase() {\n    if (!this.subject)\n      return \"inactive\";\n\n    const container = this.source;\n    if (!container)\n      return \"inactive\";\n\n    let scrollerStyle = getComputedStyle(container);\n\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    return \"active\";\n  }\n\n  get currentTime() {\n    const unresolved = null;\n    const scrollPos = directionAwareScrollOffset(this.source, this.orientation);\n    if (scrollPos == unresolved)\n      return unresolved;\n\n    const offsets = range(this, 'cover');\n    if (!offsets)\n      return unresolved;\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  installScrollOffsetExtension,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  if (details.startTime !== null) {\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n    if (timelineTime == null)\n      return;\n\n    setNativeCurrentTime(details,\n                         (timelineTime - details.startTime) *\n                             details.animation.playbackRate);\n  } else if (details.holdTime !== null) {\n    setNativeCurrentTime(details, details.holdTime);\n  }\n}\n\n// Sets the time of the underlying animation, nudging the time slightly if at\n// a scroll-timeline boundary to remain in the active phase.\nfunction setNativeCurrentTime(details, time) {\n  const timeline = details.timeline;\n  const atScrollTimelineBoundary =\n      timeline.currentTime.value == (this.playbackRate < 0 ? 0 : 100);\n  const delta =\n      atScrollTimelineBoundary ? (this.playbackRate < 0 ? 0.001 : -0.001) : 0;\n\n  details.animation.currentTime = time + delta;\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0;\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    const timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    setNativeCurrentTime(\n        details,\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate);\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime =\n      details.timelineStartTime || { phase: 'cover', percent: CSS.percent(0) };\n  return relativePosition(details.timeline, startTime.phase, startTime.percent);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime =\n      details.timelineEndTime || { phase: 'cover', percent: CSS.percent(100) };\n  return 1 - relativePosition(details.timeline, endTime.phase, endTime.percent);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline.  The default range is cover 0% to\n      // 100%.\n      timelineStartTime: null,\n      timelineEndTime: null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\nfunction parseViewTimelineTime(value, defaultPercentage) {\n  const PHASE_INDEX = 1;\n  const PERCENT_INDEX = 3;\n\n  if (!value)\n    return null;\n\n  const match = /(\\w+)\\s+((\\-?\\d+)%)?/.exec(value);\n  if (!match)\n    return null;\n\n  const phase = match[PHASE_INDEX];\n  const percent = parseFloat(match[PERCENT_INDEX] || defaultPercentage);\n\n  return { phase: phase, percent: CSS.percent(percent) };\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      details = proxyAnimations.get(proxyAnimation);\n      details.timelineStartTime = parseViewTimelineTime(options.startTime);\n      details.timelineEndTime = parseViewTimelineTime(options.endTime);\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [\n    [TOP, BOTTOM],\n    [RIGHT, LEFT],\n  ],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]],\n];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: \"start\",\n      threshold: 0,\n      rootMargin: [\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n      ],\n    });\n    this.target = value.target;\n    this.edge = value.edge || \"start\";\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || \"0px 0px 0px 0px\";\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error(\"Intersection target must be an element.\");\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if ([\"start\", \"end\"].indexOf(value) == -1) return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a TypeError for a parse error.\n    if (threshold != threshold)\n      throw TypeError(\"Invalid threshold.\");\n    // TODO(https://crbug.com/1136516): This should throw a RangeError\n    // consistent with the intersection observer spec but the current\n    // test expectations are looking for a TypeError.\n    if (threshold < 0 || threshold > 1)\n      throw TypeError(\"threshold must be in the range [0, 1]\");\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/);\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError(\n        \"rootMargin must contain between 1 and 4 length components\"\n      );\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i], true);\n      if (!parsedValue) throw TypeError(\"Unrecognized rootMargin length\");\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [\n          parseFloat(parsedValue.value),\n          parsedValue.unit,\n        ];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this)\n      .rootMargin.map((margin) => {\n        return margin.join(\"\");\n      })\n      .join(\" \");\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n}\n\nexport function parseOffset(value) {\n  if (value.target) return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == \"percent\") return (length[0] * containerSize) / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(source, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == \"block\") orientation = \"vertical\";\n  else if (orientation == \"inline\") orientation = \"horizontal\";\n  let originalViewport =\n    source == document.scrollingElement\n      ? {\n          left: 0,\n          right: source.clientWidth,\n          top: 0,\n          bottom: source.clientHeight,\n          width: source.clientWidth,\n          height: source.clientHeight,\n        }\n      : source.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(\n      resolveLength(\n        parsedMargins[i],\n        i % 2 == 0 ? originalViewport.height : originalViewport.width\n      )\n    );\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width:\n      originalViewport.right -\n      originalViewport.left +\n      computedMargins[LEFT] +\n      computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height:\n      originalViewport.bottom -\n      originalViewport.top +\n      computedMargins[TOP] +\n      computedMargins[BOTTOM],\n  };\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == \"start\") threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == \"vertical\") {\n    let point =\n      target.top +\n      target.height * threshold -\n      viewport.top +\n      source.scrollTop;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.height);\n      return Math.min(point, source.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.height;\n      return point;\n    }\n  } else {\n    // orientation == 'horizontal'\n    let point =\n      target.left +\n      target.width * threshold -\n      viewport.left +\n      source.scrollLeft;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.width);\n      return Math.min(point, source.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  SOURCE_ELEMENT: /selector\\(#([^)]+)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\n// 1 - Extracts @scroll-timeline and saves it in scrollTimelineOptions.\n// 2 - If we find any animation-timeline in any of the CSS Rules, \n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.scrollTimelineOptions = new Map(); // save options by name\n    this.keyframeNames = new Set();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // @scroll-timeline and @keyframe names, in the second pass\n  // we will parse other rules\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      if (this.lookAhead(\"@scroll-timeline\", p)) {\n        const { scrollTimeline, startIndex, endIndex } = this.parseScrollTimeline(p);\n        if (firstPass) this.scrollTimelineOptions.set(scrollTimeline.name, scrollTimeline);\n      } else {\n        const rule = this.parseQualifiedRule(p);\n        if (!rule) continue;\n        if (firstPass) {\n          this.extractAndSaveKeyframeName(rule.selector);\n        } else {\n          this.handleScrollTimelineProps(rule, p);\n        }\n      }\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getScrollTimelineName(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return current['animation-timeline'];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseScrollTimeline(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"@scroll-timeline\");\n    this.eatWhitespace(p);\n    let name = this.parseIdentifier(p);\n    this.eatWhitespace(p);\n    this.assertString(p, \"{\"); // eats {\n    this.eatWhitespace(p);\n\n    let scrollTimeline = {\n      name: name,\n      source: \"auto\",\n      orientation: undefined,\n    };\n\n    while (this.peek(p) !== \"}\") {\n      const property = this.parseIdentifier(p);\n      this.eatWhitespace(p);\n      this.assertString(p, \":\");\n      this.eatWhitespace(p);\n      scrollTimeline[property] = this.removeEnclosingDoubleQuotes(this.eatUntil(\";\", p));\n      this.assertString(p, \";\");\n      this.eatWhitespace(p);\n    }\n\n    this.assertString(p, \"}\");\n    const endIndex = p.index;\n    this.eatWhitespace(p);\n    return {\n      scrollTimeline,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    let timelineNames = [];\n    let animationNames = [];\n\n    if (hasAnimationTimeline) {\n      timelineNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIMELINE);\n    }\n\n    if (hasAnimationName) {\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n    }\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n          const timelineName = this.extractTimelineName(shorthand);\n          if (animationName) animationNames.push(animationName);\n          if (timelineName) {\n            timelineNames.push(timelineName);\n            // Remove timeline name from animation shorthand\n            // so the native implementation works with the rest of the properties\n            // Retain length of original name though, to play nice with multiple\n            // animations that might have been applied\n            rule.block.contents = rule.block.contents.replace(\n              timelineName,\n              \" \".repeat(timelineName.length)\n            );\n            this.replacePart(\n              rule.block.startIndex,\n              rule.block.endIndex,\n              rule.block.contents,\n              p\n            );\n          }\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(timelineName || hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                \"animation:\",\n                \"animation: 1s \"\n              );\n              this.replacePart(\n                rule.block.startIndex,\n                rule.block.endIndex,\n                rule.block.contents,\n                p\n              );\n            }\n          }\n        });\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    if (animationNames.length == 0) {\n      for (let i = 0; i < timelineNames.length; i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': undefined,\n          'animation-timeline': timelineNames[i]\n        });\n      }\n    } else {\n      for (let i = 0; i < Math.max(timelineNames.length, animationNames.length); i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': animationNames[i % animationNames.length],\n          'animation-timeline': timelineNames[i % timelineNames.length]\n        });\n      }\n    }\n\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNames);\n  }\n\n  extractTimelineName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.scrollTimelineOptions);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  /**\n   * @param {String} selector contains everything upto '{', eg: \"@keyframes expand\"\n   */\n  extractAndSaveKeyframeName(selector) {\n    if (selector.startsWith(\"@keyframes\")) {\n      selector.split(\" \").forEach((item, index) => {\n        if (index > 0) {\n          this.keyframeNames.add(item);\n        }\n      })\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  eatUntil(s, p) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher) {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(\",\").map(item => item.trim());\n  }\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser, RegexMatcher } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\n// This implementation is based on https://drafts.csswg.org/scroll-animations-1/\n// TODO: Should update accordingly when new spec lands.\nfunction getSourceElement(source) {\n  const matches = RegexMatcher.SOURCE_ELEMENT.exec(source);\n  const SOURCE_CAPTURE_INDEX = 1;\n  if (matches) {\n    return document.getElementById(matches[SOURCE_CAPTURE_INDEX]);\n  } else if (source === \"auto\") {\n    return document.scrollingElement;\n  } else {\n    return null;\n  }\n}\n\nfunction isDescendant(child, parent) {\n  while (child) {\n    if (child == parent) return true;\n    child = child.parentNode;\n  }\n  return false;\n}\n\nfunction createScrollTimeline(name) {\n  const options = parser.scrollTimelineOptions.get(name);\n  if (!options) return null;\n\n  const sourceElement = getSourceElement(options.source);\n\n  const scrollTimeline = new ScrollTimeline({\n    ...(sourceElement ? { source: getSourceElement(options.source) } : {}),\n    ...(options.orientation != \"auto\" ? { orientation: options.orientation } : {}),\n  });\n  return scrollTimeline;\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: works\")) {\n    return;\n  }\n\n  initMutationObserver();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      const timelineName = parser.getScrollTimelineName(anim.animationName, evt.target);\n      if (timelineName) {\n        const scrollTimeline = createScrollTimeline(timelineName);\n        if (anim.timeline != scrollTimeline) {\n          const proxyAnimation = new ProxyAnimation(anim, scrollTimeline);\n          anim.pause();\n          proxyAnimation.play();\n        }\n      }\n    });\n  });\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n  installScrollOffsetExtension\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { calculateOffset, parseOffset } from \"./intersection-based-offset\";\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\ninitCSSPolyfill();\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\nif (\n  !Reflect.defineProperty(window, \"ViewTimeline\", { value: ViewTimeline })\n) {\n  throw Error(\n    \"Error installing ViewTimeline polyfill: could not attach ViewTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["parseLength","obj","acceptStr","CSSUnitValue","CSSMathSum","matches","trim","match","_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","AUTO","scrollTimelineOptions","extensionScrollOffsetFunctions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","validateSource","animations","timelineTime","currentTime","tickAnimation","directionAwareScrollOffset","orientation","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","resolvePx","cssValue","resolvedLength","TypeError","_step","total","_iterator","done","timeline","ViewTimeline","node","subject","display","updateSource","getScrollParent","parentNode","oldSource","listener","removeEventListener","addEventListener","calculateScrollOffset","autoValue","offset","fn","maxValue","scrollHeight","clientHeight","scrollWidth","clientWidth","resolveScrollOffsets","scrollOffsets","fns","effectiveScrollOffsets","firstOffset","push","effectiveOffset","removeAnimation","scrollTimeline","animation","splice","addAnimation","ScrollTimeline","options","scrollOffsetFns","undefined","element","indexOf","offsets","input","_step2","parse","evaluate","parsed","data","percent","scrollerStyle","overflow","maxOffset","startOffset","endOffset","phase","progress","ComputeProgress","offsetIndex","HTMLElement","range","container","target","top","left","ancestor","offsetParent","offsetLeft","offsetTop","clientLeft","clientTop","style","viewSize","viewPos","containerSize","direction","calculateMaxScrollOffset","start","max","end","min","relativePosition","phaseRange","coverRange","_this","axis","_assertThisInitialized","unresolved","scrollPos","nativeElementAnimate","Element","animate","nativeAnimation","Animation","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","effect","getTiming","normalizedTiming","delay","endDelay","iterations","setNativeCurrentTime","time","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animationTimeline","isScrollAnimation","specifiedTiming","timelineStartTime","timelineEndTime","_proto2","finish","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","callback","event","nativeUpdateTiming","updateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","assign","computedDelays","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","parseViewTimelineTime","defaultPercentage","exec","parseFloat","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","edge","threshold","rootMargin","clamp","map","margin","margins","split","parsedMargins","parsedValue","positions","j","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","ANIMATION_TIMELINE","ANIMATION_NAME","ANIMATION","SOURCE_ELEMENT","parser","StyleParser","cssRulesWithTimelineName","Map","keyframeNames","Set","_proto","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","parseScrollTimeline","rule","parseQualifiedRule","extractAndSaveKeyframeName","selector","handleScrollTimelineProps","getScrollTimelineName","animationName","current","startIndex","assertString","parseIdentifier","peek","property","removeEnclosingDoubleQuotes","eatUntil","endIndex","includes","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","timelineNames","animationNames","extractMatches","shorthand","extractAnimationName","timelineName","extractTimelineName","replace","repeat","replacePart","hasDuration","saveRelationInList","filter","part","findMatchingEntryInContainer","has","lastIndex","parseError","_this2","startsWith","item","add","parseSelector","eatBlock","s","substring","substr","replacement","slice","level","advance","matcher","getSourceElement","getElementById","calculateOffset","startOrEnd","originalViewport","right","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","_createForOfIteratorHelperLoose","entry","addedNodes","_iterator2","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","querySelectorAll","tag","initMutationObserver","evt","getAnimations","anim","sourceElement","createScrollTimeline","proxyAnimation","keyframes"],"mappings":"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"}