{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/proxy-cssom.js","../src/scroll-timeline-base.js","../src/proxy-animation.js","../src/intersection-based-offset.js","../src/scroll-timeline-css-parser.js","../src/scroll-timeline-css.js","../src/index.js"],"sourcesContent":["export function parseLength(obj, acceptStr) {\n  if (obj instanceof CSSUnitValue || obj instanceof CSSMathSum)\n    return obj;\n  if (!acceptStr)\n    return null;\n  let matches = obj.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if (matches) {\n    let value = matches[1];\n    // The unit for % is percent.\n    let unit = matches[2] == '%' ? 'percent' : matches[2];\n    return new CSSUnitValue(value, unit);\n  }\n  return null;\n}\n","// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function installCSSOM() {\n  // Object for storing details associated with an object which are to be kept\n  // private. This approach allows the constructed objects to more closely\n  // resemble their native counterparts when inspected.\n  let privateDetails = new WeakMap();\n\n  function displayUnit(unit) {\n    switch(unit) {\n      case 'percent':\n        return '%';\n      case 'number':\n        return '';\n      default:\n        return unit.toLowerCase();\n    }\n  }\n\n  function toCssUnitValue(v) {\n    if (typeof v === 'number')\n      return new CSSUnitValue(v, 'number');\n    return v;\n  }\n\n  function toCssNumericArray(values) {\n    const result = [];\n    for (let i = 0; i < values.length; i++) {\n      result[i] = toCssUnitValue(values[i]);\n    }\n    return result;\n  }\n\n  class MathOperation {\n    constructor(values, operator, opt_name, opt_delimiter) {\n      privateDetails.set(this, {\n        values: toCssNumericArray(values),\n        operator: operator,\n        name: opt_name || operator,\n        delimiter: opt_delimiter || ', '\n      });\n    }\n\n    get operator() {\n      return privateDetails.get(this).operator;\n    }\n\n    get values() {\n      return  privateDetails.get(this).values;\n    }\n\n    toString() {\n      const details = privateDetails.get(this);\n      return `${details.name}(${details.values.join(details.delimiter)})`;\n    }\n  }\n\n  const cssOMTypes = {\n    'CSSUnitValue': class {\n      constructor(value, unit) {\n        privateDetails.set(this, {\n          value: value,\n          unit: unit\n        });\n      }\n\n      get value() {\n        return privateDetails.get(this).value;\n      }\n\n      set value(value) {\n        privateDetails.get(this).value = value;\n      }\n\n      get unit() {\n        return  privateDetails.get(this).unit;\n      }\n\n      toString() {\n        const details = privateDetails.get(this);\n        return `${details.value}${displayUnit(details.unit)}`;\n      }\n    },\n\n    'CSSKeywordValue': class {\n      constructor(value) {\n        this.value = value;\n      }\n\n      toString() {\n        return this.value.toString();\n      }\n    },\n\n    'CSSMathSum': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'sum', 'calc', ' + ');\n      }\n    },\n\n    'CSSMathProduct': class extends MathOperation  {\n      constructor(values) {\n        super(arguments, 'product', 'calc', ' * ');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([arguments[0]], 'negate', '-');\n      }\n    },\n\n    'CSSMathNegate': class extends MathOperation {\n      constructor(values) {\n        super([1, arguments[0]], 'invert', 'calc', ' / ');\n      }\n    },\n\n    'CSSMathMax': class extends MathOperation {\n      constructor() {\n        super(arguments, 'max');\n      }\n    },\n\n    'CSSMathMin': class extends MathOperation  {\n      constructor() {\n        super(arguments, 'min');\n      }\n    }\n  };\n\n  if (!window.CSS) {\n    if (!Reflect.defineProperty(window, 'CSS', { value: {} }))\n      throw Error(`Error installing CSSOM support`);\n  }\n\n  if (!window.CSSUnitValue) {\n    [\n      'number',\n      'percent',\n      // Length units\n      'em',\n      'ex',\n      'px',\n      'cm',\n      'mm',\n      'in',\n      'pt',\n      'pc',  // Picas\n      'Q',  // Quarter millimeter\n      'vw',\n      'vh',\n      'vmin',\n      'vmax',\n      'rems',\n      \"ch\",\n      // Angle units\n      'deg',\n      'rad',\n      'grad',\n      'turn',\n      // Time units\n      'ms',\n      's',\n      'Hz',\n      'kHz',\n      // Resolution\n      'dppx',\n      'dpi',\n      'dpcm',\n      // Other units\n      \"fr\"\n    ].forEach((name) => {\n      const fn = (value) => {\n        return new CSSUnitValue(value, name);\n      };\n      if (!Reflect.defineProperty(CSS, name, { value: fn }))\n        throw Error(`Error installing CSS.${name}`);\n    });\n  }\n\n  for (let type in cssOMTypes) {\n    if (type in window)\n      continue;\n    if (!Reflect.defineProperty(window, type, { value: cssOMTypes[type] }))\n      throw Error(`Error installing CSSOM support for ${type}`);\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nimport { installCSSOM } from \"./proxy-cssom.js\";\ninstallCSSOM();\n\nconst AUTO = new CSSKeywordValue(\"auto\");\n\nlet scrollTimelineOptions = new WeakMap();\nlet extensionScrollOffsetFunctions = [];\n\nfunction scrollEventSource(source) {\n  if (source === document.scrollingElement) return document;\n  return source;\n}\n\n/**\n * Updates the currentTime for all Web Animation instanced attached to a ScrollTimeline instance\n * @param scrollTimelineInstance {ScrollTimeline}\n */\nfunction updateInternal(scrollTimelineInstance) {\n  const details = scrollTimelineOptions.get(scrollTimelineInstance);\n  let animations = details.animations;\n  if (animations.length === 0) return;\n  let timelineTime = scrollTimelineInstance.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    animations[i].tickAnimation(timelineTime);\n  }\n}\n\n/**\n * Calculates a scroll offset that corrects for writing modes, text direction\n * and a logical orientation.\n * @param scrollTimeline {ScrollTimeline}\n * @param orientation {String}\n * @returns {Number}\n */\nfunction directionAwareScrollOffset(source, orientation) {\n  const style = getComputedStyle(source);\n  // All writing modes are vertical except for horizontal-tb.\n  // TODO: sideways-lr should flow bottom to top, but is currently unsupported\n  // in Chrome.\n  // http://drafts.csswg.org/css-writing-modes-4/#block-flow\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  let currentScrollOffset  = source.scrollTop;\n  if (orientation == 'horizontal' ||\n     (orientation == 'inline' && horizontalWritingMode) ||\n     (orientation == 'block' && !horizontalWritingMode)) {\n    // Negative values are reported for scrollLeft when the inline text\n    // direction is right to left or for vertical text with a right to left\n    // block flow. This is a consequence of shifting the scroll origin due to\n    // changes in the overflow direction.\n    // http://drafts.csswg.org/cssom-view/#overflow-directions.\n    currentScrollOffset = Math.abs(source.scrollLeft);\n  }\n  return currentScrollOffset;\n}\n\n/**\n * Determines target effect end based on animation duration, iterations count and start and end delays\n *  returned value should always be positive\n * @param options {Animation} animation\n * @returns {number}\n */\nexport function calculateTargetEffectEnd(animation) {\n  return animation.effect.getComputedTiming().activeDuration;\n}\n\n/**\n * Enables the usage of custom parser and evaluator function, utilized by intersection based offset.\n * @param parseFunction {Function}\n * @param evaluateFunction {Function}\n * @returns {Array} all currently installed parsers\n */\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction,\n  });\n  return extensionScrollOffsetFunctions;\n}\n\n/**\n * Calculates scroll offset based on orientation and source geometry\n * @param source {DOMElement}\n * @param orientation {String}\n * @returns {number}\n */\nexport function calculateMaxScrollOffset(source, orientation) {\n  // Only one horizontal writing mode: horizontal-tb.  All other writing modes\n  // flow vertically.\n  const horizontalWritingMode =\n    getComputedStyle(source).writingMode == 'horizontal-tb';\n  if (orientation === \"block\")\n    orientation = horizontalWritingMode ? \"vertical\" : \"horizontal\";\n  else if (orientation === \"inline\")\n    orientation = horizontalWritingMode ? \"horizontal\" : \"vertical\";\n  if (orientation === \"vertical\")\n    return source.scrollHeight - source.clientHeight;\n  else if (orientation === \"horizontal\")\n    return source.scrollWidth - source.clientWidth;\n}\n\nfunction resolvePx(cssValue, resolvedLength) {\n  if (cssValue instanceof CSSUnitValue) {\n    if (cssValue.unit == \"percent\")\n      return cssValue.value * resolvedLength / 100;\n    else if (cssValue.unit == \"px\")\n      return cssValue.value;\n    else\n      throw TypeError(\"Unhandled unit type \" + cssValue.unit);\n  } else if (cssValue instanceof CSSMathSum) {\n    let total = 0;\n    for (let value of cssValue.values) {\n      total += resolvePx(value, resolvedLength);\n    }\n    return total;\n  }\n  throw TypeError(\"Unsupported value type: \" + typeof(cssValue));\n}\n\nexport function calculateScrollOffset(\n  autoValue,\n  source,\n  orientation,\n  offset,\n  fn\n) {\n  if (fn)\n    return fn(\n      source,\n      orientation,\n      offset,\n      autoValue.value == 0 ? \"start\" : \"end\"\n    );\n  // TODO: Support other writing directions.\n  if (orientation === \"block\") orientation = \"vertical\";\n  else if (orientation === \"inline\") orientation = \"horizontal\";\n\n  let maxValue =\n    orientation === \"vertical\"\n      ? source.scrollHeight - source.clientHeight\n      : source.scrollWidth - source.clientWidth;\n  let parsed = parseLength(offset === AUTO ? autoValue : offset);\n  return resolvePx(parsed, maxValue);\n}\n\n/**\n * Resolve scroll offsets per\n * https://drafts.csswg.org/scroll-animations-1/#effective-scroll-offsets-algorithm\n * @param source {DOMElement}\n * @param orientation {String}\n * @param scrollOffsets {Array}\n * @param fns {Array}\n * @returns {Array}\n */\nexport function resolveScrollOffsets(\n  source,\n  orientation,\n  scrollOffsets,\n  fns\n) {\n  // 1. Let effective scroll offsets be an empty list of effective scroll\n  // offsets.\n  let effectiveScrollOffsets = [];\n  // 2. Let first offset be true.\n  let firstOffset = true;\n\n  // 3. If scrollOffsets is empty\n  if(scrollOffsets.length == 0) {\n    // 3.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 3.2 Set first offset to false.\n    firstOffset = false;\n    // 3.3 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(100, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n  }\n  // 4. If scrollOffsets has exactly one element\n  else if(scrollOffsets.length == 1) {\n    // 4.1 Run the procedure to resolve a scroll timeline offset for auto with\n    // the is first flag set to first offset and add the resulted value into\n    // effective scroll offsets.\n    effectiveScrollOffsets.push(\n      calculateScrollOffset(\n        new CSSUnitValue(0, 'percent'),\n        source,\n        orientation,\n        AUTO\n    ));\n    // 4.2 Set first offset to false.\n    firstOffset = false;\n  }\n  // 5. For each scroll offset in the list of scrollOffsets, perform the\n  // following steps:\n  for (let i = 0; i < scrollOffsets.length; i++) {\n    // 5.1 Let effective offset be the result of applying the procedure\n    // to resolve a scroll timeline offset for scroll offset with the is\n    // first flag set to first offset.\n    let effectiveOffset = calculateScrollOffset(\n      firstOffset ? new CSSUnitValue(0, 'percent') : new CSSUnitValue(100, 'percent'),\n      source,\n      orientation,\n      scrollOffsets[i],\n      fns[i]);\n    //  5.2 If effective offset is null, the effective scroll offsets is empty and abort the remaining steps.\n    if(effectiveOffset === null)\n      return [];\n    // 5.3 Add effective offset into effective scroll offsets.\n    effectiveScrollOffsets.push(effectiveOffset);\n    // 5.4 Set first offset to false.\n    firstOffset = false;\n  }\n  // 6. Return effective scroll offsets.\n  return effectiveScrollOffsets;\n}\n\n/**\n * Compute scroll timeline progress per\n * https://drafts.csswg.org/scroll-animations-1/#progress-calculation-algorithm\n * @param offset {number}\n * @param scrollOffsets {Array}\n * @returns {number}\n */\nexport function ComputeProgress(\n  offset,\n  scrollOffsets\n) {\n  // 1. Let scroll offsets be the result of applying the procedure to resolve\n  // scroll timeline offsets for scrollOffsets.\n  // 2. Let offset index correspond to the position of the last offset in\n  // scroll offsets whose value is less than or equal to offset and the value\n  // at the following position greater than offset.\n  let offsetIndex;\n  for (offsetIndex = scrollOffsets.length - 2;\n       offsetIndex >= 0 && \n         !(scrollOffsets[offsetIndex] <= offset && offset < scrollOffsets[offsetIndex + 1]);\n       offsetIndex--) {\n  }\n  // 3. Let start offset be the offset value at position offset index in\n  // scroll offsets.\n  let startOffset = scrollOffsets[offsetIndex];\n  // 4. Let end offset be the value of next offset in scroll offsets after\n  // start offset.\n  let endOffset = scrollOffsets[offsetIndex + 1];\n  // 5. Let size be the number of offsets in scroll offsets.\n  let size = scrollOffsets.length;\n  // 6. Let offset weight be the result of evaluating 1 / (size - 1).\n  let offsetWeight = 1 / (size - 1);\n  // 7. Let interval progress be the result of evaluating\n  // (offset - start offset) / (end offset - start offset).\n  let intervalProgress =  (offset - startOffset) / (endOffset - startOffset);\n  // 8. Return the result of evaluating\n  // (offset index + interval progress) × offset weight.\n  return (offsetIndex + intervalProgress) * offsetWeight;\n}\n\n/**\n * Removes a Web Animation instance from ScrollTimeline\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param options {Object}\n */\nexport function removeAnimation(scrollTimeline, animation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation) {\n      animations.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Attaches a Web Animation instance to ScrollTimeline.\n * @param scrollTimeline {ScrollTimeline}\n * @param animation {Animation}\n * @param tickAnimation {function(number)}\n */\nexport function addAnimation(scrollTimeline, animation, tickAnimation) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  for (let i = 0; i < animations.length; i++) {\n    if (animations[i].animation == animation)\n      return;\n  }\n\n  animations.push({\n    animation: animation,\n    tickAnimation: tickAnimation\n  });\n  updateInternal(scrollTimeline);\n}\n\n// TODO: this is a private function used for unit testing add function\nexport function _getStlOptions(scrollTimeline) {\n  return scrollTimelineOptions.get(scrollTimeline);\n}\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      source: null,\n      orientation: \"block\",\n      scrollOffsets: [],\n\n      // Internal members\n      animations: [],\n      scrollOffsetFns: [],\n      range: null\n    });\n    this.source =\n      options && options.source !== undefined ? options.source : document.scrollingElement;\n    this.orientation = (options && options.orientation) || \"block\";\n    this.scrollOffsets = options && options.scrollOffsets !== undefined ? options.scrollOffsets : [];\n  }\n\n  set source(element) {\n    if (this.source)\n      scrollEventSource(this.source).removeEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    scrollTimelineOptions.get(this).source = element;\n    if (element) {\n      scrollEventSource(element).addEventListener(\"scroll\", () =>\n        updateInternal(this)\n      );\n    }\n    updateInternal(this);\n  }\n\n  get source() {\n    return scrollTimelineOptions.get(this).source;\n  }\n\n  set orientation(orientation) {\n    if (\n      [\"block\", \"inline\", \"horizontal\", \"vertical\"].indexOf(orientation) === -1\n    ) {\n      throw TypeError(\"Invalid orientation\");\n    }\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set scrollOffsets(value) {\n    let offsets = [];\n    let fns = [];\n    for (let input of value) {\n      let fn = null;\n      let offset = undefined;\n      if (input == \"auto\")\n        input = AUTO;\n      for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n        let result = extensionScrollOffsetFunctions[i].parse(input);\n        if (result !== undefined) {\n          offset = result;\n          fn = extensionScrollOffsetFunctions[i].evaluate;\n          break;\n        }\n      }\n      if (!fn) {\n        if (input != AUTO) {\n          let parsed = parseLength(input);\n          // TODO: This should check CSSMathSum values as well.\n          if (!parsed || (parsed instanceof CSSUnitValue && parsed.unit == \"number\"))\n            throw TypeError(\"Invalid scrollOffsets entry.\");\n        }\n        offset = input;\n      }\n      offsets.push(offset);\n      fns.push(fn);\n    }\n    if (offsets.length == 1 && offsets[0] == AUTO)\n      throw TypeError(\"Invalid scrollOffsets value.\");\n    let data = scrollTimelineOptions.get(this);\n    data.scrollOffsets = offsets;\n    data.scrollOffsetFns = fns;\n    updateInternal(this);\n  }\n\n  get scrollOffsets() {\n    let data = scrollTimelineOptions.get(this);\n    return data.scrollOffsets;\n  }\n\n  get duration() {\n    return CSS.percent(100);\n  }\n\n  get phase() {\n    // Per https://drafts.csswg.org/scroll-animations-1/#phase-algorithm\n    // Step 1\n    let unresolved = null;\n    //   if source is null\n    if (!this.source) return \"inactive\";\n    let scrollerStyle = getComputedStyle(this.source);\n\n    //   if source does not currently have a CSS layout box\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    //   if source's layout box is not a scroll container\"\n    if (this.source != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n\n    //   if source's effective scroll range is null\n    if (effectiveScrollOffsets.length == 0)\n      return \"inactive\";\n\n    let maxOffset = calculateScrollOffset(\n      new CSSUnitValue(100, 'percent'),\n      this.source,\n      this.orientation,\n      new CSSUnitValue(100, 'percent'),\n      null\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return \"before\";\n    if (currentScrollOffset >= endOffset && endOffset < maxOffset)\n      return \"after\";\n    return \"active\"\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.source) return unresolved;\n    if (this.phase == 'inactive')\n      return unresolved;\n\n    let effectiveScrollOffsets = resolveScrollOffsets(\n      this.source,\n      this.orientation,\n      this.scrollOffsets,\n      scrollTimelineOptions.get(this).scrollOffsetFns\n    );\n    let startOffset = effectiveScrollOffsets[0];\n    let endOffset = effectiveScrollOffsets[effectiveScrollOffsets.length - 1];\n\n    // Step 2\n    const currentScrollOffset =\n        directionAwareScrollOffset(this.source, this.orientation);\n\n    // Step 3\n    if (currentScrollOffset < startOffset)\n      return CSS.percent(0);\n\n    // Step 4\n    if (currentScrollOffset >= endOffset)\n      return CSS.percent(100);\n\n    // Step 5\n    let progress = ComputeProgress(\n      currentScrollOffset,\n      effectiveScrollOffsets\n    );\n    return CSS.percent(100 * progress);\n  }\n\n  get __polyfill() {\n    return true;\n  }\n}\n\nfunction getScrollParent(node) {\n  if (!node)\n    return undefined;\n\n  const style = getComputedStyle(node);\n  switch(style['overflow-x']) {\n    case 'auto':\n    case 'scroll':\n    case 'hidden':\n      return node;\n\n    default:\n      return getScrollParent(node.parentNode);\n  }\n}\n\n// ---- View timelines -----\n\n// Computes the scroll offsets corresponding to the [0, 100]% range for a\n// specific phase on a view timeline.\n// TODO: Track changes to determine when associated animations require their\n// timing to be renormalized.\nfunction range(timeline, phase) {\n  const details = scrollTimelineOptions.get(timeline);\n\n  const unresolved = null;\n  if (timeline.phase === 'inactive')\n    return unresolved;\n\n  if (!(timeline instanceof ViewTimeline))\n    return unresolved;\n\n  // Compute the offset of the top-left corner of subject relative to\n  // top-left corner of the container.\n  const container = timeline.source;\n  const target = timeline.subject;\n\n  let top = 0;\n  let left = 0;\n  let node = target;\n  const ancestor = container.offsetParent;\n  while (node && node != ancestor) {\n    left += node.offsetLeft;\n    top += node.offsetTop;\n    node = node.offsetParent;\n  }\n  left -= container.offsetLeft + container.clientLeft;\n  top -= container.offsetTop + container.clientTop;\n\n  // Determine the view and container size based on the scroll direction.\n  // The view position is the scroll position of the logical starting edge\n  // of the view.\n  const style = getComputedStyle(container);\n  const horizontalWritingMode = style.writingMode == 'horizontal-tb';\n  const rtl = style.direction == 'rtl';\n  let viewSize = undefined;\n  let viewPos = undefined;\n  let containerSize = undefined;\n  const orientation = details.orientation;\n  if (orientation == 'horizontal' ||\n      (orientation == 'inline' && horizontalWritingMode) ||\n      (orientation == 'block' && !horizontalWritingMode)) {\n    viewSize = target.clientWidth;\n    viewPos = left;\n    if (rtl)\n      viewPos += container.scrollWidth - container.clientWidth;\n    containerSize = container.clientWidth;\n  } else {\n    // TODO: support sideways-lr\n    viewSize = target.clientHeight;\n    viewPos = top;\n    containerSize = container.clientHeight;\n  }\n\n  const scrollPos = directionAwareScrollOffset(container, orientation);\n  let startOffset = undefined;\n  let endOffset = undefined;\n\n  switch(phase) {\n    case 'cover':\n      // Range of scroll offsets where the subject element intersects the\n      // source's viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize;\n      break;\n\n    case 'contain':\n      // Range of scroll offsets where the subject element is fully inside of\n      // the container's viewport. If the subject's bounds exceed the size\n      // of the viewport in the scroll direction then the scroll range is\n      // empty.\n      startOffset = viewPos + viewSize - containerSize;\n      endOffset = viewPos;\n      break;\n\n    case 'enter':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-start edge of the viewport.\n      startOffset = viewPos - containerSize;\n      endOffset = viewPos + viewSize - containerSize;\n      break;\n\n    case 'exit':\n      // Range of scroll offsets where the subject element overlaps the\n      // logical-end edge of the viewport.\n      startOffset = viewPos;\n      endOffset = viewPos + viewSize;\n      break;\n  }\n\n  // TODO: Clamping of offsets is not specced. Update once ratified.\n  const maxOffset = calculateMaxScrollOffset(container, orientation);\n  startOffset = Math.max(0, startOffset);\n  endOffset = Math.min(maxOffset, endOffset);\n\n  return { start: startOffset, end: endOffset };\n}\n\n// Calculate the fractional offset of a (phase, percent) pair relative to the\n// full cover range.\nexport function relativePosition(timeline, phase, percent) {\n  const phaseRange = range(timeline, phase);\n  const coverRange = range(timeline, 'cover');\n  if (!phaseRange || !coverRange)\n    return 0;\n\n  const fraction = percent.value / 100;\n  const offset =\n      (phaseRange.end - phaseRange.start) * fraction + phaseRange.start;\n  return (offset - coverRange.start) / (coverRange.end - coverRange.start);\n}\n\n// https://drafts.csswg.org/scroll-animations-1/rewrite#view-progress-timelines\nexport class ViewTimeline extends ScrollTimeline {\n  // As specced, ViewTimeline has a subject and a source, but\n  // ViewTimelineOptions only has source. Furthermore, there is a strict\n  // relationship between subject and source (source is nearest scrollable\n  // ancestor of subject).\n\n  // Proceeding under the assumption that subject will be added to\n  // ViewTimelineOptions. Inferring the source from the subject if not\n  // explicitly set.\n  constructor(options) {\n\n    // We rely on having source set in order to properly set up the\n    // scroll listener. Ideally, this should be null if left unspecified.\n    // TODO: Add a mutation observer that detects any style change that could\n    // affect resolution of the source container.\n    options.source = getScrollParent(options.subject.parentNode);\n    if (options.axis) {\n      // Orientation called axis for a view timeline. Internally we can still\n      // call this orientation, since the internal naming is not exposed.\n      options.orientation = options.axis;\n    }\n\n    super(options);\n\n    const details = scrollTimelineOptions.get(this);\n    details.subject = options && options.subject ? options.subject : undefined;\n    // TODO: Handle insets.\n  }\n\n  get subject() {\n    return scrollTimelineOptions.get(this).subject;\n  }\n\n  // The orientation is called \"axis\" for a view timeline.\n  // Internally we still call it orientation.\n  get axis() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  get phase() {\n    if (!this.subject)\n      return \"inactive\";\n\n    const container = this.source;\n    if (!container)\n      return \"inactive\";\n\n    let scrollerStyle = getComputedStyle(container);\n\n    if (scrollerStyle.display == \"none\")\n      return \"inactive\";\n\n    if (container != document.scrollingElement &&\n        (scrollerStyle.overflow == 'visible' ||\n         scrollerStyle.overflow == \"clip\")) {\n        return \"inactive\";\n    }\n\n    return \"active\";\n  }\n\n  get currentTime() {\n    const scrollPos = directionAwareScrollOffset(this.source, this.orientation);\n    const offsets = range(this, 'cover');\n    if (!offsets)\n      return undefined;\n    const progress =\n        (scrollPos - offsets.start) / (offsets.end - offsets.start);\n\n    return CSS.percent(100 * progress);\n  }\n\n}\n","import {\n  ScrollTimeline,\n  installScrollOffsetExtension,\n  addAnimation,\n  removeAnimation,\n  relativePosition\n} from \"./scroll-timeline-base\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\nconst nativeAnimation = window.Animation;\n\nclass PromiseWrapper {\n  constructor() {\n    this.state = 'pending';\n    this.nativeResolve = this.nativeReject = null;\n    this.promise = new Promise((resolve, reject) => {\n      this.nativeResolve = resolve;\n      this.nativeReject = reject;\n    });\n  }\n  resolve(value) {\n    this.state = 'resolved';\n    this.nativeResolve(value);\n  }\n  reject(reason) {\n    this.state = 'rejected';\n    // Do not report unhandled promise rejections.\n    this.promise.catch(() => {});\n    this.nativeReject(reason);\n  }\n}\n\nfunction createReadyPromise(details) {\n  details.readyPromise = new PromiseWrapper();\n  // Trigger the pending task on the next animation frame.\n  requestAnimationFrame(() => {\n    const timelineTime = details.timeline.currentTime;\n    if (timelineTime !== null)\n      notifyReady(details);\n  });\n}\n\nfunction createAbortError() {\n  return new DOMException(\"The user aborted a request\", \"AbortError\");\n}\n\n// Converts a time from its internal representation to a percent. For a\n// monotonic timeline, time is reported as a double with implicit units of\n// milliseconds. For progress-based animations, times are reported as\n// percentages.\nfunction toCssNumberish(details, value) {\n  if (value === null)\n    return value;\n\n  if (typeof value !== 'number') {\n      throw new DOMException(\n          `Unexpected value: ${value}.  Cannot convert to CssNumberish`,\n          \"InvalidStateError\");\n  }\n\n  const limit = effectEnd(details);\n  const percent = limit ? 100 * value / limit : 0;\n  return CSS.percent(percent);\n}\n\n// Covnerts a time to its internal representation. Progress-based animations\n// use times expressed as percentages. Each progress-based animation is backed\n// by a native animation with a document timeline in the polyfill. Thus, we\n// need to convert the timing from percent to milliseconds with implicit units.\nfunction fromCssNumberish(details, value) {\n  if (!details.timeline) {\n    // Document timeline\n    if (value == null || typeof value === 'number')\n      return value;\n\n    const convertedTime = value.to('ms');\n    if (convertTime)\n      return convertedTime.value;\n\n    throw new DOMException(\n        \"CSSNumericValue must be either a number or a time value for \" +\n        \"time based animations.\",\n        \"InvalidStateError\");\n  } else {\n    // Scroll timeline.\n    if (value === null)\n      return value;\n\n    if (value.unit === 'percent') {\n      const duration = effectEnd(details);\n      return value.value * duration / 100;\n    }\n\n    throw new DOMException(\n        \"CSSNumericValue must be a percentage for progress based animations.\",\n        \"NotSupportedError\");\n  }\n}\n\nfunction normalizedTiming(details) {\n  // Used normalized timing in the case of a progress-based animation or\n  // specified timing with a document timeline.  The normalizedTiming property\n  // is initialized and cached when fetching the timing information.\n  const timing = details.proxy.effect.getTiming();\n  return details.normalizedTiming || timing;\n}\n\nfunction commitPendingPlay(details)  {\n  // https://drafts4.csswg.org/web-animations-2/#playing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (details.holdTime != null) {\n    // A: If animation’s hold time is resolved,\n    // A.1. Apply any pending playback rate on animation.\n    // A.2. Let new start time be the result of evaluating:\n    //        ready time - hold time / playback rate for animation.\n    //      If the playback rate is zero, let new start time be simply ready\n    //      time.\n    // A.3. Set the start time of animation to new start time.\n    // A.4. If animation’s playback rate is not 0, make animation’s hold\n    //      time unresolved.\n    applyPendingPlaybackRate(details);\n    if (details.animation.playbackRate == 0) {\n      details.startTime = timelineTime;\n    } else {\n      details.startTime\n          = timelineTime -\n              details.holdTime / details.animation.playbackRate;\n      details.holdTime = null;\n    }\n  } else if (details.startTime !== null &&\n             details.pendingPlaybackRate !== null) {\n    // B: If animation’s start time is resolved and animation has a pending\n    //    playback rate,\n    // B.1. Let current time to match be the result of evaluating:\n    //        (ready time - start time) × playback rate for animation.\n    // B.2 Apply any pending playback rate on animation.\n    // B.3 If animation’s playback rate is zero, let animation’s hold time\n    //     be current time to match.\n    // B.4 Let new start time be the result of evaluating:\n    //       ready time - current time to match / playback rate\n    //     for animation.\n    //     If the playback rate is zero, let new start time be simply ready\n    //     time.\n    // B.5 Set the start time of animation to new start time.\n    const currentTimeToMatch =\n        (timelineTime - details.startTime) * details.animation.playbackRate;\n    applyPendingPlaybackRate(details);\n    const playbackRate = details.animation.playbackRate;\n    if (playbackRate == 0) {\n      details.holdTime = null;\n      details.startTime = timelineTime;\n    } else {\n      details.startTime = timelineTime - currentTimeToMatch / playbackRate;\n    }\n  }\n\n  // 8.4 Resolve animation’s current ready promise with animation.\n  if (details.readyPromise && details.readyPromise.state == 'pending')\n     details.readyPromise.resolve(details.proxy);\n\n  // 8.5 Run the procedure to update an animation’s finished state for\n  //     animation with the did seek flag set to false, and the\n  //     synchronously notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitPendingPause(details) {\n  // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n  // Refer to steps listed under \"Schedule a task to run ...\"\n\n  // 1. Let ready time be the time value of the timeline associated with\n  //    animation at the moment when the user agent completed processing\n  //    necessary to suspend playback of animation’s target effect.\n  const readyTime = fromCssNumberish(details, details.timeline.currentTime);\n\n  // 2. If animation’s start time is resolved and its hold time is not\n  //    resolved, let animation’s hold time be the result of evaluating\n  //    (ready time - start time) × playback rate.\n  if (details.startTime != null && details.holdTime == null) {\n    details.holdTime =\n        (readyTime - details.startTime) * details.animation.playbackRate;\n  }\n\n  // 3. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 4. Make animation’s start time unresolved.\n  details.startTime = null;\n\n  // 5. Resolve animation’s current ready promise with animation.\n  details.readyPromise.resolve(details.proxy);\n\n  // 6. Run the procedure to update an animation’s finished state for\n  // animation with the did seek flag set to false, and the synchronously\n  //  notify flag set to false.\n  updateFinishedState(details, false, false);\n\n  // Additional polyfill step to update the native animation's current time.\n  syncCurrentTime(details);\n  details.pendingTask = null;\n};\n\nfunction commitFinishedNotification(details) {\n  if (!details.finishedPromise || details.finishedPromise.state != 'pending')\n    return;\n\n  if (details.proxy.playState != 'finished')\n    return;\n\n  details.finishedPromise.resolve(details.proxy);\n\n  details.animation.pause();\n\n  // Event times are speced as doubles in web-animations-1.\n  // Cannot dispatch a proxy to an event since the proxy is not a fully\n  // transparent replacement. As a workaround, use a custom event and inject\n  // the necessary getters.\n  const finishedEvent =\n    new CustomEvent('finish',\n                    { detail: {\n                      currentTime: details.proxy.currentTime,\n                      timelineTime: details.proxy.timeline.currentTime\n                    }});\n  Object.defineProperty(finishedEvent, 'currentTime', {\n    get: function() { return this.detail.currentTime; }\n  });\n  Object.defineProperty(finishedEvent, 'timelineTime', {\n    get: function() { return this.detail.timelineTime; }\n  });\n\n  requestAnimationFrame(() => {\n    queueMicrotask(() => {\n      details.animation.dispatchEvent(finishedEvent);\n    });\n  });\n}\n\nfunction effectivePlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null)\n    return details.pendingPlaybackRate;\n  return details.animation.playbackRate;\n}\n\nfunction applyPendingPlaybackRate(details) {\n  if (details.pendingPlaybackRate !== null) {\n    details.animation.playbackRate = details.pendingPlaybackRate;\n    details.pendingPlaybackRate = null;\n  }\n}\n\nfunction calculateCurrentTime(details) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime === null)\n    return null;\n\n  if (details.startTime === null)\n    return null;\n\n  let currentTime =\n      (timelineTime - details.startTime) * details.animation.playbackRate;\n\n  // Handle special case.\n  if (currentTime == -0)\n    currentTime = 0;\n\n  return currentTime;\n}\n\nfunction calculateStartTime(details, currentTime) {\n  if (!details.timeline)\n    return null;\n\n  const timelineTime = fromCssNumberish(details, details.timeline.currentTime);\n  if (timelineTime == null)\n    return null;\n\n  return timelineTime - currentTime / details.animation.playbackRate;\n}\n\nfunction updateFinishedState(details, didSeek, synchronouslyNotify) {\n  if (!details.timeline)\n    return;\n\n  // https://www.w3.org/TR/web-animations-1/#updating-the-finished-state\n  // 1. Calculate the unconstrained current time. The dependency on did_seek is\n  // required to accommodate timelines that may change direction. Without this\n  // distinction, a once-finished animation would remain finished even when its\n  // timeline progresses in the opposite direction.\n  let unconstrainedCurrentTime =\n      didSeek ? fromCssNumberish(details, details.proxy.currentTime)\n              : calculateCurrentTime(details);\n\n  // 2. Conditionally update the hold time.\n  if (unconstrainedCurrentTime && details.startTime != null &&\n      !details.proxy.pending) {\n    // Can seek outside the bounds of the active effect. Set the hold time to\n    // the unconstrained value of the current time in the event that this update\n    // is the result of explicitly setting the current time and the new time\n    // is out of bounds. An update due to a time tick should not snap the hold\n    // value back to the boundary if previously set outside the normal effect\n    // boundary. The value of previous current time is used to retain this\n    // value.\n    const playbackRate = effectivePlaybackRate(details);\n    const upperBound = effectEnd(details);\n    let boundary = details.previousCurrentTime;\n    if (playbackRate > 0 && unconstrainedCurrentTime >= upperBound) {\n      if (boundary === null || boundary < upperBound)\n        boundary = upperBound;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate < 0 && unconstrainedCurrentTime <= 0) {\n      if (boundary == null || boundary > 0)\n        boundary = 0;\n      details.holdTime = didSeek ? unconstrainedCurrentTime : boundary;\n    } else if (playbackRate != 0) {\n      // Update start time and reset hold time.\n      if (didSeek && details.holdTime !== null)\n        details.startTime = calculateStartTime(details, details.holdTime);\n      details.holdTime = null;\n    }\n  }\n\n  // Additional step to ensure that the native animation has the same value for\n  // current time as the proxy.\n  syncCurrentTime(details);\n\n  // 3. Set the previous current time.\n  details.previousCurrentTime = fromCssNumberish(details,\n                                                 details.proxy.currentTime);\n\n  // 4. Set the current finished state.\n  const playState = details.proxy.playState;\n\n  if (playState == 'finished') {\n    if (!details.finishedPromise)\n      details.finishedPromise = new PromiseWrapper();\n    if (details.finishedPromise.state == 'pending') {\n      // 5. Setup finished notification.\n      if (synchronouslyNotify) {\n        commitFinishedNotification(details);\n      } else {\n        Promise.resolve().then(() => {\n          commitFinishedNotification(details);\n        });\n      }\n    }\n  } else {\n    // 6. If not finished but the current finished promise is already resolved,\n    //    create a new promise.\n    if (details.finishedPromise &&\n        details.finishedPromise.state == 'resolved') {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    if (details.animation.playState != 'paused')\n      details.animation.pause();\n  }\n}\n\nfunction effectEnd(details) {\n  // https://www.w3.org/TR/web-animations-1/#end-time\n  const timing = normalizedTiming(details);\n  const totalDuration =\n     timing.delay + timing.endDelay + timing.iterations * timing.duration;\n\n  return Math.max(0, totalDuration);\n}\n\nfunction hasActiveTimeline(details) {\n  return !details.timeline || details.timeline.phase != 'inactive';\n}\n\nfunction syncCurrentTime(details) {\n  if (!details.timeline)\n    return;\n\n  let syncTime;\n  if (details.startTime !== null) {\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n    setNativeCurrentTime(details,\n                         (timelineTime - details.startTime) *\n                             details.animation.playbackRate);\n  } else if (details.holdTime !== null) {\n    setNativeCurrentTime(details, details.holdTime);\n  }\n}\n\n// Sets the time of the underlying animation, nudging the time slightly if at\n// a scroll-timeline boundary to remain in the active phase.\nfunction setNativeCurrentTime(details, time) {\n  const timeline = details.timeline;\n  const atScrollTimelineBoundary =\n      timeline.currentTime.value == (this.playbackRate < 0 ? 0 : 100);\n  const delta =\n      atScrollTimelineBoundary ? (this.playbackRate < 0 ? 0.001 : -0.001) : 0;\n\n  details.animation.currentTime = time + delta;\n}\n\nfunction resetPendingTasks(details) {\n  // https://www.w3.org/TR/web-animations-1/#reset-an-animations-pending-tasks\n\n  // 1. If animation does not have a pending play task or a pending pause task,\n  //    abort this procedure.\n  if (!details.pendingTask)\n    return;\n\n  // 2. If animation has a pending play task, cancel that task.\n  // 3. If animation has a pending pause task, cancel that task.\n  details.pendingTask = null;\n\n  // 4. Apply any pending playback rate on animation.\n  applyPendingPlaybackRate(details);\n\n  // 5. Reject animation’s current ready promise with a DOMException named\n  //    \"AbortError\".\n  details.readyPromise.reject(createAbortError());\n\n  // 6. Let animation’s current ready promise be the result of creating a new\n  //    resolved Promise object.\n  createReadyPromise(details);\n  details.readyPromise.resolve(details.proxy);\n}\n\nfunction playInternal(details, autoRewind) {\n  if (!details.timeline)\n    return;\n\n  // https://drafts.csswg.org/web-animations/#playing-an-animation-section.\n  // 1. Let aborted pause be a boolean flag that is true if animation has a\n  //    pending pause task, and false otherwise.\n  const abortedPause =\n     details.proxy.playState == 'paused' && details.proxy.pending;\n\n  // 2. Let has pending ready promise be a boolean flag that is initially\n  //    false.\n  let hasPendingReadyPromise = false;\n\n  // 3. Let seek time be a time value that is initially unresolved.\n  let seekTime = null;\n\n  // 4. Let has finite timeline be true if animation has an associated\n  //    timeline that is not monotonically increasing.\n  //    Note: this value will always true at this point in the polyfill.\n  //    Following steps are pruned based on the procedure for scroll\n  //    timelines.\n\n  // 5. Perform the steps corresponding to the first matching condition from\n  //    the following, if any:\n  //\n  // 5a If animation’s effective playback rate > 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time < zero, or\n  //      current time >= target effect end,\n  //    5a1. Set seek time to zero.\n  //\n  // 5b If animation’s effective playback rate < 0, the auto-rewind flag is\n  //    true and either animation’s:\n  //      current time is unresolved, or\n  //      current time ≤ zero, or\n  //      current time > target effect end,\n  //    5b1. If associated effect end is positive infinity,\n  //         throw an \"InvalidStateError\" DOMException and abort these steps.\n  //    5b2. Otherwise,\n  //         5b2a Set seek time to animation's associated effect end.\n  //\n  // 5c If animation’s effective playback rate = 0 and animation’s current time\n  //    is unresolved,\n  //    5c1. Set seek time to zero.\n  let previousCurrentTime = fromCssNumberish(details,\n                                             details.proxy.currentTime);\n\n  // Resume of a paused animation after a timeline change snaps to the scroll\n  // position.\n  if (details.resetCurrentTimeOnResume) {\n    previousCurrentTime = null;\n    details.resetCurrentTimeOnResume = false;\n  }\n\n  const playbackRate = effectivePlaybackRate(details);\n  const upperBound = effectEnd(details);\n  if (playbackRate > 0 && autoRewind && (previousCurrentTime == null ||\n                                         previousCurrentTime < 0 ||\n                                         previousCurrentTime >= upperBound)) {\n    seekTime = 0; // <-- This is not right was it doesn't support start delay.\n  } else if (playbackRate < 0 && autoRewind &&\n             (previousCurrentTime == null || previousCurrentTime <= 0 ||\n             previousCurrentTime > upperBound)) {\n    if (upperBound == Infinity) {\n      // Defer to native implementation to handle throwing the exception.\n      details.animation.play();\n      return;\n    }\n    seekTime = upperBound;\n  } else if (playbackRate == 0 && previousCurrentTime == null) {\n    seekTime = 0;\n  }\n\n  // 6. If seek time is resolved,\n  //        6a1. Set animation's start time to seek time.\n  //        6a2. Let animation's hold time be unresolved.\n  //        6a3. Apply any pending playback rate on animation.\n  if (seekTime != null) {\n    details.startTime = seekTime;\n    details.holdTime = null;\n    applyPendingPlaybackRate(details);\n  }\n\n  // Additional step for the polyfill.\n  addAnimation(details.timeline, details.animation,\n               tickAnimation.bind(details.proxy));\n\n  // 7. If animation's hold time is resolved, let its start time be\n  //    unresolved.\n  if (details.holdTime) {\n    details.startTime = null;\n  }\n\n  // 8. If animation has a pending play task or a pending pause task,\n  //   8.1 Cancel that task.\n  //   8.2 Set has pending ready promise to true.\n  if (details.pendingTask) {\n    details.pendingTask = null;\n    hasPendingReadyPromise = true;\n  }\n\n  // 9. If the following three conditions are all satisfied:\n  //      animation’s hold time is unresolved, and\n  //      seek time is unresolved, and\n  //      aborted pause is false, and\n  //      animation does not have a pending playback rate,\n  //    abort this procedure.\n  if (details.holdTime === null && seekTime === null &&\n      !abortedPause && details.pendingPlaybackRate === null)\n  return;\n\n  // 10. If has pending ready promise is false, let animation’s current ready\n  //    promise be a new promise in the relevant Realm of animation.\n  if (details.readyPromise && !hasPendingReadyPromise)\n    details.readyPromise = null;\n\n  // Additional polyfill step to ensure that the native animation has the\n  // correct value for current time.\n  syncCurrentTime(details);\n\n  // 11. Schedule a task to run as soon as animation is ready.\n  if (!details.readyPromise)\n    createReadyPromise(details);\n  details.pendingTask = 'play';\n\n  // 12. Run the procedure to update an animation’s finished state for animation\n  //     with the did seek flag set to false, and the synchronously notify flag\n  //     set to false.\n  updateFinishedState(details, /* seek */ false, /* synchronous */ false);\n}\n\nfunction tickAnimation(timelineTime) {\n  const details = proxyAnimations.get(this);\n  if (timelineTime == null) {\n    // While the timeline is inactive, it's effect should not be applied.\n    // To polyfill this behavior, we cancel the underlying animation.\n    if (details.animation.playState != 'idle')\n      details.animation.cancel();\n    return;\n  }\n\n  if (details.pendingTask) {\n    notifyReady(details);\n  }\n\n  const playState = this.playState;\n  if (playState == 'running' || playState == 'finished') {\n    let timelineTimeMs = fromCssNumberish(details, timelineTime);\n\n    // const atScrollTimelineBoundary =\n    //   timelineTime.value == (this.playbackRate < 0 ? 0 : 100);\n\n    //  console.log(`atScrollTimelineBoundary = ${atScrollTimelineBoundary}`);\n\n    //  if (atScrollTimelineBoundary) {\n    //    timelineTimeMs = 0;\n    //  }\n    // >>>>>\n\n    // details.animation.currentTime =\n    setNativeCurrentTime(\n        details,\n        (timelineTimeMs - fromCssNumberish(details, this.startTime)) *\n            this.playbackRate);\n\n    // console.log(`currentTime = ${details.animation.currentTime}`);\n\n    // Conditionally reset the hold time so that the finished state can be\n    // properly recomputed.\n    if (playState == 'finished' && effectivePlaybackRate(details) != 0)\n      details.holdTime = null;\n    updateFinishedState(details, false, false);\n  }\n}\n\nfunction notifyReady(details) {\n  if (details.pendingTask == 'pause') {\n    commitPendingPause(details);\n  } else if (details.pendingTask == 'play') {\n    commitPendingPlay(details);\n  }\n}\n\nfunction createProxyEffect(details) {\n  const effect = details.animation.effect;\n  const nativeUpdateTiming = effect.updateTiming;\n\n  // Generic pass-through handler for any method or attribute that is not\n  // explicitly overridden.\n  const handler = {\n    get: function(obj, prop) {\n      const result = obj[prop];\n      if (typeof result === 'function')\n        return result.bind(effect);\n      return result;\n    },\n\n    set: function(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  // Override getComputedTiming to convert to percentages when using a\n  // progress-based timeline.\n  const getComputedTimingHandler = {\n    apply: function(target) {\n      // Ensure that the native animation is using normalized values.\n      effect.getTiming();\n\n      const timing = target.apply(effect);\n\n      if (details.timeline) {\n        const preConvertLocalTime = timing.localTime;\n        timing.localTime = toCssNumberish(details, timing.localTime);\n        timing.endTime = toCssNumberish(details, timing.endTime);\n        timing.activeDuration =\n            toCssNumberish(details, timing.activeDuration);\n        const limit = effectEnd(details);\n        const iteration_duration = timing.iterations ?\n            (limit - timing.delay - timing.endDelay) / timing.iterations : 0;\n        timing.duration = limit ?\n            CSS.percent(100 * iteration_duration / limit) :\n            CSS.percent(0);\n\n        // Correct for inactive timeline.\n        if (details.timeline.currentTime === undefined) {\n          timing.localTime = null;\n        }\n      }\n      return timing;\n    }\n  };\n  // Override getTiming to normalize the timing. EffectEnd for the animation\n  // align with the timeline duration.\n  const getTimingHandler = {\n    apply: function(target, thisArg) {\n      // Arbitrary conversion of 100% to ms.\n      const INTERNAL_DURATION_MS = 100000;\n\n      if (details.specifiedTiming)\n        return details.specifiedTiming;\n\n      details.specifiedTiming = target.apply(effect);\n      let timing = Object.assign({}, details.specifiedTiming);\n\n      const timeline = details.timeline;\n      let computedDelays = false;\n      let startDelay;\n      let endDelay;\n      if (timeline instanceof ViewTimeline) {\n        // Compute start and end delay to align with start and end times.\n        // If times not specified use cover 0% to cover 100%.\n        startDelay = fractionalStartDelay(details);\n        endDelay = fractionalEndDelay(details);\n        computedDelays = true;\n      }\n\n      let totalDuration;\n\n      // Duration 'auto' case.\n      if (timing.duration === null || timing.duration === 'auto' ||\n          computedDelays) {\n        if (details.timeline) {\n          if (computedDelays) {\n            timing.delay = startDelay * INTERNAL_DURATION_MS;\n            timing.endDelay = endDelay * INTERNAL_DURATION_MS;\n          } else {\n            // TODO: start and end delay are specced as doubles and currently\n            // ignored for a progress based animation. Support delay and endDelay\n            // once CSSNumberish.\n            timing.delay = 0;\n            timing.endDelay = 0;\n          }\n          totalDuration = timing.iterations ? INTERNAL_DURATION_MS : 0;\n          timing.duration = timing.iterations\n             ? (totalDuration - timing.delay - timing.endDelay) /\n                 timing.iterations\n             : 0;\n          // Set the timing on the native animation to the normalized values\n          // while preserving the specified timing.\n          nativeUpdateTiming.apply(effect, [timing]);\n        }\n      }\n      details.normalizedTiming = timing;\n      return details.specifiedTiming;\n    }\n  };\n  const updateTimingHandler = {\n    apply: function(target, thisArg, argumentsList) {\n      // Additional validation that is specific to scroll timelines.\n      if (details.timeline) {\n        const options = argumentsList[0];\n        const duration = options.duration;\n        if (duration === Infinity) {\n          throw TypeError(\n              \"Effect duration cannot be Infinity when used with Scroll \" +\n              \"Timelines\");\n        }\n        const iterations = options.iterations;\n        if (iterations === Infinity) {\n          throw TypeError(\n            \"Effect iterations cannot be Infinity when used with Scroll \" +\n            \"Timelines\");\n        }\n      }\n\n      // Apply updates on top of the original specified timing.\n      if (details.specifiedTiming) {\n        target.apply(effect, [details.specifiedTiming]);\n      }\n      target.apply(effect, argumentsList);\n      // Force renormalization.\n      details.specifiedTiming = null;\n    }\n  };\n  const proxy = new Proxy(effect, handler);\n  proxy.getComputedTiming = new Proxy(effect.getComputedTiming,\n                                      getComputedTimingHandler);\n  proxy.getTiming = new Proxy(effect.getTiming, getTimingHandler);\n  proxy.updateTiming = new Proxy(effect.updateTiming, updateTimingHandler);\n  return proxy;\n}\n\n// Computes the start delay as a fraction of the active cover range.\nfunction fractionalStartDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const startTime =\n      details.timelineStartTime|| { phase: 'cover', percent: CSS.percent(0) };\n  return relativePosition(details.timeline, startTime.phase, startTime.percent);\n}\n\n// Computes the ends delay as a fraction of the active cover range.\nfunction fractionalEndDelay(details) {\n  if (!(details.timeline instanceof ViewTimeline))\n    return 0;\n\n  const endTime =\n      details.timelineEndTime || { phase: 'cover', percent: CSS.percent(100) };\n  return 1 - relativePosition(details.timeline, endTime.phase, endTime.percent);\n}\n\n// Create an alternate Animation class which proxies API requests.\n// TODO: Create a full-fledged proxy so missing methods are automatically\n// fetched from Animation.\nlet proxyAnimations = new WeakMap();\n\nexport class ProxyAnimation {\n  constructor(effect, timeline) {\n    const animation =\n        (effect instanceof nativeAnimation) ?\n           effect : new nativeAnimation(effect, animationTimeline);\n    const isScrollAnimation = timeline instanceof ScrollTimeline;\n    const animationTimeline = isScrollAnimation ? undefined : timeline;\n    proxyAnimations.set(this, {\n      animation: animation,\n      timeline: isScrollAnimation ? timeline : undefined,\n      playState: isScrollAnimation ? \"idle\" : null,\n      readyPromise: null,\n      finishedPromise: null,\n      // Start and hold times are directly tracked in the proxy despite being\n      // accessible via the animation so that direct manipulation of these\n      // properties does not affect the play state of the underlying animation.\n      // Note that any changes to these values require an update of current\n      // time for the underlying animation to ensure that its hold time is set\n      // to the correct position. These values are represented as floating point\n      // numbers in milliseconds.\n      startTime: null,\n      holdTime: null,\n      previousCurrentTime: null,\n      // When changing the timeline on a paused animation, we defer updating the\n      // start time until the animation resumes playing.\n      resetCurrentTimeOnResume: false,\n      // Calls to reverse and updatePlaybackRate set a pending rate that does\n      // not immediately take effect. The value of this property is\n      // inaccessible via the web animations API and therefore explicitly\n      // tracked.\n      pendingPlaybackRate: null,\n      pendingTask: null,\n      // Record the specified timing since it may be different than the timing\n      // actually used for the animation. When fetching the timing, this value\n      // will be returned, however, the native animation will use normalized\n      // values.\n      specifiedTiming: null,\n      // The normalized timing has the corrected timing with the intrinsic\n      // iteration duration resolved.\n      normalizedTiming: null,\n      // Effect proxy that performs the necessary time conversions when using a\n      // progress-based timelines.\n      effect: null,\n      // Range when using a view-timeline.  The default range is cover 0% to\n      // 100%.\n      timelineStartTime: null,\n      timelineEndTime: null,\n      proxy: this\n    });\n  }\n\n  // -----------------------------------------\n  // Web animation API\n  // -----------------------------------------\n\n  get effect() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.effect;\n\n    // Proxy the effect to support timing conversions for progress based\n    // animations.\n    if (!details.effect)\n      details.effect = createProxyEffect(details);\n\n    return details.effect;\n  }\n  set effect(newEffect) {\n    proxyAnimations.get(this).animation.effect = newEffect;\n    // Reset proxy to force re-initialization the next time it is accessed.\n    details.effect = null;\n  }\n\n  get timeline() {\n    const details = proxyAnimations.get(this);\n    // If we explicitly set a null timeline we will return the underlying\n    // animation's timeline.\n    return details.timeline || details.animation.timeline;\n  }\n  set timeline(newTimeline) {\n    // https://drafts4.csswg.org/web-animations-2/#setting-the-timeline\n\n    // 1. Let old timeline be the current timeline of animation, if any.\n    // 2. If new timeline is the same object as old timeline, abort this\n    //    procedure.\n    const oldTimeline = this.timeline;\n    if (oldTimeline == newTimeline)\n      return;\n\n    // 3. Let previous play state be animation’s play state.\n    const previousPlayState = this.playState;\n\n    // 4. Let previous current time be the animation’s current time.\n    const previousCurrentTime = this.currentTime;\n\n    const details = proxyAnimations.get(this);\n    const end = effectEnd(details);\n    const progress =\n        end > 0 ? fromCssNumberish(details, previousCurrentTime) / end : 0;\n\n    // 5. Let from finite timeline be true if old timeline is not null and not\n    //    monotonically increasing.\n    const fromScrollTimeline = (oldTimeline instanceof ScrollTimeline);\n\n    // 6. Let to finite timeline be true if timeline is not null and not\n    //    monotonically increasing.\n    const toScrollTimeline = (newTimeline instanceof ScrollTimeline);\n\n    // 7. Let the timeline of animation be new timeline.\n    // Cannot assume that the native implementation has mutable timeline\n    // support. Deferring this step until we know that we are either\n    // polyfilling, supporting natively, or throwing an error.\n\n    // 8. Set the flag reset current time on resume to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // Additional step required to track whether the animation was pending in\n    // order to set up a new ready promise if needed.\n    const pending = this.pending;\n\n    if (fromScrollTimeline) {\n      removeAnimation(details.timeline, details.animation);\n    }\n\n    // 9. Perform the steps corresponding to the first matching condition from\n    //    the following, if any:\n\n    // If to finite timeline,\n    if (toScrollTimeline) {\n      // Deferred step 7.\n      details.timeline = newTimeline;\n\n      // 1. Apply any pending playback rate on animation\n      applyPendingPlaybackRate(details);\n\n      // 2. Let seek time be zero if playback rate >= 0, and animation’s\n      //    associated effect end otherwise.\n      const seekTime =\n          details.animation.playbackRate >= 0 ? 0 : effectEnd(details);\n\n      // 3.  Update the animation based on the first matching condition if any:\n      switch (previousPlayState) {\n        //   If either of the following conditions are true:\n        //     * previous play state is running or,\n        //     * previous play state is finished\n        //   Set animation’s start time to seek time.\n        case 'running':\n        case 'finished':\n          details.startTime = seekTime;\n          // Additional polyfill step needed to associate the animation with\n          // the scroll timeline.\n          addAnimation(details.timeline, details.animation,\n                       tickAnimation.bind(this));\n          break;\n\n        //   If previous play state is paused:\n        //     If previous current time is resolved:\n        //       * Set the flag reset current time on resume to true.\n        //       * Set start time to unresolved.\n        //       * Set hold time to previous current time.\n        case 'paused':\n          details.resetCurrentTimeOnResume = true;\n          details.startTime = null;\n          details.holdTime =\n              fromCssNumberish(details, CSS.percent(100 * progress));\n          break;\n\n        // Oterwise\n        default:\n          details.holdTime = null;\n          details.startTime = null;\n      }\n\n      // Additional steps required if the animation is pending as we need to\n      // associate the pending promise with proxy animation.\n      // Note: if the native promise already has an associated \"then\", we will\n      // lose this association.\n      if (pending) {\n        if (!details.readyPromise ||\n            details.readyPromise.state == 'resolved') {\n          createReadyPromise(details);\n        }\n        if (previousPlayState == 'paused')\n          details.pendingTask = 'pause';\n        else\n          details.pendingTask = 'play';\n      }\n\n      // Note that the following steps should apply when transitioning to\n      // a monotonic timeline as well; however, we do not have a direct means\n      // of applying the steps to the native animation.\n\n      // 10. If the start time of animation is resolved, make animation’s hold\n      //     time unresolved. This step ensures that the finished play state of\n      //     animation is not “sticky” but is re-evaluated based on its updated\n      //     current time.\n      if (details.startTime !== null)\n        details.holdTime = null;\n\n      // 11. Run the procedure to update an animation’s finished state for\n      //     animation with the did seek flag set to false, and the\n      //     synchronously  notify flag set to false.\n      updateFinishedState(details, false, false);\n      return;\n    }\n\n    // To monotonic timeline.\n    if (details.animation.timeline == newTimeline) {\n      // Deferred step 7 from above.  Clearing the proxy's timeline will\n      // re-associate the proxy with the native animation.\n      removeAnimation(details.timeline, details.animation);\n      details.timeline = null;\n\n      // If from finite timeline and previous current time is resolved,\n      //   Run the procedure to set the current time to previous current time.\n      if (fromScrollTimeline) {\n        if (previousCurrentTime !== null)\n          details.animation.currentTime = progress * effectEnd(details);\n\n        switch (previousPlayState) {\n          case 'paused':\n            details.animation.pause();\n            break;\n\n          case 'running':\n          case 'finished':\n            details.animation.play();\n        }\n      }\n    } else {\n      throw TypeError(\"Unsupported timeline: \" + newTimeline);\n    }\n  }\n\n  get startTime() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline)\n      return toCssNumberish(details, details.startTime);\n\n    return details.animation.startTime;\n  }\n  set startTime(value) {\n    // https://drafts.csswg.org/web-animations/#setting-the-start-time-of-an-animation\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline) {\n      details.animation.startTime = value;\n      return;\n    }\n\n    // 1. Let timeline time be the current time value of the timeline that\n    //    animation is associated with. If there is no timeline associated with\n    //    animation or the associated timeline is inactive, let the timeline\n    //    time be unresolved.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    // 2. If timeline time is unresolved and new start time is resolved, make\n    //    animation’s hold time unresolved.\n    if (timelineTime == null && details.startTime != null) {\n      details.holdTime = null;\n      // Clearing the hold time may have altered the value of current time.\n      // Ensure that the underlying animations has the correct value.\n      syncCurrentTime(details);\n    }\n\n    // 3. Let previous current time be animation’s current time.\n    // Note: This is the current time after applying the changes from the\n    // previous step which may cause the current time to become unresolved.\n    const previousCurrentTime = fromCssNumberish(details, this.currentTime);\n\n    // 4. Apply any pending playback rate on animation.\n    applyPendingPlaybackRate(details);\n\n    // 5. Set animation’s start time to new start time.\n    details.startTime = value;\n\n    // 6. Set the reset current time on resume flag to false.\n    details.resetCurrentTimeOnResume = false;\n\n    // 7. Update animation’s hold time based on the first matching condition\n    //    from the following,\n\n    //    If new start time is resolved,\n    //    If animation’s playback rate is not zero,\n    //       make animation’s hold time unresolved.\n\n    //    Otherwise (new start time is unresolved),\n    //        Set animation’s hold time to previous current time even if\n    //        previous current time is unresolved.\n\n    if (details.startTime !== null && details.animation.playbackRate != 0)\n      details.holdTime = null;\n    else\n      details.holdTime = previousCurrentTime;\n\n    // 7. If animation has a pending play task or a pending pause task, cancel\n    //    that task and resolve animation’s current ready promise with\n    //    animation.\n    if (details.pendingTask) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n   // 8. Run the procedure to update an animation’s finished state for animation\n   //    with the did seek flag set to true, and the synchronously notify flag\n   //    set to false.\n   updateFinishedState(details, true, false);\n\n    // Ensure that currentTime is updated for the native animation.\n    syncCurrentTime(details);\n  }\n\n  get currentTime() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.currentTime;\n\n    if (details.holdTime != null)\n      return toCssNumberish(details, details.holdTime);\n\n    return toCssNumberish(details, calculateCurrentTime(details));\n  }\n  set currentTime(value) {\n    const details = proxyAnimations.get(this);\n    value = fromCssNumberish(details, value);\n    if (!details.timeline || value == null) {\n      details.animation.currentTime = value;\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-current-time-of-an-animation\n    const previouStartTime = details.startTime;\n    const previousHoldTime = details.holdTime;\n    const timelinePhase = details.timeline.phase;\n\n    // Update either the hold time or the start time.\n    if (details.holdTime !== null || details.startTime === null ||\n        timelinePhase == 'inactive' || details.animation.playbackRate == 0) {\n      // TODO: Support hold phase.\n      details.holdTime = value;\n    } else {\n      details.startTime = calculateStartTime(details, value);\n    }\n    details.resetCurrentTimeOnResume = false;\n\n    // Preserve invariant that we can only set a start time or a hold time in\n    // the absence of an active timeline.\n    if (timelinePhase == 'inactive')\n      details.startTime = null;\n\n    // Reset the previous current time.\n    details.previousCurrentTime = null;\n\n    // Synchronously resolve pending pause task.\n    if (details.pendingTask == 'pause') {\n      details.holdTime = value;\n      applyPendingPlaybackRate(details);\n      details.startTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // Update the finished state.\n    updateFinishedState(details, true, false);\n  }\n\n  get playbackRate() {\n    return proxyAnimations.get(this).animation.playbackRate;\n  }\n  set playbackRate(value) {\n    const details = proxyAnimations.get(this);\n\n    if (!details.timeline) {\n      details.animation.playbackRate = value;\n      return;\n    }\n\n    // 1. Clear any pending playback rate on animation.\n    details.pendingPlaybackRate = null;\n\n    // 2. Let previous time be the value of the current time of animation before\n    //    changing the playback rate.\n    const previousCurrentTime = this.currentTime;\n\n    // 3. Set the playback rate to new playback rate.\n    details.animation.playbackRate = value;\n\n    // 4. If previous time is resolved, set the current time of animation to\n    //    previous time\n   if (previousCurrentTime !== null)\n      this.currentTime = previousCurrentTime;\n  }\n\n  get playState() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.playState;\n\n    const currentTime = fromCssNumberish(details, this.currentTime);\n\n    // 1. All of the following conditions are true:\n    //    * The current time of animation is unresolved, and\n    //    * the start time of animation is unresolved, and\n    //    * animation does not have either a pending play task or a pending pause\n    //      task,\n    //    then idle.\n    if (currentTime === null && details.startTime === null &&\n        details.pendingTask == null)\n      return 'idle';\n\n    // 2. Either of the following conditions are true:\n    //    * animation has a pending pause task, or\n    //    * both the start time of animation is unresolved and it does not have a\n    //      pending play task,\n    //    then paused.\n    if (details.pendingTask == 'pause' ||\n        (details.startTime === null && details.pendingTask != 'play'))\n      return 'paused';\n\n    // 3.  For animation, current time is resolved and either of the following\n    //     conditions are true:\n    //     * animation’s effective playback rate > 0 and current time >= target\n    //       effect end; or\n    //     * animation’s effective playback rate < 0 and current time <= 0,\n    //    then finished.\n    if (currentTime != null) {\n      if (details.animation.playbackRate > 0 &&\n          currentTime >= effectEnd(details))\n        return 'finished';\n      if (details.animation.playbackRate < 0 && currentTime <= 0)\n        return 'finished';\n    }\n\n    // 4.  Otherwise\n    return 'running';\n  }\n  get replaceState() {\n    // TODO: Fix me. Replace state is not a boolean.\n    return proxyAnimations.get(this).animation.pending;\n  }\n\n  get pending() {\n    const details = proxyAnimations.get(this);\n    if (details.timeline) {\n      return !!details.readyPromise &&\n             details.readyPromise.state == 'pending';\n    }\n\n    return details.animation.pending;\n  }\n\n  finish() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.finish();\n      return;\n    }\n\n    // 1. If animation’s effective playback rate is zero, or if animation’s\n    //    effective playback rate > 0 and target effect end is infinity, throw\n    //    an InvalidStateError and abort these steps.\n    const playbackRate = effectivePlaybackRate(details);\n    const duration = effectEnd(details);\n    if (playbackRate == 0) {\n      throw new DOMException(\n          \"Cannot finish Animation with a playbackRate of 0.\",\n          \"InvalidStateError\");\n    }\n    if (playbackRate > 0 && duration == Infinity) {\n      throw new DOMException(\n          \"Cannot finish Animation with an infinite target effect end.\",\n          \"InvalidStateError\");\n    }\n\n    // 2. Apply any pending playback rate to animation.\n    applyPendingPlaybackRate(details);\n\n    // 3. Set limit as follows:\n    //       If playback rate > 0,\n    //          Let limit be target effect end.\n    //       Otherwise,\n    //          Let limit be zero.\n    const limit = playbackRate < 0 ? 0 : duration;\n\n    // 4. Silently set the current time to limit.\n    this.currentTime = toCssNumberish(details, limit);\n\n    // 5. If animation’s start time is unresolved and animation has an\n    //    associated active timeline, let the start time be the result of\n    //    evaluating\n    //        timeline time - (limit / playback rate)\n    //    where timeline time is the current time value of the associated\n    //    timeline.\n    const timelineTime = fromCssNumberish(details,\n                                          details.timeline.currentTime);\n\n    if (details.startTime === null && timelineTime !== null) {\n       details.startTime =\n           timelineTime - (limit / details.animation.playbackRate);\n    }\n\n    // 6. If there is a pending pause task and start time is resolved,\n    //    6.1 Let the hold time be unresolved.\n    //    6.2 Cancel the pending pause task.\n    //    6.3 Resolve the current ready promise of animation with animation.\n    if (details.pendingTask == 'pause' && details.startTime !== null) {\n      details.holdTime = null;\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 7. If there is a pending play task and start time is resolved, cancel\n    //    that task and resolve the current ready promise of animation with\n    //    animation.\n    if (details.pendingTask == 'play' && details.startTime !== null) {\n      details.pendingTask = null;\n      details.readyPromise.resolve(this);\n    }\n\n    // 8. Run the procedure to update an animation’s finished state for\n    //    animation with the did seek flag set to true, and the synchronously\n    //    notify flag set to true.\n    updateFinishedState(details, true, true);\n  }\n\n  play() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.play();\n      return;\n    }\n\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  pause() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.pause();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#pausing-an-animation-section\n\n    // 1. If animation has a pending pause task, abort these steps.\n    // 2. If the play state of animation is paused, abort these steps.\n    if (this.playState == \"paused\")\n      return;\n\n    // 3. Let seek time be a time value that is initially unresolved.\n    // 4. Let has finite timeline be true if animation has an associated\n    //    timeline that is not monotonically increasing.\n    //    Note: always true if we have reached this point in the polyfill.\n    //    Pruning following steps to be specific to scroll timelines.\n    let seekTime = null;\n\n    // 5.  If the animation’s current time is unresolved, perform the steps\n    //     according to the first matching condition from below:\n    // 5a. If animation’s playback rate is ≥ 0,\n    //       Set seek time to zero.\n    // 5b. Otherwise,\n    //         If associated effect end for animation is positive infinity,\n    //             throw an \"InvalidStateError\" DOMException and abort these\n    //             steps.\n    //         Otherwise,\n    //             Set seek time to animation's associated effect end.\n\n    const playbackRate = details.animation.playbackRate;\n    const duration = effectEnd(details);\n\n    if (details.animation.currentTime === null) {\n      if (playbackRate >= 0) {\n        seekTime = 0;\n      } else if (duration == Infinity) {\n        // Let native implementation take care of throwing the exception.\n        details.animation.pause();\n        return;\n      } else {\n        seekTime = duration;\n      }\n    }\n\n    // 6. If seek time is resolved,\n    //        If has finite timeline is true,\n    //            Set animation's start time to seek time.\n    if (seekTime !== null)\n      details.startTime = seekTime;\n\n    // 7. Let has pending ready promise be a boolean flag that is initially\n    //    false.\n    // 8. If animation has a pending play task, cancel that task and let has\n    //    pending ready promise be true.\n    // 9. If has pending ready promise is false, set animation’s current ready\n    //    promise to a new promise in the relevant Realm of animation.\n    if (details.pendingTask == 'play')\n      details.pendingTask = null;\n    else\n      details.readyPromise = null;\n\n    // 10. Schedule a task to be executed at the first possible moment after the\n    //     user agent has performed any processing necessary to suspend the\n    //     playback of animation’s target effect, if any.\n    if (!details.readyPromise)\n      createReadyPromise(details);\n    details.pendingTask ='pause';\n  }\n\n  reverse() {\n    const details = proxyAnimations.get(this);\n    const playbackRate = effectivePlaybackRate(details);\n    const previousCurrentTime =\n        details.resetCurrentTimeOnResume ?\n            null : fromCssNumberish(details, this.currentTime);\n    const inifiniteDuration = effectEnd(details) == Infinity;\n\n    // Let the native implementation handle throwing the exception in cases\n    // where reversal is not possible. Error cases will not change the state\n    // of the native animation.\n    const reversable =\n       (playbackRate != 0) &&\n       (playbackRate <  0 || previousCurrentTime > 0  || !inifiniteDuration);\n    if (!details.timeline || !reversable) {\n      if (reversable)\n        details.pendingPlaybackRate = -effectivePlaybackRate(details);\n      details.animation.reverse();\n      return;\n    }\n\n    if (details.timeline.phase == 'inactive') {\n      throw new DOMException(\n          \"Cannot reverse an animation with no active timeline\",\n          \"InvalidStateError\");\n    }\n\n    this.updatePlaybackRate(-playbackRate);\n    playInternal(details, /* autoRewind */ true);\n  }\n\n  updatePlaybackRate(rate) {\n    const details = proxyAnimations.get(this);\n    details.pendingPlaybackRate = rate;\n    if (!details.timeline) {\n      details.animation.updatePlaybackRate(rate);\n      return;\n    }\n\n    // https://drafts.csswg.org/web-animations/#setting-the-playback-rate-of-an-animation\n\n    // 1. Let previous play state be animation’s play state.\n    // 2. Let animation’s pending playback rate be new playback rate.\n    // Step 2 already performed as we need to record it even when using a\n    // monotonic timeline.\n    const previousPlayState = this.playState;\n\n    // 3. Perform the steps corresponding to the first matching condition from\n    //    below:\n    //\n    // 3a If animation has a pending play task or a pending pause task,\n    //    Abort these steps.\n    if (details.readyPromise && details.readyPromise.state == 'pending')\n      return;\n\n    switch(previousPlayState) {\n      // 3b If previous play state is idle or paused,\n      //    Apply any pending playback rate on animation.\n      case 'idle':\n      case 'paused':\n        applyPendingPlaybackRate(details);\n        break;\n\n      // 3c If previous play state is finished,\n      //    3c.1 Let the unconstrained current time be the result of calculating\n      //         the current time of animation substituting an unresolved time\n      //          value for the hold time.\n      //    3c.2 Let animation’s start time be the result of evaluating the\n      //         following expression:\n      //    timeline time - (unconstrained current time / pending playback rate)\n      // Where timeline time is the current time value of the timeline\n      // associated with animation.\n      //    3c.3 If pending playback rate is zero, let animation’s start time be\n      //         timeline time.\n      //    3c.4 Apply any pending playback rate on animation.\n      //    3c.5 Run the procedure to update an animation’s finished state for\n      //         animation with the did seek flag set to false, and the\n      //         synchronously notify flag set to false.\n\n      case 'finished':\n        const timelineTime = fromCssNumberish(details,\n                                              details.timeline.currentTime);\n        const unconstrainedCurrentTime = timelineTime !== null ?\n            (timelineTime - details.startTime) * details.animation.playbackRate\n            : null;\n        if (rate == 0) {\n          details.startTime = timelineTime;\n        } else {\n          details.startTime =\n              timelineTime != null && unconstrainedCurrentTime != null ?\n                  (timelineTime - unconstrainedCurrentTime) / rate : null;\n        }\n        applyPendingPlaybackRate(details);\n        updateFinishedState(details, false, false);\n        syncCurrentTime(details);\n        break;\n\n      // 3d Otherwise,\n      // Run the procedure to play an animation for animation with the\n      // auto-rewind flag set to false.\n      default:\n        playInternal(details, false);\n    }\n  }\n\n  persist() {\n    proxyAnimations.get(this).animation.persist();\n  }\n\n  get id() {\n    return proxyAnimations.get(this).animation.id;\n  }\n\n  cancel() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline) {\n      details.animation.cancel();\n      return;\n    }\n\n    // https://www.w3.org/TR/web-animations-1/#canceling-an-animation-section\n    // 1. If animation’s play state is not idle, perform the following steps:\n    //    1.1  Run the procedure to reset an animation’s pending tasks on\n    //         animation.\n    //    1.2 Reject the current finished promise with a DOMException named\n    //        \"AbortError\"\n    //    1.3 Let current finished promise be a new (pending) Promise object.\n    //    1.4+ Deferred to native implementation.\n    //         TODO: polyfill since timelineTime will be incorrect for the\n    //               cancel event. Also, should avoid sending a cancel event if\n    //               the native animation is canceled due to the scroll timeline\n    //               becoming inactive. This can likely be done by associating\n    //               the cancel event with the proxy and not the underlying\n    //               animation.\n    if (this.playState != 'idle') {\n      resetPendingTasks(details);\n      if (details.finishedPromise &&\n          details.finishedPromise.state == 'pending') {\n        details.finishedPromise.reject(createAbortError());\n      }\n      details.finishedPromise = new PromiseWrapper();\n      details.animation.cancel();\n    }\n\n    // 2. Make animation’s hold time unresolved.\n    // 3. Make animation’s start time unresolved.\n    details.startTime = null;\n    details.holdTime = null;\n\n    // Extra step in the polyfill the ensure the animation stops ticking.\n    removeAnimation(details.timeline, details.animation);\n  }\n\n  get onfinish() {\n    return proxyAnimations.get(this).animation.onfinish;\n  }\n  set onfinish(value) {\n    proxyAnimations.get(this).animation.onfinish = value;\n  }\n  get oncancel() {\n    return proxyAnimations.get(this).animation.oncancel;\n  }\n  set oncancel(value) {\n    proxyAnimations.get(this).animation.oncancel = value;\n  }\n  get onremove() {\n    return proxyAnimations.get(this).animation.onremove;\n  }\n  set onremove(value) {\n    proxyAnimations.get(this).animation.onremove = value;\n  }\n\n  get finished() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n       return details.animation.finished;\n\n    if (!details.finishedPromise) {\n      details.finishedPromise = new PromiseWrapper();\n    }\n    return details.finishedPromise.promise;\n  }\n\n  get ready() {\n    const details = proxyAnimations.get(this);\n    if (!details.timeline)\n      return details.animation.ready;\n\n    if (!details.readyPromise) {\n      details.readyPromise = new PromiseWrapper();\n      details.readyPromise.resolve(this);\n    }\n    return details.readyPromise.promise;\n  }\n\n  // --------------------------------------------------\n  // Event target API\n  // --------------------------------------------------\n\n  addEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.addEventListener(type, callback,\n                                                         options);\n  }\n\n  removeEventListener(type, callback, options) {\n    proxyAnimations.get(this).animation.removeEventListener(type, callback,\n                                                            options);\n  }\n\n  dispatchEvent(event) {\n    proxyAnimations.get(this).animation.dispatchEvent(event);\n  }\n};\n\nfunction parseViewTimelineTime(value, defaultPercentage) {\n  const PHASE_INDEX = 1;\n  const PERCENT_INDEX = 3;\n\n  if (!value)\n    return null;\n\n  const match = /(\\w+)\\s+((\\-?\\d+)%)?/.exec(value);\n  if (!match)\n    return null;\n\n  const phase = match[PHASE_INDEX];\n  const percent = parseFloat(match[PERCENT_INDEX] || defaultPercentage);\n\n  return { phase: phase, percent: CSS.percent(percent) };\n}\n\nexport function animate(keyframes, options) {\n  const timeline = options.timeline;\n\n  if (timeline instanceof ScrollTimeline)\n    delete options.timeline;\n\n  const animation = nativeElementAnimate.apply(this, [keyframes, options]);\n  const proxyAnimation = new ProxyAnimation(animation, timeline);\n\n  if (timeline instanceof ScrollTimeline) {\n    animation.pause();\n    if (timeline instanceof ViewTimeline) {\n      details = proxyAnimations.get(proxyAnimation);\n      details.timelineStartTime = parseViewTimelineTime(options.startTime);\n      details.timelineEndTime = parseViewTimelineTime(options.endTime);\n    }\n    proxyAnimation.play();\n  }\n\n  return proxyAnimation;\n};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { parseLength } from \"./utils\";\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [\n    [TOP, BOTTOM],\n    [RIGHT, LEFT],\n  ],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]],\n];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: \"start\",\n      threshold: 0,\n      rootMargin: [\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n        [0, \"px\"],\n      ],\n    });\n    this.target = value.target;\n    this.edge = value.edge || \"start\";\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || \"0px 0px 0px 0px\";\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error(\"Intersection target must be an element.\");\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if ([\"start\", \"end\"].indexOf(value) == -1) return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a TypeError for a parse error.\n    if (threshold != threshold)\n      throw TypeError(\"Invalid threshold.\");\n    // TODO(https://crbug.com/1136516): This should throw a RangeError\n    // consistent with the intersection observer spec but the current\n    // test expectations are looking for a TypeError.\n    if (threshold < 0 || threshold > 1)\n      throw TypeError(\"threshold must be in the range [0, 1]\");\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/);\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError(\n        \"rootMargin must contain between 1 and 4 length components\"\n      );\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i], true);\n      if (!parsedValue) throw TypeError(\"Unrecognized rootMargin length\");\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [\n          parseFloat(parsedValue.value),\n          parsedValue.unit,\n        ];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this)\n      .rootMargin.map((margin) => {\n        return margin.join(\"\");\n      })\n      .join(\" \");\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n}\n\nexport function parseOffset(value) {\n  if (value.target) return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == \"percent\") return (length[0] * containerSize) / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(source, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == \"block\") orientation = \"vertical\";\n  else if (orientation == \"inline\") orientation = \"horizontal\";\n  let originalViewport =\n    source == document.scrollingElement\n      ? {\n          left: 0,\n          right: source.clientWidth,\n          top: 0,\n          bottom: source.clientHeight,\n          width: source.clientWidth,\n          height: source.clientHeight,\n        }\n      : source.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(\n      resolveLength(\n        parsedMargins[i],\n        i % 2 == 0 ? originalViewport.height : originalViewport.width\n      )\n    );\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width:\n      originalViewport.right -\n      originalViewport.left +\n      computedMargins[LEFT] +\n      computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height:\n      originalViewport.bottom -\n      originalViewport.top +\n      computedMargins[TOP] +\n      computedMargins[BOTTOM],\n  };\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == \"start\") threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == \"vertical\") {\n    let point =\n      target.top +\n      target.height * threshold -\n      viewport.top +\n      source.scrollTop;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.height);\n      return Math.min(point, source.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.height;\n      return point;\n    }\n  } else {\n    // orientation == 'horizontal'\n    let point =\n      target.left +\n      target.width * threshold -\n      viewport.left +\n      source.scrollLeft;\n    if (clamped) {\n      if (offset.edge == \"end\") return Math.max(0, point - viewport.width);\n      return Math.min(point, source.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == \"end\") return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// This is also used in scroll-timeline-css.js\nexport const RegexMatcher = {\n  IDENTIFIER: /[\\w\\\\\\@_-]+/g,\n  WHITE_SPACE: /\\s*/g,\n  NUMBER: /^[0-9]+/,\n  TIME: /^[0-9]+(s|ms)/,\n  ANIMATION_TIMELINE: /animation-timeline\\s*:([^;}]+)/,\n  ANIMATION_NAME: /animation-name\\s*:([^;}]+)/,\n  ANIMATION: /animation\\s*:([^;}]+)/,\n  SOURCE_ELEMENT: /selector\\(#([^)]+)\\)/,\n};\n\n// Used for ANIMATION_TIMELINE, ANIMATION_NAME and ANIMATION regex\nconst VALUES_CAPTURE_INDEX = 1;\n\nconst WHOLE_MATCH_INDEX = 0;\n\nconst ANIMATION_KEYWORDS = [\n  'normal', 'reverse', 'alternate', 'alternate-reverse',\n  'none', 'forwards', 'backwards', 'both',\n  'running', 'paused',\n  'ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'\n];\n\n// 1 - Extracts @scroll-timeline and saves it in scrollTimelineOptions.\n// 2 - If we find any animation-timeline in any of the CSS Rules, \n// we will save objects in a list named cssRulesWithTimelineName\nexport class StyleParser {\n  constructor() {\n    this.cssRulesWithTimelineName = [];\n    this.scrollTimelineOptions = new Map(); // save options by name\n    this.keyframeNames = new Set();\n  }\n\n  // Inspired by\n  // https://drafts.csswg.org/css-syntax/#parser-diagrams\n  // https://github.com/GoogleChromeLabs/container-query-polyfill/blob/main/src/engine.ts\n  // This function is called twice, in the first pass we are interested in saving\n  // @scroll-timeline and @keyframe names, in the second pass\n  // we will parse other rules\n  transpileStyleSheet(sheetSrc, firstPass, srcUrl) {\n    // AdhocParser\n    const p = {\n      sheetSrc: sheetSrc,\n      index: 0,\n      name: srcUrl,\n    };\n\n    while (p.index < p.sheetSrc.length) {\n      this.eatWhitespace(p);\n      if (p.index >= p.sheetSrc.length) break;\n      if (this.lookAhead(\"/*\", p)) {\n        while (this.lookAhead(\"/*\", p)) {\n          this.eatComment(p);\n          this.eatWhitespace(p);\n        }\n        continue;\n      }\n\n      if (this.lookAhead(\"@scroll-timeline\", p)) {\n        const { scrollTimeline, startIndex, endIndex } = this.parseScrollTimeline(p);\n        if (firstPass) this.scrollTimelineOptions.set(scrollTimeline.name, scrollTimeline);\n      } else {\n        const rule = this.parseQualifiedRule(p);\n        if (!rule) continue;\n        if (firstPass) {\n          this.extractAndSaveKeyframeName(rule.selector);\n        } else {\n          this.handleScrollTimelineProps(rule, p);\n        }\n      }\n    }\n\n    // If this sheet has no srcURL (like from a <style> tag), we are done.\n    // TODO: Otherwise, we have to find `url()` functions and resolve\n    // relative and path-absolute URLs to absolute URLs.\n    return p.sheetSrc;\n  }\n\n  getScrollTimelineName(animationName, target) {\n    // Rules are pushed to cssRulesWithTimelineName list in the same order as they appear in style sheet.\n    // We are traversing backwards to take the last sample of a rule in a style sheet.\n    // TODO: Rule specificity should be taken into account, i.e. don't just take the last\n    // rule that matches, instead take the one with the most specifity among those that match\n    for (let i = this.cssRulesWithTimelineName.length - 1; i >= 0; i--) {\n      const current = this.cssRulesWithTimelineName[i];\n      if (target.matches(current.selector)) {\n        if (!current['animation-name'] || current['animation-name'] == animationName) {\n          return current['animation-timeline'];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseScrollTimeline(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"@scroll-timeline\");\n    this.eatWhitespace(p);\n    let name = this.parseIdentifier(p);\n    this.eatWhitespace(p);\n    this.assertString(p, \"{\"); // eats {\n    this.eatWhitespace(p);\n\n    let scrollTimeline = {\n      name: name,\n      source: \"auto\",\n      orientation: undefined,\n    };\n\n    while (this.peek(p) !== \"}\") {\n      const property = this.parseIdentifier(p);\n      this.eatWhitespace(p);\n      this.assertString(p, \":\");\n      this.eatWhitespace(p);\n      scrollTimeline[property] = this.removeEnclosingDoubleQuotes(this.eatUntil(\";\", p));\n      this.assertString(p, \";\");\n      this.eatWhitespace(p);\n    }\n\n    this.assertString(p, \"}\");\n    const endIndex = p.index;\n    this.eatWhitespace(p);\n    return {\n      scrollTimeline,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  handleScrollTimelineProps(rule, p) {\n    // The animation-timeline property may not be used in keyframes\n    if (rule.selector.includes(\"@keyframes\")) {\n      return;\n    }\n\n    // TODO is it enough to check with \"includes()\"\n    const hasAnimationName = rule.block.contents.includes(\"animation-name:\");\n    const hasAnimationTimeline = rule.block.contents.includes(\"animation-timeline:\");\n    const hasAnimation = rule.block.contents.includes(\"animation:\");\n\n    let timelineNames = [];\n    let animationNames = [];\n\n    if (hasAnimationTimeline) {\n      timelineNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_TIMELINE);\n    }\n\n    if (hasAnimationName) {\n      animationNames = this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION_NAME);\n    }\n\n    if (hasAnimationTimeline && hasAnimationName) {\n      this.saveRelationInList(rule, timelineNames, animationNames);\n      return;\n    }\n\n    if (hasAnimation) {\n      this.extractMatches(rule.block.contents, RegexMatcher.ANIMATION)\n        .forEach(shorthand => {\n          const animationName = this.extractAnimationName(shorthand);\n          const timelineName = this.extractTimelineName(shorthand);\n          if (animationName) animationNames.push(animationName);\n          if (timelineName) {\n            timelineNames.push(timelineName);\n            // Remove timeline name from animation shorthand\n            // so the native implementation works with the rest of the properties\n            // Retain length of original name though, to play nice with multiple\n            // animations that might have been applied\n            rule.block.contents = rule.block.contents.replace(\n              timelineName,\n              \" \".repeat(timelineName.length)\n            );\n            this.replacePart(\n              rule.block.startIndex,\n              rule.block.endIndex,\n              rule.block.contents,\n              p\n            );\n          }\n\n          // If there is no duration, animationstart will not happen,\n          // and polyfill will not work which is based on animationstart.\n          // Add 1s as duration to fix this.\n          if(timelineName || hasAnimationTimeline) {\n            if(!this.hasDuration(shorthand)) {\n              // TODO: Should keep track of whether duration is artificial or not,\n              // so that we can later track that we need to update timing to\n              // properly see duration as 'auto' for the polyfill.\n              rule.block.contents = rule.block.contents.replace(\n                \"animation:\",\n                \"animation: 1s \"\n              );\n              this.replacePart(\n                rule.block.startIndex,\n                rule.block.endIndex,\n                rule.block.contents,\n                p\n              );\n            }\n          }\n        });\n    }\n\n    this.saveRelationInList(rule, timelineNames, animationNames);\n  }\n\n  hasDuration(shorthand) {\n    return shorthand.split(\" \").filter(part => isTime(part)).length >= 1;\n  }\n\n  saveRelationInList(rule, timelineNames, animationNames) {\n    if (animationNames.length == 0) {\n      for (let i = 0; i < timelineNames.length; i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': undefined,\n          'animation-timeline': timelineNames[i]\n        });\n      }\n    } else {\n      for (let i = 0; i < Math.max(timelineNames.length, animationNames.length); i++) {\n        this.cssRulesWithTimelineName.push({\n          selector: rule.selector,\n          'animation-name': animationNames[i % animationNames.length],\n          'animation-timeline': timelineNames[i % timelineNames.length]\n        });\n      }\n    }\n\n  }\n\n  extractAnimationName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.keyframeNames);\n  }\n\n  extractTimelineName(shorthand) {\n    return this.findMatchingEntryInContainer(shorthand, this.scrollTimelineOptions);\n  }\n\n  findMatchingEntryInContainer(shorthand, container) {\n    const matches = shorthand.split(\" \").filter(part => container.has(part))\n    return matches ? matches[0] : null;\n  }\n\n\n  parseIdentifier(p) {\n    RegexMatcher.IDENTIFIER.lastIndex = p.index;\n    const match = RegexMatcher.IDENTIFIER.exec(p.sheetSrc);\n    if (!match) {\n      throw this.parseError(p, \"Expected an identifier\");\n    }\n    p.index += match[WHOLE_MATCH_INDEX].length;\n    return match[WHOLE_MATCH_INDEX];\n  }\n\n  /**\n   * @param {String} selector contains everything upto '{', eg: \"@keyframes expand\"\n   */\n  extractAndSaveKeyframeName(selector) {\n    if (selector.startsWith(\"@keyframes\")) {\n      selector.split(\" \").forEach((item, index) => {\n        if (index > 0) {\n          this.keyframeNames.add(item);\n        }\n      })\n    }\n  }\n\n  parseQualifiedRule(p) {\n    const startIndex = p.index;\n    const selector = this.parseSelector(p).trim();\n    if (!selector) return;\n    const block = this.eatBlock(p);\n    const endIndex = p.index;\n    return {\n      selector,\n      block,\n      startIndex,\n      endIndex,\n    };\n  }\n\n  removeEnclosingDoubleQuotes(s) {\n    let startIndex = s[0] == '\"' ? 1 : 0;\n    let endIndex = s[s.length - 1] == '\"' ? s.length - 1 : s.length;\n    return s.substring(startIndex, endIndex);\n  }\n\n  assertString(p, s) {\n    if (p.sheetSrc.substr(p.index, s.length) != s) {\n      throw this.parseError(p, `Did not find expected sequence ${s}`);\n    }\n    p.index += s.length;\n  }\n\n  replacePart(start, end, replacement, p) {\n    p.sheetSrc = p.sheetSrc.slice(0, start) + replacement + p.sheetSrc.slice(end);\n    // If we are pointing past the end of the affected section, we need to\n    // recalculate the string pointer. Pointing to something inside the section\n    // that’s being replaced is undefined behavior. Sue me.\n    if (p.index >= end) {\n      const delta = p.index - end;\n      p.index = start + replacement.length + delta;\n    }\n  }\n\n  eatComment(p) {\n    this.assertString(p, \"/*\");\n    this.eatUntil(\"*/\", p);\n    this.assertString(p, \"*/\");\n  }\n\n  eatBlock(p) {\n    const startIndex = p.index;\n    this.assertString(p, \"{\");\n    let level = 1;\n    while (level != 0) {\n      if (p.sheetSrc[p.index] === \"{\") {\n        level++;\n      } else if (p.sheetSrc[p.index] === \"}\") {\n        level--;\n      }\n      this.advance(p);\n    }\n    const endIndex = p.index;\n    const contents = p.sheetSrc.slice(startIndex, endIndex);\n\n    return { startIndex, endIndex, contents };\n  }\n\n  advance(p) {\n    p.index++;\n    if (p.index > p.sheetSrc.length) {\n      throw this.parseError(p, \"Advanced beyond the end\");\n    }\n  }\n\n  eatUntil(s, p) {\n    const startIndex = p.index;\n    while (!this.lookAhead(s, p)) {\n      this.advance(p);\n    }\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  parseSelector(p) {\n    let startIndex = p.index;\n    this.eatUntil(\"{\", p);\n    if (startIndex === p.index) {\n      throw Error(\"Empty selector\");\n    }\n\n    return p.sheetSrc.slice(startIndex, p.index);\n  }\n\n  eatWhitespace(p) {\n    // Start matching at the current position in the sheet src\n    RegexMatcher.WHITE_SPACE.lastIndex = p.index;\n    const match = RegexMatcher.WHITE_SPACE.exec(p.sheetSrc);\n    if (match) {\n      p.index += match[WHOLE_MATCH_INDEX].length;\n    }\n  }\n\n  lookAhead(s, p) {\n    return p.sheetSrc.substr(p.index, s.length) == s;\n  }\n\n  peek(p) {\n    return p.sheetSrc[p.index];\n  }\n\n  extractMatches(contents, matcher) {\n    return matcher.exec(contents)[VALUES_CAPTURE_INDEX].trim().split(\",\").map(item => item.trim());\n  }\n}\n\nfunction isTime(s) {\n  return RegexMatcher.TIME.exec(s);\n}\n\nfunction isNumber(s) {\n  return RegexMatcher.NUMBER.exec(s);\n}\n\nexport function removeKeywordsFromAnimationShorthand(anim) {\n  return anim.split(' ').filter(\n    (item, index, array) => index == array.length - 1 || !ANIMATION_KEYWORDS.includes(item))\n    .filter(item => !isTime(item) && !isNumber(item));\n}\n","import { StyleParser, RegexMatcher } from \"./scroll-timeline-css-parser\";\nimport { ProxyAnimation } from \"./proxy-animation\"\n\nconst parser = new StyleParser();\n\nfunction initMutationObserver() {\n  const sheetObserver = new MutationObserver((entries) => {\n    for (const entry of entries) {\n      for (const addedNode of entry.addedNodes) {\n        if (addedNode instanceof HTMLStyleElement) {\n          handleStyleTag(addedNode);\n        }\n        if (addedNode instanceof HTMLLinkElement) {\n          handleLinkedStylesheet(addedNode);\n        }\n      }\n    }\n\n    // TODO: Proxy element.style similar to how we proxy element.animate.\n    // We accomplish this by swapping out Element.prototype.style.\n  });\n\n  sheetObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true,\n  });\n\n  /**\n   * @param {HtmlStyleElement} el style tag to be parsed\n   */\n  function handleStyleTag(el) {\n    // Don’t touch empty style tags.\n    if (el.innerHTML.trim().length === 0) {\n      return;\n    }\n    // TODO: Do with one pass for better performance\n    let newSrc = parser.transpileStyleSheet(el.innerHTML, true);\n    newSrc = parser.transpileStyleSheet(newSrc, false);\n    el.innerHTML = newSrc;\n  }\n\n  function handleLinkedStylesheet(el) {\n    // TODO\n  }\n\n  document.querySelectorAll(\"style\").forEach((tag) => handleStyleTag(tag));\n  document\n    .querySelectorAll(\"link\")\n    .forEach((tag) => handleLinkedStylesheet(tag));\n}\n\n// This implementation is based on https://drafts.csswg.org/scroll-animations-1/\n// TODO: Should update accordingly when new spec lands.\nfunction getSourceElement(source) {\n  const matches = RegexMatcher.SOURCE_ELEMENT.exec(source);\n  const SOURCE_CAPTURE_INDEX = 1;\n  if (matches) {\n    return document.getElementById(matches[SOURCE_CAPTURE_INDEX]);\n  } else if (source === \"auto\") {\n    return document.scrollingElement;\n  } else {\n    return null;\n  }\n}\n\nfunction isDescendant(child, parent) {\n  while (child) {\n    if (child == parent) return true;\n    child = child.parentNode;\n  }\n  return false;\n}\n\nfunction createScrollTimeline(name) {\n  const options = parser.scrollTimelineOptions.get(name);\n  if (!options) return null;\n\n  const sourceElement = getSourceElement(options.source);\n\n  const scrollTimeline = new ScrollTimeline({\n    ...(sourceElement ? { source: getSourceElement(options.source) } : {}),\n    ...(options.orientation != \"auto\" ? { orientation: options.orientation } : {}),\n  });\n  return scrollTimeline;\n}\n\nexport function initCSSPolyfill() {\n  // Don't load if browser claims support\n  if (CSS.supports(\"animation-timeline: works\")) {\n    return;\n  }\n\n  initMutationObserver();\n\n  // We are not wrapping capturing 'animationstart' by a 'load' event,\n  // because we may lose some of the 'animationstart' events by the time 'load' is completed.\n  window.addEventListener('animationstart', (evt) => {\n    evt.target.getAnimations().filter(anim => anim.animationName === evt.animationName).forEach(anim => {\n      const timelineName = parser.getScrollTimelineName(anim.animationName, evt.target);\n      if (timelineName) {\n        const scrollTimeline = createScrollTimeline(timelineName);\n        if (anim.timeline != scrollTimeline) {\n          const proxyAnimation = new ProxyAnimation(anim, scrollTimeline);\n          anim.pause();\n          proxyAnimation.play();\n        }\n      }\n    });\n  });\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ScrollTimeline,\n  ViewTimeline,\n  installScrollOffsetExtension\n} from \"./scroll-timeline-base\";\nimport {\n  animate,\n  ProxyAnimation\n} from \"./proxy-animation.js\";\n\nimport { calculateOffset, parseOffset } from \"./intersection-based-offset\";\nimport { initCSSPolyfill } from \"./scroll-timeline-css\"\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\ninitCSSPolyfill();\n\nif (\n  !Reflect.defineProperty(window, \"ScrollTimeline\", { value: ScrollTimeline })\n) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\"\n  );\n}\nif (\n  !Reflect.defineProperty(window, \"ViewTimeline\", { value: ViewTimeline })\n) {\n  throw Error(\n    \"Error installing ViewTimeline polyfill: could not attach ViewTimeline to window\"\n  );\n}\n\nif (!Reflect.defineProperty(Element.prototype, \"animate\", { value: animate })) {\n  throw Error(\n    \"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\"\n  );\n}\nif (!Reflect.defineProperty(window, \"Animation\", {value: ProxyAnimation})) {\n  throw Error(\"Error installing Animation constructor.\");\n}\n"],"names":["parseLength","obj","acceptStr","CSSUnitValue","CSSMathSum","matches","trim","match","_cssOMTypes","privateDetails","WeakMap","toCssNumericArray","values","v","result","i","length","MathOperation","operator","opt_name","opt_delimiter","set","this","name","delimiter","toString","details","get","join","_createClass","key","cssOMTypes","value","unit","prototype","toLowerCase","displayUnit","CSSKeywordValue","_MathOperation","call","arguments","_inheritsLoose","CSSMathProduct","_MathOperation2","CSSMathNegate","_MathOperation3","_MathOperation4","_MathOperation5","CSSMathMax","_MathOperation6","CSSMathMin","window","CSS","Reflect","defineProperty","Error","type","forEach","installCSSOM","AUTO","scrollTimelineOptions","extensionScrollOffsetFunctions","scrollEventSource","source","document","scrollingElement","updateInternal","scrollTimelineInstance","animations","timelineTime","currentTime","tickAnimation","directionAwareScrollOffset","orientation","horizontalWritingMode","getComputedStyle","writingMode","currentScrollOffset","scrollTop","Math","abs","scrollLeft","resolvePx","cssValue","resolvedLength","TypeError","_step","total","_iterator","_createForOfIteratorHelperLoose","done","calculateScrollOffset","autoValue","offset","fn","maxValue","scrollHeight","clientHeight","scrollWidth","clientWidth","resolveScrollOffsets","scrollOffsets","fns","effectiveScrollOffsets","firstOffset","push","effectiveOffset","removeAnimation","scrollTimeline","animation","splice","addAnimation","ScrollTimeline","options","scrollOffsetFns","range","undefined","element","_this","removeEventListener","addEventListener","indexOf","_step2","offsets","_iterator2","input","parse","evaluate","parsed","data","percent","scrollerStyle","display","overflow","maxOffset","startOffset","endOffset","phase","progress","ComputeProgress","offsetIndex","getScrollParent","node","parentNode","timeline","ViewTimeline","container","target","subject","top","left","ancestor","offsetParent","offsetLeft","offsetTop","clientLeft","clientTop","style","viewSize","viewPos","containerSize","direction","calculateMaxScrollOffset","start","max","end","min","relativePosition","phaseRange","coverRange","_ScrollTimeline","axis","_this2","_assertThisInitialized","scrollPos","nativeElementAnimate","Element","animate","nativeAnimation","Animation","PromiseWrapper","state","nativeResolve","nativeReject","promise","Promise","resolve","reject","reason","createReadyPromise","readyPromise","requestAnimationFrame","notifyReady","createAbortError","DOMException","toCssNumberish","limit","effectEnd","fromCssNumberish","duration","convertedTime","to","convertTime","commitFinishedNotification","finishedPromise","proxy","playState","pause","finishedEvent","CustomEvent","detail","Object","queueMicrotask","dispatchEvent","effectivePlaybackRate","pendingPlaybackRate","playbackRate","applyPendingPlaybackRate","calculateCurrentTime","startTime","calculateStartTime","updateFinishedState","didSeek","synchronouslyNotify","unconstrainedCurrentTime","pending","upperBound","boundary","previousCurrentTime","holdTime","syncCurrentTime","then","timing","effect","getTiming","normalizedTiming","delay","endDelay","iterations","setNativeCurrentTime","time","playInternal","autoRewind","abortedPause","hasPendingReadyPromise","seekTime","resetCurrentTimeOnResume","Infinity","play","bind","pendingTask","proxyAnimations","cancel","readyTime","commitPendingPause","currentTimeToMatch","commitPendingPlay","ProxyAnimation","animationTimeline","isScrollAnimation","specifiedTiming","timelineStartTime","timelineEndTime","finish","reverse","inifiniteDuration","reversable","updatePlaybackRate","rate","persist","resetPendingTasks","_proto2","callback","event","nativeUpdateTiming","updateTiming","getComputedTimingHandler","apply","localTime","endTime","activeDuration","getTimingHandler","thisArg","INTERNAL_DURATION_MS","startDelay","assign","computedDelays","fractionalStartDelay","fractionalEndDelay","updateTimingHandler","argumentsList","Proxy","prop","getComputedTiming","createProxyEffect","newEffect","newTimeline","oldTimeline","previousPlayState","fromScrollTimeline","toScrollTimeline","timelinePhase","id","onfinish","oncancel","onremove","finished","ready","parseViewTimelineTime","defaultPercentage","exec","parseFloat","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","edge","threshold","rootMargin","clamp","map","margin","margins","split","parsedMargins","parsedValue","positions","j","RegexMatcher","IDENTIFIER","WHITE_SPACE","NUMBER","TIME","ANIMATION_TIMELINE","ANIMATION_NAME","ANIMATION","SOURCE_ELEMENT","parser","StyleParser","cssRulesWithTimelineName","Map","keyframeNames","Set","_proto","transpileStyleSheet","sheetSrc","firstPass","srcUrl","p","index","eatWhitespace","lookAhead","eatComment","parseScrollTimeline","rule","parseQualifiedRule","extractAndSaveKeyframeName","selector","handleScrollTimelineProps","getScrollTimelineName","animationName","current","startIndex","assertString","parseIdentifier","peek","property","removeEnclosingDoubleQuotes","eatUntil","endIndex","includes","hasAnimationName","block","contents","hasAnimationTimeline","hasAnimation","timelineNames","animationNames","extractMatches","shorthand","extractAnimationName","timelineName","extractTimelineName","replace","repeat","replacePart","hasDuration","saveRelationInList","filter","part","findMatchingEntryInContainer","has","lastIndex","parseError","startsWith","item","add","parseSelector","eatBlock","s","substring","substr","replacement","slice","level","advance","matcher","getSourceElement","getElementById","calculateOffset","startOrEnd","originalViewport","right","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","supports","handleStyleTag","el","innerHTML","newSrc","MutationObserver","entries","entry","addedNodes","addedNode","HTMLStyleElement","observe","documentElement","childList","subtree","querySelectorAll","tag","initMutationObserver","evt","getAnimations","anim","sourceElement","createScrollTimeline","proxyAnimation","keyframes"],"mappings":"k+CAAgBA,EAAYC,EAAKC,GAC/B,GAAID,aAAeE,cAAgBF,aAAeG,WAChD,OAAOH,EACT,IAAKC,EACH,OAAA,KACF,IAAIG,EAAUJ,EAAIK,OAAOC,MAAM,+BAC/B,OAAIF,MAISF,aAHCE,EAAQ,GAEK,KAAdA,EAAQ,GAAY,UAAYA,EAAQ,IAItD,iBCC8B,IAAAG,EAIzBC,EAAiB,IAAIC,QAmBzB,SAASC,EAAkBC,GAEzB,IADA,IAPsBC,EAOhBC,EAAS,GACNC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACjCD,EAAOC,GARQ,iBADKF,EASOD,EAAOG,IAP3B,IAAIZ,aAAaU,EAAG,UACtBA,EAQP,OAAOC,EA5BoB,IA+BvBG,aACJ,SAAYL,EAAAA,EAAQM,EAAUC,EAAUC,GACtCX,EAAeY,IAAIC,KAAM,CACvBV,OAAQD,EAAkBC,GAC1BM,SAAUA,EACVK,KAAMJ,GAAYD,EAClBM,UAAWJ,GAAiB,OArCL,OAiD3BK,EAAAA,UAAAA,SAAA,WACE,IAAMC,EAAUjB,EAAekB,IAAIL,MACnC,OAAUI,EAAQH,KAAlB,IAA0BG,EAAQd,OAAOgB,KAAKF,EAAQF,gBAnD7BK,EAAAZ,EAAA,CAAA,CAAAa,IAAA,WAAAH,IAyC3B,WACE,OAAOlB,EAAekB,IAAIL,MAAMJ,WA1CP,CAAAY,IAAA,SAAAH,IA6C3B,WACE,OAAQlB,EAAekB,IAAIL,MAAMV,WA9CRK,KAuDvBc,GACJvB,EAAA,CAAAL,aAAA,WACE,WAAY6B,EAAOC,GACjBxB,EAAeY,IAAIC,KAAM,CACvBU,MAAOA,EACPC,KAAMA,IALE,OACd9B,EAAA+B,UAoBET,SAAA,WACE,IAAMC,EAAUjB,EAAekB,IAAIL,MACnC,MAAUI,GAAAA,EAAQM,MAxExB,SAAqBC,GACnB,OAAOA,GACL,IAAK,UACH,MAAO,IACT,IAAK,SACH,MAAO,GACT,QACE,OAAOA,EAAKE,eAiEcC,CAAYV,EAAQO,OAtBlDJ,EAAA1B,EAAA,CAAA,CAAA2B,IAAA,QAAAH,IAQE,WACE,OAAOlB,EAAekB,IAAIL,MAAMU,OATpCX,IAYE,SAAUW,GACRvB,EAAekB,IAAIL,MAAMU,MAAQA,IAGnC,CAAAF,IAAA,OAAAH,IAAA,WACE,OAAQlB,EAAekB,IAAIL,MAAMW,SAlBvB9B,EACd,GA0BAkC,2BACE,SAAYL,EAAAA,GACVV,KAAKU,MAAQA,EAFjB,mBAKEP,SAAA,WACE,OAAYO,KAAAA,MAAMP,YANtBY,KAUAjC,WAAA,SAAAkC,GACE,WAAY1B,GACV,OAAA0B,EAAAC,KAAAjB,KAAMkB,UAAW,MAAO,OAAQ,aAFpC,OAAAC,EAAArC,EAAAkC,GAAAlC,EAAA,CAA4Ba,GAM5ByB,eACE,SAAAC,GAAA,SAAAD,EAAY9B,GAAQ,OACZ4B,EAAAA,KAAAA,KAAAA,UAAW,UAAW,OAAQ,QADlBlB,KADtB,OACEmB,EAAAC,EAAAC,GADFD,EACE,CAD8BzB,GAMhC2B,cACE,SAAAC,GAAA,SAAAD,EAAYhC,GAAQ,OACZiC,EAAAN,KAAAjB,KAAA,CAACkB,UAAU,IAAK,SAAU,MADdlB,KADtB,OACEmB,EAAAG,EAAAC,GAD6B5B,EAC7B,CAD6BA,IAjDjBT,EAAA,cAAA,SAAAsC,GAwDZ,WAAYlC,GACV,OAAAkC,EAAAP,KAAAjB,KAAM,CAAC,EAAGkB,UAAU,IAAK,SAAU,OAAQ,aAzDjC,OAAAC,EAAAG,EAAAE,GAAAF,EAAA,CAuDiB3B,GAvDjBT,EAAA,WA8DZ,SAAAuC,GAAA,SAAAC,IACE,OAAAD,EAAAR,KAAAjB,KAAMkB,UAAW,QAClBlB,KAhEW,OA8DZmB,EAAAO,EAAAD,KAAA,CAD0B9B,GA7DdT,EAAA,WAAA,SAAAyC,GAoEZ,aACE,OAAAA,EAAAV,KAAAjB,KAAMkB,UAAW,QADLlB,KApEF,OAAAmB,EAAAS,EAAAD,GAAAC,EAAA,CAmEcjC,GAnE9BT,GA0EA,IAAK2C,OAAOC,MACLC,QAAQC,eAAeH,OAAQ,MAAO,CAAEnB,MAAO,KAClD,MAAMuB,MACT,kCA+CD,IAAK,IAAIC,KA7CJL,OAAOhD,cACV,CACE,SACA,UAEA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,OACA,OACA,OACA,KAEA,MACA,MACA,OACA,OAEA,KACA,IACA,KACA,MAEA,OACA,MACA,OAEA,MACAsD,QAAQ,SAAClC,GAIT,IAAK8B,QAAQC,eAAeF,IAAK7B,EAAM,CAAES,MAH9B,SAACA,GACV,OAAW7B,IAAAA,aAAa6B,EAAOT,MAG/B,MAAMgC,MAA8BhC,wBAAAA,KAIzBQ,EACf,KAAIyB,KAAQL,UAEPE,QAAQC,eAAeH,OAAQK,EAAM,CAAExB,MAAOD,EAAWyB,KAC5D,MAAMD,MAA4CC,sCAAAA,GCpLxDE,GAEA,IAAMC,EAAO,IAAItB,gBAAgB,QAE7BuB,EAAwB,IAAIlD,QAC5BmD,EAAiC,GAErC,SAASC,EAAkBC,GACzB,OAAIA,IAAWC,SAASC,iBAAyBD,SAC1CD,EAOT,SAASG,EAAeC,GACtB,IACIC,EADYR,EAAsBjC,IAAIwC,GACjBC,WACzB,GAA0B,IAAtBA,EAAWpD,OAEf,IADA,IAAIqD,EAAeF,EAAuBG,YACjCvD,EAAI,EAAGA,EAAIqD,EAAWpD,OAAQD,IACrCqD,EAAWrD,GAAGwD,cAAcF,GAWhC,SAASG,EAA2BT,EAAQU,GAC1C,IAKMC,EAA6C,iBALrCC,iBAAiBZ,GAKKa,YAChCC,EAAuBd,EAAOe,UAWlC,OAVmB,cAAfL,GACe,UAAfA,GAA2BC,GACZ,SAAfD,IAA2BC,KAM7BG,EAAsBE,KAAKC,IAAIjB,EAAOkB,aAEjCJ,EAgDT,SAASK,EAAUC,EAAUC,GAC3B,GAAID,aAAoBhF,aAAc,CACpC,GAAqB,WAAjBgF,EAASlD,KACX,OAAOkD,EAASnD,MAAQoD,EAAiB,IAClCD,GAAiB,MAAjBA,EAASlD,KAChB,OAAOkD,EAASnD,YAEVqD,UAAU,uBAAyBF,EAASlD,MAC3CkD,GAAAA,aAAoB/E,WAAY,CAEzC,IADA,IACmCkF,EAD/BC,EAAQ,EACZC,EAAAC,EAAkBN,EAASvE,UAAQ0E,EAAAE,KAAAE,MACjCH,GAASL,EADwBI,EAAAtD,MACPoD,GAE5B,OAAOG,EAET,MAAMF,UAAU,kCAAoCF,GAG/C,SAASQ,EACdC,EACA7B,EACAU,EACAoB,EACAC,GAEA,GAAIA,EACF,OAAOA,EACL/B,EACAU,EACAoB,EACmB,GAAnBD,EAAU5D,MAAa,QAAU,OAGjB,UAAhByC,EAAyBA,EAAc,WAClB,WAAhBA,IAA0BA,EAAc,cAEjD,IAAIsB,EACc,aAAhBtB,EACIV,EAAOiC,aAAejC,EAAOkC,aAC7BlC,EAAOmC,YAAcnC,EAAOoC,YAElC,OAAOjB,EADMlF,EAAY6F,IAAWlC,EAAOiC,EAAYC,GAC9BE,GAYpB,SAASK,EACdrC,EACAU,EACA4B,EACAC,GAIA,IAAIC,EAAyB,GAEzBC,GAAc,EAGS,GAAxBH,EAAcrF,QAIfuF,EAAuBE,KACrBd,EACE,IAAIxF,aAAa,EAAG,WACpB4D,EACAU,EACAd,IAGJ6C,GAAc,EAIdD,EAAuBE,KACrBd,EACE,IAAIxF,aAAa,IAAK,WACtB4D,EACAU,EACAd,KAI0B,GAAxB0C,EAAcrF,SAIpBuF,EAAuBE,KACrBd,EACE,IAAIxF,aAAa,EAAG,WACpB4D,EACAU,EACAd,IAGJ6C,GAAc,GAIhB,IAAK,IAAIzF,EAAI,EAAGA,EAAIsF,EAAcrF,OAAQD,IAAK,CAI7C,IAAI2F,EAAkBf,EACpBa,EAAc,IAAIrG,aAAa,EAAG,WAAa,IAAIA,aAAa,IAAK,WACrE4D,EACAU,EACA4B,EAActF,GACduF,EAAIvF,IAEN,GAAuB,OAApB2F,EACD,MAAO,GAETH,EAAuBE,KAAKC,GAE5BF,GAAc,EAGhB,OAAOD,EAiDOI,SAAAA,EAAgBC,EAAgBC,GAE9C,IADA,IAAIzC,EAAaR,EAAsBjC,IAAIiF,GAAgBxC,WAClDrD,EAAI,EAAGA,EAAIqD,EAAWpD,OAAQD,IACjCqD,EAAWrD,GAAG8F,WAAaA,GAC7BzC,EAAW0C,OAAO/F,EAAG,GAWpB,SAASgG,EAAaH,EAAgBC,EAAWtC,GAEtD,IADA,IAAIH,EAAaR,EAAsBjC,IAAIiF,GAAgBxC,WAClDrD,EAAI,EAAGA,EAAIqD,EAAWpD,OAAQD,IACrC,GAAIqD,EAAWrD,GAAG8F,WAAaA,EAC7B,OAGJzC,EAAWqC,KAAK,CACdI,UAAWA,EACXtC,cAAeA,IAEjBL,EAAe0C,GAQjB,IAAaI,aACX,SAAYC,EAAAA,GACVrD,EAAsBvC,IAAIC,KAAM,CAC9ByC,OAAQ,KACRU,YAAa,QACb4B,cAAe,GAGfjC,WAAY,GACZ8C,gBAAiB,GACjBC,MAAO,OAET7F,KAAKyC,OACHkD,QAA8BG,IAAnBH,EAAQlD,OAAuBkD,EAAQlD,OAASC,SAASC,iBACtE3C,KAAKmD,YAAewC,GAAWA,EAAQxC,aAAgB,QACvDnD,KAAK+E,cAAgBY,QAAqCG,IAA1BH,EAAQZ,cAA8BY,EAAQZ,cAAgB,GA8KlG,OA7LAxE,EAAAmF,EAAA,CAAA,CAAAlF,IAAA,SAAAH,IAgCE,WACE,OAAOiC,EAAsBjC,IAAIL,MAAMyC,QAjC3C1C,IAkBE,SAAWgG,GACT,IAAAC,EAAAhG,KAAIA,KAAKyC,QACPD,EAAkBxC,KAAKyC,QAAQwD,oBAAoB,SAAU,WAC3DrD,OAAAA,EAAeoD,KAEnB1D,EAAsBjC,IAAIL,MAAMyC,OAASsD,EACrCA,GACFvD,EAAkBuD,GAASG,iBAAiB,SAAU,WAAA,OACpDtD,EAAeoD,KAGnBpD,EAAe5C,QAiBjB,CAAAQ,IAAA,cAAAH,IAAA,WACE,OAAOiC,EAAsBjC,IAAIL,MAAMmD,aA/C3CpD,IAoCE,SAAgBoD,GACd,IAC0E,IAAxE,CAAC,QAAS,SAAU,aAAc,YAAYgD,QAAQhD,GAEtD,MAAMY,UAAU,uBAElBzB,EAAsBjC,IAAIL,MAAMmD,YAAcA,EAC9CP,EAAe5C,QA3CnB,CAAAQ,IAAA,gBAAAH,IAsFE,WAEE,OADWiC,EAAsBjC,IAAIL,MACzB+E,eAxFhBhF,IAkDE,SAAkBW,GAGhB,IAFA,IAEyB0F,EAFrBC,EAAU,GACVrB,EAAM,GACQtE,EAAAA,EAAAA,KAAO0F,EAAAE,KAAAlC,MAAA,CAAA,IAAhBmC,EAAgBH,EAAA1F,MACnB8D,EAAK,KACLD,OAASuB,EACA,QAATS,IACFA,EAAQlE,GACV,IAAK,IAAI5C,EAAI,EAAGA,EAAI8C,EAA+B7C,OAAQD,IAAK,CAC9D,IAAID,EAAS+C,EAA+B9C,GAAG+G,MAAMD,GACrD,QAAeT,IAAXtG,EAAsB,CACxB+E,EAAS/E,EACTgF,EAAKjC,EAA+B9C,GAAGgH,SACvC,OAGJ,IAAKjC,EAAI,CACP,GAAI+B,GAASlE,EAAM,CACjB,IAAIqE,EAAShI,EAAY6H,GAEzB,IAAKG,GAAWA,aAAkB7H,cAA+B,UAAf6H,EAAO/F,KACvD,MAAMoD,UAAU,gCAEpBQ,EAASgC,EAEXF,EAAQlB,KAAKZ,GACbS,EAAIG,KAAKX,GAEX,GAAsB,GAAlB6B,EAAQ3G,QAAe2G,EAAQ,IAAMhE,EACvC,MAAM0B,UAAU,gCAClB,IAAI4C,EAAOrE,EAAsBjC,IAAIL,MACrC2G,EAAK5B,cAAgBsB,EACrBM,EAAKf,gBAAkBZ,EACvBpC,EAAe5C,QAQjB,CAAAQ,IAAA,WAAAH,IAAA,WACE,OAAOyB,IAAI8E,QAAQ,OAGrB,CAAApG,IAAA,QAAAH,IAAA,WAKE,IAAKL,KAAKyC,OAAQ,MAAO,WACzB,IAAIoE,EAAgBxD,iBAAiBrD,KAAKyC,QAG1C,GAA6B,QAAzBoE,EAAcC,QAChB,MAAO,WAGT,GAAI9G,KAAKyC,QAAUC,SAASC,mBACG,WAA1BkE,EAAcE,UACY,QAA1BF,EAAcE,UACf,MAAO,WAGX,IAAI9B,EAAyBH,EAC3B9E,KAAKyC,OACLzC,KAAKmD,YACLnD,KAAK+E,cACLzC,EAAsBjC,IAAIL,MAAM4F,iBAIlC,GAAqC,GAAjCX,EAAuBvF,OACzB,MAAO,WAET,IAAIsH,EAAY3C,EACd,IAAIxF,aAAa,IAAK,WACtBmB,KAAKyC,OACLzC,KAAKmD,YACL,IAAItE,aAAa,IAAK,WACtB,MAEEoI,EAAchC,EAAuB,GACrCiC,EAAYjC,EAAuBA,EAAuBvF,OAAS,GAGjE6D,EACFL,EAA2BlD,KAAKyC,OAAQzC,KAAKmD,aAGjD,OAAII,EAAsB0D,EACjB,SACL1D,GAAuB2D,GAAaA,EAAYF,EAC3C,QACF,WAGT,CAAAxG,IAAA,cAAAH,IAAA,WAIE,IAAKL,KAAKyC,OAAQ,OADD,KAEjB,GAAkB,YAAdzC,KAAKmH,MACP,OAHe,KAKjB,IAAIlC,EAAyBH,EAC3B9E,KAAKyC,OACLzC,KAAKmD,YACLnD,KAAK+E,cACLzC,EAAsBjC,IAAIL,MAAM4F,iBAE9BqB,EAAchC,EAAuB,GACrCiC,EAAYjC,EAAuBA,EAAuBvF,OAAS,GAGjE6D,EACFL,EAA2BlD,KAAKyC,OAAQzC,KAAKmD,aAGjD,GAAII,EAAsB0D,EACxB,OAAOnF,IAAI8E,QAAQ,GAGrB,GAAIrD,GAAuB2D,EACzB,OAAOpF,IAAI8E,QAAQ,KAGrB,IAAIQ,EA1PQC,SACd9C,EACAQ,GAOA,IAAIuC,EACJ,IAAKA,EAAcvC,EAAcrF,OAAS,EACrC4H,GAAe,KACXvC,EAAcuC,IAAgB/C,GAAUA,EAASQ,EAAcuC,EAAc,IACjFA,KAIL,IAAIL,EAAclC,EAAcuC,GAahC,OAAQA,GAHiB/C,EAAS0C,IAPlBlC,EAAcuC,EAAc,GAOkBL,KAH3C,GAFRlC,EAAcrF,OAEM,IAkOd2H,CACb9D,EACA0B,GAEF,OAAOnD,IAAI8E,QAAQ,IAAMQ,KArL7B,CAAA5G,IAAA,aAAAH,IAwLE,WACE,OACD,MAGHqF,KAAA,SAAS6B,EAAgBC,GACvB,GAAKA,EAIL,OADcnE,iBAAiBmE,GAClB,eACX,IAAK,OACL,IAAK,SACL,IAAK,SACH,OAAOA,EAET,QACE,OAAOD,EAAgBC,EAAKC,aAUlC,SAAS5B,EAAM6B,EAAUP,GACvB,IAAM/G,EAAUkC,EAAsBjC,IAAIqH,GAG1C,GAAuB,aAAnBA,EAASP,MACX,OAFiB,KAInB,KAAMO,aAAoBC,GACxB,OALiB,KAgBnB,IAPA,IAAMC,EAAYF,EAASjF,OACrBoF,EAASH,EAASI,QAEpBC,EAAM,EACNC,EAAO,EACPR,EAAOK,EACLI,EAAWL,EAAUM,aACpBV,GAAQA,GAAQS,GACrBD,GAAQR,EAAKW,WACbJ,GAAOP,EAAKY,UACZZ,EAAOA,EAAKU,aAEdF,GAAQJ,EAAUO,WAAaP,EAAUS,WACzCN,GAAOH,EAAUQ,UAAYR,EAAUU,UAKvC,IAAMC,EAAQlF,iBAAiBuE,GACzBxE,EAA6C,iBAArBmF,EAAMjF,YAEhCkF,OAAW1C,EACX2C,OAAU3C,EACV4C,OAAgB5C,EACd3C,EAAc/C,EAAQ+C,YACT,cAAfA,GACgB,UAAfA,GAA2BC,GACZ,SAAfD,IAA2BC,GAC9BoF,EAAWX,EAAOhD,YAClB4D,EAAUT,EATmB,OAAnBO,EAAMI,YAWdF,GAAWb,EAAUhD,YAAcgD,EAAU/C,aAC/C6D,EAAgBd,EAAU/C,cAG1B2D,EAAWX,EAAOlD,aAClB8D,EAAUV,EACVW,EAAgBd,EAAUjD,cAGVzB,EAA2B0E,EAAWzE,GACxD,IAAI8D,OAAcnB,EACdoB,OAAYpB,EAEhB,OAAOqB,GACL,IAAK,QAGHF,EAAcwB,EAAUC,EACxBxB,EAAYuB,EAAUD,EACtB,MAEF,IAAK,UAKHvB,EAAcwB,EAAUD,EAAWE,EACnCxB,EAAYuB,EACZ,MAEF,IAAK,QAGHxB,EAAcwB,EAAUC,EACxBxB,EAAYuB,EAAUD,EAAWE,EACjC,MAEF,IAAK,OAGHzB,EAAcwB,EACdvB,EAAYuB,EAAUD,EAK1B,IAAMxB,EA5gBQ4B,SAAyBnG,EAAQU,GAG/C,IAAMC,EACoC,iBAAxCC,iBAAiBZ,GAAQa,YAK3B,MAJoB,UAAhBH,EACFA,EAAcC,EAAwB,WAAa,aAC5B,WAAhBD,IACPA,EAAcC,EAAwB,aAAe,YACnC,aAAhBD,EACKV,EAAOiC,aAAejC,EAAOkC,aACb,eAAhBxB,EACAV,EAAOmC,YAAcnC,EAAOoC,iBAD5B1B,EAigBSyF,CAAyBhB,EAAWzE,GAItD,MAAO,CAAE0F,MAHT5B,EAAcxD,KAAKqF,IAAI,EAAG7B,GAGG8B,IAF7B7B,EAAYzD,KAAKuF,IAAIhC,EAAWE,IAO3B,SAAS+B,EAAiBvB,EAAUP,EAAOP,GAChD,IAAMsC,EAAarD,EAAM6B,EAAUP,GAC7BgC,EAAatD,EAAM6B,EAAU,SACnC,OAAKwB,GAAeC,GAGHvC,EAAQlG,MAAQ,KAE5BwI,EAAWH,IAAMG,EAAWL,OAAoBK,EAAWL,MAC/CM,EAAWN,QAAUM,EAAWJ,IAAMI,EAAWN,SAIvDlB,IAAAA,EASX,SAAAyB,GAAA,SAAAzB,EAAYhC,SAAS,OAMnBA,EAAQlD,OAAS8E,EAAgB5B,EAAQmC,QAAQL,YAC7C9B,EAAQ0D,OAGV1D,EAAQxC,YAAcwC,EAAQ0D,MAGhCC,EAAM3D,EAAAA,KAAAA,KAAAA,SAEUrD,EAAsBjC,6HAAtCkJ,CAAAD,IACQxB,QAAUnC,GAAWA,EAAQmC,QAAUnC,EAAQmC,aAAUhC,EAElEwD,SAlBDnI,EAAAwG,EAAAyB,GATF7I,EA6BEoH,EAAA,CAAA,CAAAnH,IAAA,UAAAH,IAAA,WACE,OAAOiC,EAAsBjC,IAAIL,MAAM8H,UAKzC,CAAAtH,IAAA,OAAAH,IAAA,WACE,OAAOiC,EAAsBjC,IAAIL,MAAMmD,cApC3C,CAAA3C,IAAA,QAAAH,IAuCE,WACE,IAAKL,KAAK8H,QACR,MAAO,WAET,IAAMF,EAAY5H,KAAKyC,OACvB,IAAKmF,EACH,MAAO,WAET,IAAIf,EAAgBxD,iBAAiBuE,GAErC,MAA6B,QAAzBf,EAAcC,QACT,WAELc,GAAalF,SAASC,kBACK,WAA1BkE,EAAcE,UACY,QAA1BF,EAAcE,SAIZ,SAHI,oCAMb,WACE,IAAMyC,EAAYtG,EAA2BlD,KAAKyC,OAAQzC,KAAKmD,aACzDkD,EAAUR,EAAM7F,KAAM,SAC5B,GAAKqG,EAKL,OAAOvE,IAAI8E,SAFN4C,EAAYnD,EAAQwC,QAAUxC,EAAQ0C,IAAM1C,EAAQwC,OAEtC,WA5DrB,CATgCnD,GC/nB5B+D,EAAuB5H,OAAO6H,QAAQ9I,UAAU+I,QAChDC,EAAkB/H,OAAOgI,UAEzBC,aACJ,SAAcA,IAAA,IAAA9D,EAAAhG,KACZA,KAAK+J,MAAQ,UACb/J,KAAKgK,cAAgBhK,KAAKiK,aAAe,KACzCjK,KAAKkK,QAAU,IAAIC,QAAQ,SAACC,EAASC,GACnCrE,EAAKgE,cAAgBI,EACrBpE,EAAKiE,aAAeI,+BAGxBD,QAAA,SAAQ1J,GACNV,KAAK+J,MAAQ,WACb/J,KAAKgK,cAActJ,MAErB2J,OAAA,SAAOC,GACLtK,KAAK+J,MAAQ,WAEb/J,KAAKkK,cAAc,cACnBlK,KAAKiK,aAAaK,SAItB,SAASC,EAAmBnK,GAC1BA,EAAQoK,aAAe,IAAIV,EAE3BW,sBAAsB,WAEC,OADArK,EAAQsH,SAAS1E,aAEpC0H,EAAYtK,KAIlB,SAASuK,IACP,OAAWC,IAAAA,aAAa,6BAA8B,cAOxD,SAASC,EAAezK,EAASM,GAC/B,GAAc,OAAVA,EACF,OAAOA,EAET,GAAqB,iBAAVA,EACP,UAAUkK,kCACelK,EADnB,oCAEF,qBAGR,IAAMoK,EAAQC,EAAU3K,GAExB,OAAO0B,IAAI8E,QADKkE,EAAQ,IAAMpK,EAAQoK,EAAQ,GAQhD,SAASE,EAAiB5K,EAASM,GACjC,GAAKN,EAAQsH,SAaN,CAEL,GAAc,OAAVhH,EACF,OAAOA,EAET,GAAmB,YAAfA,EAAMC,KAAoB,CAC5B,IAAMsK,EAAWF,EAAU3K,GAC3B,OAAOM,EAAMA,MAAQuK,EAAW,IAGlC,UAAUL,aACN,sEACA,qBAvBJ,GAAa,MAATlK,GAAkC,iBAAVA,EAC1B,OAAOA,EAET,IAAMwK,EAAgBxK,EAAMyK,GAAG,MAC/B,GAAIC,YACF,OAAOF,EAAcxK,MAEvB,UAAUkK,aACN,qFAEA,qBA8HR,SAASS,EAA2BjL,GAClC,GAAKA,EAAQkL,iBAAoD,WAAjClL,EAAQkL,gBAAgBvB,OAGzB,YAA3B3J,EAAQmL,MAAMC,UAAlB,CAGApL,EAAQkL,gBAAgBlB,QAAQhK,EAAQmL,OAExCnL,EAAQmF,UAAUkG,QAMlB,IAAMC,EACJ,IAAIC,YAAY,SACA,CAAEC,OAAQ,CACR5I,YAAa5C,EAAQmL,MAAMvI,YAC3BD,aAAc3C,EAAQmL,MAAM7D,SAAS1E,eAEzD6I,OAAO7J,eAAe0J,EAAe,cAAe,CAClDrL,IAAK,WAAa,OAAOL,KAAK4L,OAAO5I,eAEvC6I,OAAO7J,eAAe0J,EAAe,eAAgB,CACnDrL,IAAK,WAAa,OAAOL,KAAK4L,OAAO7I,gBAGvC0H,sBAAsB,WACpBqB,eAAe,WACb1L,EAAQmF,UAAUwG,cAAcL,QAKtC,SAASM,EAAsB5L,GAC7B,OAAoC,OAAhCA,EAAQ6L,oBACH7L,EAAQ6L,oBACV7L,EAAQmF,UAAU2G,aAG3B,SAASC,EAAyB/L,GACI,OAAhCA,EAAQ6L,sBACV7L,EAAQmF,UAAU2G,aAAe9L,EAAQ6L,oBACzC7L,EAAQ6L,oBAAsB,MAIlC,SAASG,EAAqBhM,GAC5B,IAAKA,EAAQsH,SACX,OAAA,KAEF,IAAM3E,EAAeiI,EAAiB5K,EAASA,EAAQsH,SAAS1E,aAChE,GAAqB,OAAjBD,EACF,YAEF,GAA0B,OAAtB3C,EAAQiM,UACV,OAAO,KAET,IAAIrJ,GACCD,EAAe3C,EAAQiM,WAAajM,EAAQmF,UAAU2G,aAM3D,OAHoB,GAAhBlJ,IACFA,EAAc,GAETA,EAGT,SAASsJ,EAAmBlM,EAAS4C,GACnC,IAAK5C,EAAQsH,SACX,OAAO,KAET,IAAM3E,EAAeiI,EAAiB5K,EAASA,EAAQsH,SAAS1E,aAChE,OAAoB,MAAhBD,OAGGA,EAAeC,EAAc5C,EAAQmF,UAAU2G,aAGxD,SAASK,EAAoBnM,EAASoM,EAASC,GAC7C,GAAKrM,EAAQsH,SAAb,CAQA,IAAIgF,EACAF,EAAUxB,EAAiB5K,EAASA,EAAQmL,MAAMvI,aACxCoJ,EAAqBhM,GAGnC,GAAIsM,GAAiD,MAArBtM,EAAQiM,YACnCjM,EAAQmL,MAAMoB,QAAS,CAQ1B,IAAMT,EAAeF,EAAsB5L,GACrCwM,EAAa7B,EAAU3K,GACzByM,EAAWzM,EAAQ0M,oBACnBZ,EAAe,GAAKQ,GAA4BE,IACjC,OAAbC,GAAqBA,EAAWD,KAClCC,EAAWD,GACbxM,EAAQ2M,SAAWP,EAAUE,EAA2BG,GAC/CX,EAAe,GAAKQ,GAA4B,IACzC,MAAZG,GAAoBA,EAAW,KACjCA,EAAW,GACbzM,EAAQ2M,SAAWP,EAAUE,EAA2BG,GAC/B,GAAhBX,IAELM,GAAgC,OAArBpM,EAAQ2M,WACrB3M,EAAQiM,UAAYC,EAAmBlM,EAASA,EAAQ2M,WAC1D3M,EAAQ2M,SAAW,MAMvBC,EAAgB5M,GAGhBA,EAAQ0M,oBAAsB9B,EAAiB5K,EACAA,EAAQmL,MAAMvI,aAK5C,YAFC5C,EAAQmL,MAAMC,WAGzBpL,EAAQkL,kBACXlL,EAAQkL,gBAAkB,IAAIxB,GACK,WAAjC1J,EAAQkL,gBAAgBvB,QAEtB0C,EACFpB,EAA2BjL,GAE3B+J,QAAQC,UAAU6C,KAAK,WACrB5B,EAA2BjL,QAO7BA,EAAQkL,iBACyB,YAAjClL,EAAQkL,gBAAgBvB,QAC1B3J,EAAQkL,gBAAkB,IAAIxB,GAEG,UAA/B1J,EAAQmF,UAAUiG,WACpBpL,EAAQmF,UAAUkG,UAIxB,SAASV,EAAU3K,GAEjB,IAAM8M,EA7QR,SAA0B9M,GAIxB,IAAM8M,EAAS9M,EAAQmL,MAAM4B,OAAOC,YACpC,OAAOhN,EAAQiN,kBAAoBH,EAwQpBG,CAAiBjN,GAIhC,OAAOqD,KAAKqF,IAAI,EAFboE,EAAOI,MAAQJ,EAAOK,SAAWL,EAAOM,WAAaN,EAAOjC,UASjE,SAAS+B,EAAgB5M,GAClBA,EAAQsH,WAIa,OAAtBtH,EAAQiM,UAGVoB,EAAqBrN,GAFA4K,EAAiB5K,EACAA,EAAQsH,SAAS1E,aAElB5C,EAAQiM,WACpBjM,EAAQmF,UAAU2G,cACb,OAArB9L,EAAQ2M,UACjBU,EAAqBrN,EAASA,EAAQ2M,WAM1C,SAASU,EAAqBrN,EAASsN,GAOrCtN,EAAQmF,UAAUvC,YAAc0K,GANftN,EAAQsH,SAEZ1E,YAAYtC,QAAUV,KAAKkM,aAAe,EAAI,EAAI,KAE/BlM,KAAKkM,aAAe,EAAI,MAAS,KAAS,GA8B5E,SAASyB,EAAavN,EAASwN,GAC7B,GAAKxN,EAAQsH,SAAb,CAMA,IAAMmG,EACwB,UAA3BzN,EAAQmL,MAAMC,WAAyBpL,EAAQmL,MAAMoB,QAIpDmB,GAAyB,EAGzBC,EAAW,KA+BXjB,EAAsB9B,EAAiB5K,EACAA,EAAQmL,MAAMvI,aAIrD5C,EAAQ4N,2BACVlB,EAAsB,KACtB1M,EAAQ4N,0BAA2B,GAGrC,IAAM9B,EAAeF,EAAsB5L,GACrCwM,EAAa7B,EAAU3K,GAC7B,GAAI8L,EAAe,GAAK0B,IAAsC,MAAvBd,GACAA,EAAsB,GACtBA,GAAuBF,GAC5DmB,EAAW,OACN,GAAI7B,EAAe,GAAK0B,IACI,MAAvBd,GAA+BA,GAAuB,GACvDA,EAAsBF,GAAa,CAC5C,GAAkBqB,UAAdrB,EAGF,YADAxM,EAAQmF,UAAU2I,OAGpBH,EAAWnB,OACc,GAAhBV,GAA4C,MAAvBY,IAC9BiB,EAAW,GAOG,MAAZA,IACF3N,EAAQiM,UAAY0B,EACpB3N,EAAQ2M,SAAW,KACnBZ,EAAyB/L,IAI3BqF,EAAarF,EAAQsH,SAAUtH,EAAQmF,UAC1BtC,EAAckL,KAAK/N,EAAQmL,QAIpCnL,EAAQ2M,WACV3M,EAAQiM,UAAY,MAMlBjM,EAAQgO,cACVhO,EAAQgO,YAAc,KACtBN,GAAyB,IASF,OAArB1N,EAAQ2M,UAAkC,OAAbgB,GAC5BF,GAAgD,OAAhCzN,EAAQ6L,uBAKzB7L,EAAQoK,eAAiBsD,IAC3B1N,EAAQoK,aAAe,MAIzBwC,EAAgB5M,GAGXA,EAAQoK,cACXD,EAAmBnK,GACrBA,EAAQgO,YAAc,OAKtB7B,EAAoBnM,GAAoB,GAAyB,KAGnE,SAAS6C,EAAcF,GACrB,IAAM3C,EAAUiO,EAAgBhO,IAAIL,MACpC,GAAoB,MAAhB+C,EAAJ,CAQI3C,EAAQgO,aACV1D,EAAYtK,GAGd,IAAMoL,EAAYxL,KAAKwL,UACN,WAAbA,GAAuC,YAAbA,IAc5BiC,EACIrN,GAdiB4K,EAAiB5K,EAAS2C,GAezBiI,EAAiB5K,EAASJ,KAAKqM,YAC7CrM,KAAKkM,cAMI,YAAbV,GAA6D,GAAlCQ,EAAsB5L,KACnDA,EAAQ2M,SAAW,MACrBR,EAAoBnM,GAAS,GAAO,QAnCD,QAA/BA,EAAQmF,UAAUiG,WACpBpL,EAAQmF,UAAU+I,SAsCxB,SAAS5D,EAAYtK,GACQ,SAAvBA,EAAQgO,YAtbd,SAA4BhO,GAO1B,IAAMmO,EAAYvD,EAAiB5K,EAASA,EAAQsH,SAAS1E,aAKpC,MAArB5C,EAAQiM,WAAyC,MAApBjM,EAAQ2M,WACvC3M,EAAQ2M,UACHwB,EAAYnO,EAAQiM,WAAajM,EAAQmF,UAAU2G,cAI1DC,EAAyB/L,GAGzBA,EAAQiM,UAAY,KAGpBjM,EAAQoK,aAAaJ,QAAQhK,EAAQmL,OAKrCgB,EAAoBnM,GAAS,GAAO,GAGpC4M,EAAgB5M,GAChBA,EAAQgO,YAAc,KAsZpBI,CAAmBpO,GACa,QAAvBA,EAAQgO,aAzfrB,SAA2BhO,GAIzB,IAAM2C,EAAeiI,EAAiB5K,EAASA,EAAQsH,SAAS1E,aAChE,GAAwB,MAApB5C,EAAQ2M,SAUVZ,EAAyB/L,GACa,GAAlCA,EAAQmF,UAAU2G,aACpB9L,EAAQiM,UAAYtJ,GAEpB3C,EAAQiM,UACFtJ,EACE3C,EAAQ2M,SAAW3M,EAAQmF,UAAU2G,aAC7C9L,EAAQ2M,SAAW,WAEhB,GAA0B,OAAtB3M,EAAQiM,WACwB,OAAhCjM,EAAQ6L,oBAA8B,CAc/C,IAAMwC,GACD1L,EAAe3C,EAAQiM,WAAajM,EAAQmF,UAAU2G,aAC3DC,EAAyB/L,GACzB,IAAM8L,EAAe9L,EAAQmF,UAAU2G,aACnB,GAAhBA,GACF9L,EAAQ2M,SAAW,KACnB3M,EAAQiM,UAAYtJ,GAEpB3C,EAAQiM,UAAYtJ,EAAe0L,EAAqBvC,EAKxD9L,EAAQoK,cAA8C,WAA9BpK,EAAQoK,aAAaT,OAC9C3J,EAAQoK,aAAaJ,QAAQhK,EAAQmL,OAKxCgB,EAAoBnM,GAAS,GAAO,GAGpC4M,EAAgB5M,GAChBA,EAAQgO,YAAc,KA4bpBM,CAAkBtO,GAuKtB,IAAIiO,EAAkB,IAAIjP,QAEbuP,aACX,SAAYxB,EAAAA,EAAQzF,GAClB,IAAMnC,EACD4H,aAAkBvD,EAChBuD,EAAS,IAAIvD,EAAgBuD,EAAQyB,GACtCC,EAAoBnH,aAAoBhC,EACxCkJ,EAAoBC,OAAoB/I,EAAY4B,EAC1D2G,EAAgBtO,IAAIC,KAAM,CACxBuF,UAAWA,EACXmC,SAAUmH,EAAoBnH,OAAW5B,EACzC0F,UAAWqD,EAAoB,OAAS,KACxCrE,aAAc,KACdc,gBAAiB,KAQjBe,UAAW,KACXU,SAAU,KACVD,oBAAqB,KAGrBkB,0BAA0B,EAK1B/B,oBAAqB,KACrBmC,YAAa,KAKbU,gBAAiB,KAGjBzB,iBAAkB,KAGlBF,OAAQ,KAGR4B,kBAAmB,KACnBC,gBAAiB,KACjBzD,MAAOvL,OA/Cb,IAocEiP,EAAAA,EAAAA,UAgXD,OAhXCA,EAAAA,OAAA,WACE,IAAM7O,EAAUiO,EAAgBhO,IAAIL,MACpC,GAAKI,EAAQsH,SAAb,CAQA,IAAMwE,EAAeF,EAAsB5L,GACrC6K,EAAWF,EAAU3K,GAC3B,GAAoB,GAAhB8L,EACF,MAAUtB,IAAAA,aACN,oDACA,qBAEN,GAAIsB,EAAe,GAAiB+B,UAAZhD,EACtB,MAAM,IAAIL,aACN,8DACA,qBAINuB,EAAyB/L,GAOzB,IAAM0K,EAAQoB,EAAe,EAAI,EAAIjB,EAGrCjL,KAAKgD,YAAc6H,EAAezK,EAAS0K,GAQ3C,IAAM/H,EAAeiI,EAAiB5K,EACAA,EAAQsH,SAAS1E,aAE7B,OAAtB5C,EAAQiM,WAAuC,OAAjBtJ,IAC/B3C,EAAQiM,UACJtJ,EAAgB+H,EAAQ1K,EAAQmF,UAAU2G,cAOtB,SAAvB9L,EAAQgO,aAAgD,OAAtBhO,EAAQiM,YAC5CjM,EAAQ2M,SAAW,KACnB3M,EAAQgO,YAAc,KACtBhO,EAAQoK,aAAaJ,QAAQpK,OAMJ,QAAvBI,EAAQgO,aAA+C,OAAtBhO,EAAQiM,YAC3CjM,EAAQgO,YAAc,KACtBhO,EAAQoK,aAAaJ,QAAQpK,OAM/BuM,EAAoBnM,GAAS,GAAM,QApEjCA,EAAQmF,UAAU0J,YAuEtBf,KAAA,WACE,IAAM9N,EAAUiO,EAAgBhO,IAAIL,MAC/BI,EAAQsH,SAKbiG,EAAavN,GAA0B,GAJrCA,EAAQmF,UAAU2I,QAOtBzC,EAAAA,MAAA,WACE,IAAMrL,EAAUiO,EAAgBhO,IAAIL,MACpC,GAAKI,EAAQsH,UASb,GAAsB,UAAlB1H,KAAKwL,UAAT,CAQA,IAAIuC,EAAW,KAaT7B,EAAe9L,EAAQmF,UAAU2G,aACjCjB,EAAWF,EAAU3K,GAE3B,GAAsC,OAAlCA,EAAQmF,UAAUvC,YACpB,GAAIkJ,GAAgB,EAClB6B,EAAW,MACF9C,CAAAA,GAAYgD,UAAZhD,EAGT,YADA7K,EAAQmF,UAAUkG,QAGlBsC,EAAW9C,EAOE,OAAb8C,IACF3N,EAAQiM,UAAY0B,GAQK,QAAvB3N,EAAQgO,YACVhO,EAAQgO,YAAc,KAEtBhO,EAAQoK,aAAe,KAKpBpK,EAAQoK,cACXD,EAAmBnK,GACrBA,EAAQgO,YAAa,cAlEnBhO,EAAQmF,UAAUkG,SAqEtByD,EAAAA,QAAA,WACE,IAAM9O,EAAUiO,EAAgBhO,IAAIL,MAC9BkM,EAAeF,EAAsB5L,GACrC0M,EACF1M,EAAQ4N,yBACJ,KAAOhD,EAAiB5K,EAASJ,KAAKgD,aACxCmM,EAA0ClB,UAAtBlD,EAAU3K,GAK9BgP,EACc,GAAhBlD,IACAA,EAAgB,GAAKY,EAAsB,IAAOqC,GACtD,IAAK/O,EAAQsH,WAAa0H,EAIxB,OAHIA,IACFhP,EAAQ6L,qBAAuBD,EAAsB5L,SACvDA,EAAQmF,UAAU2J,UAIpB,GAA8B,YAA1B9O,EAAQsH,SAASP,MACnB,UAAUyD,aACN,sDACA,qBAGN5K,KAAKqP,oBAAoBnD,GACzByB,EAAavN,GAA0B,IAGzCiP,EAAAA,mBAAA,SAAmBC,GACjB,IAAMlP,EAAUiO,EAAgBhO,IAAIL,MAEpC,GADAI,EAAQ6L,oBAAsBqD,EACzBlP,EAAQsH,UAkBb,IAAItH,EAAQoK,cAA8C,WAA9BpK,EAAQoK,aAAaT,MAGjD,OAV0B/J,KAAKwL,WAa7B,IAAK,OACL,IAAK,SACHW,EAAyB/L,GACzB,MAkBF,IAAK,WACH,IAAM2C,EAAeiI,EAAiB5K,EACAA,EAAQsH,SAAS1E,aACjD0J,EAA4C,OAAjB3J,GAC5BA,EAAe3C,EAAQiM,WAAajM,EAAQmF,UAAU2G,aACrD,KAEJ9L,EAAQiM,UADE,GAARiD,EACkBvM,EAGA,MAAhBA,GAAoD,MAA5B2J,GACnB3J,EAAe2J,GAA4B4C,EAAO,KAE7DnD,EAAyB/L,GACzBmM,EAAoBnM,GAAS,GAAO,GACpC4M,EAAgB5M,GAChB,MAKF,QACEuN,EAAavN,GAAS,SAlExBA,EAAQmF,UAAU8J,mBAAmBC,MAsEzCC,QAAA,WACElB,EAAgBhO,IAAIL,MAAMuF,UAAUgK,aAOtCjB,OAAA,WACE,IAAMlO,EAAUiO,EAAgBhO,IAAIL,MAC/BI,EAAQsH,UAmBS,QAAlB1H,KAAKwL,YA7lCb,SAA2BpL,GAKpBA,EAAQgO,cAKbhO,EAAQgO,YAAc,KAGtBjC,EAAyB/L,GAIzBA,EAAQoK,aAAaH,OAAOM,KAI5BJ,EAAmBnK,GACnBA,EAAQoK,aAAaJ,QAAQhK,EAAQmL,QAwkCjCiE,CAAkBpP,GACdA,EAAQkL,iBACyB,WAAjClL,EAAQkL,gBAAgBvB,OAC1B3J,EAAQkL,gBAAgBjB,OAAOM,KAEjCvK,EAAQkL,gBAAkB,IAAIxB,EAC9B1J,EAAQmF,UAAU+I,UAKpBlO,EAAQiM,UAAY,KACpBjM,EAAQ2M,SAAW,KAGnB1H,EAAgBjF,EAAQsH,SAAUtH,EAAQmF,YAlCxCnF,EAAQmF,UAAU+I,UAptBxBmB,EAuyBEvJ,iBAAA,SAAiBhE,EAAMwN,EAAU/J,GAC/B0I,EAAgBhO,IAAIL,MAAMuF,UAAUW,iBAAiBhE,EAAMwN,EACN/J,IAGvDM,EAAAA,oBAAA,SAAoB/D,EAAMwN,EAAU/J,GAClC0I,EAAgBhO,IAAIL,MAAMuF,UAAUU,oBAAoB/D,EAAMwN,EACN/J,IAG1DoG,EAAAA,cAAA,SAAc4D,GACZtB,EAAgBhO,IAAIL,MAAMuF,UAAUwG,cAAc4D,2BA3vBpD,WACE,IAAMvP,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAKI,EAAQsH,UAKRtH,EAAQ+M,SACX/M,EAAQ+M,OApOd,SAA2B/M,GACzB,IAAM+M,EAAS/M,EAAQmF,UAAU4H,OAC3ByC,EAAqBzC,EAAO0C,aAmB5BC,EAA2B,CAC/BC,MAAO,SAASlI,GAEdsF,EAAOC,YAEP,IAAMF,EAASrF,EAAOkI,MAAM5C,GAE5B,GAAI/M,EAAQsH,SAAU,CAEpBwF,EAAO8C,UAAYnF,EAAezK,EAAS8M,EAAO8C,WAClD9C,EAAO+C,QAAUpF,EAAezK,EAAS8M,EAAO+C,SAChD/C,EAAOgD,eACHrF,EAAezK,EAAS8M,EAAOgD,gBACnC,IAAMpF,EAAQC,EAAU3K,GAGxB8M,EAAOjC,SAAWH,EACdhJ,IAAI8E,QAAQ,KAHWsG,EAAOM,YAC7B1C,EAAQoC,EAAOI,MAAQJ,EAAOK,UAAYL,EAAOM,WAAa,GAExB1C,GACvChJ,IAAI8E,QAAQ,QAGqBd,IAAjC1F,EAAQsH,SAAS1E,cACnBkK,EAAO8C,UAAY,MAGvB,OAAO9C,IAKLiD,EAAmB,CACvBJ,MAAO,SAASlI,EAAQuI,GAEtB,IAAMC,EAAuB,IAE7B,GAAIjQ,EAAQ0O,gBACV,OAAO1O,EAAQ0O,gBAEjB1O,EAAQ0O,gBAAkBjH,EAAOkI,MAAM5C,GACvC,IAIImD,EACA/C,EALAL,EAASrB,OAAO0E,OAAO,GAAInQ,EAAQ0O,iBAGnC0B,GAAiB,EAsCrB,OAvCiBpQ,EAAQsH,oBAIDC,eAGtB2I,EAwER,SAA8BlQ,GAC5B,KAAMA,EAAQsH,oBAAoBC,cAChC,OAAA,EAEF,IAAM0E,EACFjM,EAAQ2O,mBAAoB,CAAE5H,MAAO,QAASP,QAAS9E,IAAI8E,QAAQ,IACvE,OAAOqC,EAAiB7I,EAAQsH,SAAU2E,EAAUlF,MAAOkF,EAAUzF,SA9ElD6J,CAAqBrQ,GAClCmN,EAiFR,SAA4BnN,GAC1B,KAAMA,EAAQsH,oBAAoBC,cAChC,OAAA,EAEF,IAAMsI,EACF7P,EAAQ4O,iBAAmB,CAAE7H,MAAO,QAASP,QAAS9E,IAAI8E,QAAQ,MACtE,SAAWqC,EAAiB7I,EAAQsH,SAAUuI,EAAQ9I,MAAO8I,EAAQrJ,SAvFpD8J,CAAmBtQ,GAC9BoQ,GAAiB,IAMK,OAApBtD,EAAOjC,UAAyC,SAApBiC,EAAOjC,UACnCuF,IACEpQ,EAAQsH,WACN8I,GACFtD,EAAOI,MAAQgD,EAAaD,EAC5BnD,EAAOK,SAAWA,EAAW8C,IAK7BnD,EAAOI,MAAQ,EACfJ,EAAOK,SAAW,GAGpBL,EAAOjC,SAAWiC,EAAOM,aADTN,EAAOM,WAAa6C,EAAuB,GAErCnD,EAAOI,MAAQJ,EAAOK,UACrCL,EAAOM,WACT,EAGLoC,EAAmBG,MAAM5C,EAAQ,CAACD,KAGtC9M,EAAQiN,iBAAmBH,EACpB9M,EAAQ0O,kBAGb6B,EAAsB,CAC1BZ,MAAO,SAASlI,EAAQuI,EAASQ,GAE/B,GAAIxQ,EAAQsH,SAAU,CACpB,IAAM/B,EAAUiL,EAAc,GAE9B,GAAiB3C,WADAtI,EAAQsF,SAEvB,MAAMlH,UACF,sEAIN,GAAmBkK,WADAtI,EAAQ6H,WAEzB,MAAMzJ,UACJ,wEAMF3D,EAAQ0O,iBACVjH,EAAOkI,MAAM5C,EAAQ,CAAC/M,EAAQ0O,kBAEhCjH,EAAOkI,MAAM5C,EAAQyD,GAErBxQ,EAAQ0O,gBAAkB,OAGxBvD,EAAQ,IAAIsF,MAAM1D,EA9HR,CACd9M,IAAK,SAAS1B,EAAKmS,GACjB,IAAMtR,EAASb,EAAImS,GACnB,MAAsB,mBAAXtR,EACFA,EAAO2O,KAAKhB,GACd3N,GAGTO,IAAK,SAASpB,EAAKmS,EAAMpQ,GAEvB,OADA/B,EAAImS,GAAQpQ,GAEb,KAwHH,OAJA6K,EAAMwF,kBAAoB,IAAIF,MAAM1D,EAAO4D,kBACPjB,GACpCvE,EAAM6B,UAAY,IAAIyD,MAAM1D,EAAOC,UAAW+C,GAC9C5E,EAAMsE,aAAe,IAAIgB,MAAM1D,EAAO0C,aAAcc,GAC7CpF,EA2FcyF,CAAkB5Q,IAE9BA,EAAQ+M,QAPN/M,EAAQmF,UAAU4H,QA1D/BpN,IAmEE,SAAWkR,GACT5C,EAAgBhO,IAAIL,MAAMuF,UAAU4H,OAAS8D,EAE7C7Q,QAAQ+M,OAAS,OAGnB,CAAA3M,IAAA,WAAAH,IAAA,WACE,IAAMD,EAAUiO,EAAgBhO,IAAIL,MAGpC,OAAOI,EAAQsH,UAAYtH,EAAQmF,UAAUmC,cAE/C,SAAawJ,GAMX,IAAMC,EAAcnR,KAAK0H,SACzB,GAAIyJ,GAAeD,EAAnB,CAIA,IAAME,EAAoBpR,KAAKwL,UAGzBsB,EAAsB9M,KAAKgD,YAE3B5C,EAAUiO,EAAgBhO,IAAIL,MAC9B+I,EAAMgC,EAAU3K,GAChBgH,EACF2B,EAAM,EAAIiC,EAAiB5K,EAAS0M,GAAuB/D,EAAM,EAI/DsI,EAAsBF,aAAuBzL,EAI7C4L,EAAoBJ,aAAuBxL,EAQjDtF,EAAQ4N,0BAA2B,EAInC,IAAMrB,EAAU3M,KAAK2M,QAUrB,GARI0E,GACFhM,EAAgBjF,EAAQsH,SAAUtH,EAAQmF,WAOxC+L,EAAkB,CAEpBlR,EAAQsH,SAAWwJ,EAGnB/E,EAAyB/L,GAIzB,IAAM2N,EACF3N,EAAQmF,UAAU2G,cAAgB,EAAI,EAAInB,EAAU3K,GAGxD,OAAQgR,GAKN,IAAK,UACL,IAAK,WACHhR,EAAQiM,UAAY0B,EAGpBtI,EAAarF,EAAQsH,SAAUtH,EAAQmF,UAC1BtC,EAAckL,KAAKnO,OAChC,MAOF,IAAK,SACHI,EAAQ4N,0BAA2B,EACnC5N,EAAQiM,UAAY,KACpBjM,EAAQ2M,SACJ/B,EAAiB5K,EAAS0B,IAAI8E,QAAQ,IAAMQ,IAChD,MAGF,QACEhH,EAAQ2M,SAAW,KACnB3M,EAAQiM,UAAY,KAiCxB,OA1BIM,IACGvM,EAAQoK,cACqB,YAA9BpK,EAAQoK,aAAaT,OACvBQ,EAAmBnK,GAGnBA,EAAQgO,YADe,UAArBgD,EACoB,QAEA,QAWA,OAAtBhR,EAAQiM,YACVjM,EAAQ2M,SAAW,WAKrBR,EAAoBnM,GAAS,GAAO,GAKtC,GAAIA,EAAQmF,UAAUmC,UAAYwJ,EAuBhC,MAAMnN,UAAU,yBAA2BmN,GAf3C,GALA7L,EAAgBjF,EAAQsH,SAAUtH,EAAQmF,WAC1CnF,EAAQsH,SAAW,KAIf2J,EAIF,OAH4B,OAAxBvE,IACF1M,EAAQmF,UAAUvC,YAAcoE,EAAW2D,EAAU3K,IAE/CgR,GACN,IAAK,SACHhR,EAAQmF,UAAUkG,QAClB,MAEF,IAAK,UACL,IAAK,WACHrL,EAAQmF,UAAU2I,gCAQ5B,WACE,IAAM9N,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAII,EAAQsH,SACHmD,EAAezK,EAASA,EAAQiM,WAElCjM,EAAQmF,UAAU8G,eAE3B,SAAc3L,GAEZ,IAAMN,EAAUiO,EAAgBhO,IAAIL,MAEpC,GADAU,EAAQsK,EAAiB5K,EAASM,GAC7BN,EAAQsH,SAAb,CAcoB,MALCsD,EAAiB5K,EACAA,EAAQsH,SAAS1E,cAIN,MAArB5C,EAAQiM,YAClCjM,EAAQ2M,SAAW,KAGnBC,EAAgB5M,IAMlB,IAAM0M,EAAsB9B,EAAiB5K,EAASJ,KAAKgD,aAG3DmJ,EAAyB/L,GAGzBA,EAAQiM,UAAY3L,EAGpBN,EAAQ4N,0BAA2B,EAcjC5N,EAAQ2M,SADgB,OAAtB3M,EAAQiM,WAAwD,GAAlCjM,EAAQmF,UAAU2G,aAC/B,KAEAY,EAKjB1M,EAAQgO,cACVhO,EAAQgO,YAAc,KACtBhO,EAAQoK,aAAaJ,QAAQpK,OAMhCuM,EAAoBnM,GAAS,GAAM,GAGlC4M,EAAgB5M,QAhEdA,EAAQmF,UAAU8G,UAAY3L,2BAmElC,WACE,IAAMN,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAKI,EAAQsH,SAIJmD,EAAezK,EADA,MAApBA,EAAQ2M,SACqB3M,EAAQ2M,SAEVX,EAAqBhM,IAL3CA,EAAQmF,UAAUvC,aAO7BjD,IAAA,SAAgBW,GACd,IAAMN,EAAUiO,EAAgBhO,IAAIL,MAEpC,GADAU,EAAQsK,EAAiB5K,EAASM,GAC7BN,EAAQsH,UAAqB,MAAThH,EAAzB,CAQA,IAAM6Q,EAAgBnR,EAAQsH,SAASP,MAGd,OAArB/G,EAAQ2M,UAA2C,OAAtB3M,EAAQiM,WACpB,YAAjBkF,GAAiE,GAAlCnR,EAAQmF,UAAU2G,aAEnD9L,EAAQ2M,SAAWrM,EAEnBN,EAAQiM,UAAYC,EAAmBlM,EAASM,GAElDN,EAAQ4N,0BAA2B,EAId,YAAjBuD,IACFnR,EAAQiM,UAAY,MAGtBjM,EAAQ0M,oBAAsB,KAGH,SAAvB1M,EAAQgO,cACVhO,EAAQ2M,SAAWrM,EACnByL,EAAyB/L,GACzBA,EAAQiM,UAAY,KACpBjM,EAAQgO,YAAc,KACtBhO,EAAQoK,aAAaJ,QAAQpK,OAI/BuM,EAAoBnM,GAAS,GAAM,QArCjCA,EAAQmF,UAAUvC,YAActC,IAvUtC,CAAAF,IAAA,eAAAH,IA+WE,WACE,OAAOgO,EAAgBhO,IAAIL,MAAMuF,UAAU2G,cAE7CnM,IAAA,SAAiBW,GACf,IAAMN,EAAUiO,EAAgBhO,IAAIL,MAEpC,GAAKI,EAAQsH,SAAb,CAMAtH,EAAQ6L,oBAAsB,KAI9B,IAAMa,EAAsB9M,KAAKgD,YAGjC5C,EAAQmF,UAAU2G,aAAexL,EAIN,OAAxBoM,IACD9M,KAAKgD,YAAc8J,QAjBnB1M,EAAQmF,UAAU2G,aAAexL,yBAoBrC,WACE,IAAMN,EAAUiO,EAAgBhO,IAAIL,MACpC,IAAKI,EAAQsH,SACX,OAAOtH,EAAQmF,UAAUiG,UAE3B,IAAMxI,EAAcgI,EAAiB5K,EAASJ,KAAKgD,aAQnD,GAAoB,OAAhBA,GAA8C,OAAtB5C,EAAQiM,WACT,MAAvBjM,EAAQgO,YACV,MAAO,OAOT,GAA2B,SAAvBhO,EAAQgO,aACe,OAAtBhO,EAAQiM,WAA6C,QAAvBjM,EAAQgO,YACzC,MAAO,SAQT,GAAmB,MAAfpL,EAAqB,CACvB,GAAI5C,EAAQmF,UAAU2G,aAAe,GACjClJ,GAAe+H,EAAU3K,GAC3B,MAAO,WACT,GAAIA,EAAQmF,UAAU2G,aAAe,GAAKlJ,GAAe,EACvD,MAAO,WAIX,MAAO,YAnbX,CAAAxC,IAAA,eAAAH,IAqbE,WAEE,OAAOgO,EAAgBhO,IAAIL,MAAMuF,UAAUoH,UAG7C,CAAAnM,IAAA,UAAAH,IAAA,WACE,IAAMD,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAII,EAAQsH,WACDtH,EAAQoK,cACoB,WAA9BpK,EAAQoK,aAAaT,MAGvB3J,EAAQmF,UAAUoH,UA4Q3B,CAAAnM,IAAA,KAAAH,IAAA,WACE,OAAOgO,EAAgBhO,IAAIL,MAAMuF,UAAUiM,yBA2C7C,WACE,OAAOnD,EAAgBhO,IAAIL,MAAMuF,UAAUkM,UAE7C1R,IAAA,SAAaW,GACX2N,EAAgBhO,IAAIL,MAAMuF,UAAUkM,SAAW/Q,IA7vBnD,CAAAF,IAAA,WAAAH,IA+vBE,WACE,OAAOgO,EAAgBhO,IAAIL,MAAMuF,UAAUmM,cAE7C,SAAahR,GACX2N,EAAgBhO,IAAIL,MAAMuF,UAAUmM,SAAWhR,IAEjD,CAAAF,IAAA,WAAAH,IAAA,WACE,OAAOgO,EAAgBhO,IAAIL,MAAMuF,UAAUoM,cAE7C,SAAajR,GACX2N,EAAgBhO,IAAIL,MAAMuF,UAAUoM,SAAWjR,IAGjD,CAAAF,IAAA,WAAAH,IAAA,WACE,IAAMD,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAKI,EAAQsH,UAGRtH,EAAQkL,kBACXlL,EAAQkL,gBAAkB,IAAIxB,GAEzB1J,EAAQkL,gBAAgBpB,SALrB9J,EAAQmF,UAAUqM,4BAQ9B,WACE,IAAMxR,EAAUiO,EAAgBhO,IAAIL,MACpC,OAAKI,EAAQsH,UAGRtH,EAAQoK,eACXpK,EAAQoK,aAAe,IAAIV,EAC3B1J,EAAQoK,aAAaJ,QAAQpK,OAExBI,EAAQoK,aAAaN,SANnB9J,EAAQmF,UAAUsM,UA0B9BlD,KAED,SAASmD,EAAsBpR,EAAOqR,GAIpC,IAAKrR,EACH,OAAA,KAEF,IAAMzB,EAAQ,uBAAuB+S,KAAKtR,GAC1C,IAAKzB,EACH,YAEF,IAAMkI,EAAQlI,EAVM,GAWd2H,EAAUqL,WAAWhT,EAVL,IAU6B8S,GAEnD,MAAO,CAAE5K,MAAOA,EAAOP,QAAS9E,IAAI8E,QAAQA,IClkD9C,IAAIsL,EAAsB,IAAI9S,QASxB+S,EAAa,CAEjB,CAAC,CANS,EACE,EACC,EACF,IAKX,CACE,CATQ,EAEG,GAQX,CATU,EAED,IAUX,CAAC,CAbS,GAaF,CAZI,EAED,GAUY,CAXV,IAab,CAAC,CAfS,GAeF,CAdI,GAcK,CAbJ,GAac,CAZhB,KAePC,EACJ,WAAA,SAAAA,EAAY1R,GACVwR,EAAoBnS,IAAIC,KAAM,CAC5B6H,OAAQ,KACRwK,KAAM,QACNC,UAAW,EACXC,WAAY,CACV,CAAC,EAAG,MACJ,CAAC,EAAG,MACJ,CAAC,EAAG,MACJ,CAAC,EAAG,SAGRvS,KAAK6H,OAASnH,EAAMmH,OACpB7H,KAAKqS,KAAO3R,EAAM2R,MAAQ,QAC1BrS,KAAKsS,UAAY5R,EAAM4R,WAAa,EACpCtS,KAAKuS,WAAa7R,EAAM6R,YAAc,kBACtCvS,KAAKwS,MAAQ9R,EAAM8R,QAAS,EA8EhC,SAnEEJ,EAAA,CAAA,CAAA5R,IAAA,SAAAH,IAAA,WACE,OAAO6R,EAAoB7R,IAAIL,MAAM6H,YATvC,SAAW9B,GACT,KAAMA,aAAmB2D,SAEvB,MADAwI,EAAoB7R,IAAIL,MAAM6H,OAAS,KACjC5F,MAAM,2CAEdiQ,EAAoB7R,IAAIL,MAAM6H,OAAS9B,oBAYzC,WACE,OAAOmM,EAAoB7R,IAAIL,MAAMqS,UANvC,SAAS3R,IACiC,GAApC,CAAC,QAAS,OAAOyF,QAAQzF,KAC7BwR,EAAoB7R,IAAIL,MAAMqS,KAAO3R,0BAoBvC,WACE,OAAOwR,EAAoB7R,IAAIL,MAAMsS,eAdvC,SAAc5R,GACZ,IAAI4R,EAAYL,WAAWvR,GAE3B,GAAI4R,GAAaA,EACf,MAAMvO,UAAU,sBAIlB,GAAIuO,EAAY,GAAKA,EAAY,EAC/B,MAAMvO,UAAU,yCAClBmO,EAAoB7R,IAAIL,MAAMsS,UAAYA,IA4B5C,CAAA9R,IAAA,aAAAH,IAAA,WAEE,OAAO6R,EAAoB7R,IAAIL,MAC5BuS,WAAWE,IAAI,SAACC,GACf,OAAOA,EAAOpS,KAAK,MAEpBA,KAAK,MA3BVP,IAAA,SAAeW,GACb,IAAIiS,EAAUjS,EAAMkS,MAAM,MAC1B,GAAID,EAAQjT,OAAS,GAAKiT,EAAQjT,OAAS,EACzC,MAAMqE,UACJ,6DAGJ,IADA,IAAI8O,EAAgB,CAAC,GAAI,GAAI,GAAI,IACxBpT,EAAI,EAAGA,EAAIkT,EAAQjT,OAAQD,IAAK,CACvC,IAAIqT,EAAcpU,EAAYiU,EAAQlT,IAAI,GAC1C,IAAKqT,EAAa,MAAM/O,UAAU,kCAElC,IADA,IAAIgP,EAAYZ,EAAWQ,EAAQjT,OAAS,GAAGD,GACtCuT,EAAI,EAAGA,EAAID,EAAUrT,OAAQsT,IACpCH,EAAcE,EAAUC,IAAM,CAC5Bf,WAAWa,EAAYpS,OACvBoS,EAAYnS,MAIlBuR,EAAoB7R,IAAIL,MAAMuS,WAAaM,IAY7C,CAAArS,IAAA,QAAAT,IAAA,SAAUW,GAGRwR,EAAoB7R,IAAIL,MAAMwS,QAAU9R,MAI5C0R,EA9FE,GCvCWa,EAAe,CAC1BC,WAAY,eACZC,YAAa,OACbC,OAAQ,UACRC,KAAM,gBACNC,mBAAoB,iCACpBC,eAAgB,6BAChBC,UAAW,wBACXC,eAAgB,wBCNZC,EAAS,eDyBb,SAAcC,IACZ3T,KAAK4T,yBAA2B,GAChC5T,KAAKsC,sBAAwB,IAAIuR,IACjC7T,KAAK8T,cAAgB,IAAIC,IAJ7B,IAAAC,EAAAL,EAAA/S,UAgWA,OAhWAoT,EAaEC,oBAAA,SAAoBC,EAAUC,EAAWC,GAQvC,IANA,IAAMC,EAAI,CACRH,SAAUA,EACVI,MAAO,EACPrU,KAAMmU,GAGDC,EAAEC,MAAQD,EAAEH,SAASxU,SAC1BM,KAAKuU,cAAcF,KACfA,EAAEC,OAASD,EAAEH,SAASxU,UAC1B,GAAIM,KAAKwU,UAAU,KAAMH,GACvB,KAAOrU,KAAKwU,UAAU,KAAMH,IAC1BrU,KAAKyU,WAAWJ,GAChBrU,KAAKuU,cAAcF,QAKvB,GAAIrU,KAAKwU,UAAU,mBAAoBH,GAAI,CACQ,IAAzC/O,EAAyCtF,KAAK0U,oBAAoBL,GAAlE/O,eACJ6O,GAAWnU,KAAKsC,sBAAsBvC,IAAIuF,EAAerF,KAAMqF,OAC9D,CACL,IAAMqP,EAAO3U,KAAK4U,mBAAmBP,GACrC,IAAKM,EAAM,SACPR,EACFnU,KAAK6U,2BAA2BF,EAAKG,UAErC9U,KAAK+U,0BAA0BJ,EAAMN,GAQ3C,OAAOA,EAAEH,UAGXc,EAAAA,sBAAA,SAAsBC,EAAepN,GAKnC,IAAK,IAAIpI,EAAIO,KAAK4T,yBAAyBlU,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAClE,IAAMyV,EAAUlV,KAAK4T,yBAAyBnU,GAC9C,GAAIoI,EAAO9I,QAAQmW,EAAQJ,aACpBI,EAAQ,mBAAqBA,EAAQ,mBAAqBD,GAC7D,OAAOC,EAAQ,sBAKrB,OAAO,MAlEXlB,EAqEEU,oBAAA,SAAoBL,GAClB,IAAMc,EAAad,EAAEC,MACrBtU,KAAKoV,aAAaf,EAAG,oBACrBrU,KAAKuU,cAAcF,GACnB,IAAIpU,EAAOD,KAAKqV,gBAAgBhB,GAChCrU,KAAKuU,cAAcF,GACnBrU,KAAKoV,aAAaf,EAAG,KACrBrU,KAAKuU,cAAcF,GAQnB,IANA,IAAI/O,EAAiB,CACnBrF,KAAMA,EACNwC,OAAQ,OACRU,iBAAa2C,GAGS,MAAjB9F,KAAKsV,KAAKjB,IAAY,CAC3B,IAAMkB,EAAWvV,KAAKqV,gBAAgBhB,GACtCrU,KAAKuU,cAAcF,GACnBrU,KAAKoV,aAAaf,EAAG,KACrBrU,KAAKuU,cAAcF,GACnB/O,EAAeiQ,GAAYvV,KAAKwV,4BAA4BxV,KAAKyV,SAAS,IAAKpB,IAC/ErU,KAAKoV,aAAaf,EAAG,KACrBrU,KAAKuU,cAAcF,GAGrBrU,KAAKoV,aAAaf,EAAG,KACrB,IAAMqB,EAAWrB,EAAEC,MAEnB,OADAtU,KAAKuU,cAAcF,GACZ,CACL/O,eAAAA,EACA6P,WAAAA,EACAO,SAAAA,IApGN1B,EAwGEe,0BAAA,SAA0BJ,EAAMN,GAE9B,IAAArO,EAAAhG,KAAA,IAAI2U,EAAKG,SAASa,SAAS,cAA3B,CAKA,IAAMC,EAAmBjB,EAAKkB,MAAMC,SAASH,SAAS,mBAChDI,EAAuBpB,EAAKkB,MAAMC,SAASH,SAAS,uBACpDK,EAAerB,EAAKkB,MAAMC,SAASH,SAAS,cAE9CM,EAAgB,GAChBC,EAAiB,GAEjBH,IACFE,EAAgBjW,KAAKmW,eAAexB,EAAKkB,MAAMC,SAAU7C,EAAaK,qBAGpEsC,IACFM,EAAiBlW,KAAKmW,eAAexB,EAAKkB,MAAMC,SAAU7C,EAAaM,iBAGrEwC,GAAwBH,GAKxBI,GACFhW,KAAKmW,eAAexB,EAAKkB,MAAMC,SAAU7C,EAAaO,WACnDrR,QAAQ,SAAAiU,GACP,IAAMnB,EAAgBjP,EAAKqQ,qBAAqBD,GAC1CE,EAAetQ,EAAKuQ,oBAAoBH,GAC1CnB,GAAeiB,EAAe/Q,KAAK8P,GACnCqB,IACFL,EAAc9Q,KAAKmR,GAKnB3B,EAAKkB,MAAMC,SAAWnB,EAAKkB,MAAMC,SAASU,QACxCF,EACA,IAAIG,OAAOH,EAAa5W,SAE1BsG,EAAK0Q,YACH/B,EAAKkB,MAAMV,WACXR,EAAKkB,MAAMH,SACXf,EAAKkB,MAAMC,SACXzB,KAODiC,GAAgBP,KACb/P,EAAK2Q,YAAYP,KAInBzB,EAAKkB,MAAMC,SAAWnB,EAAKkB,MAAMC,SAASU,QACxC,aACA,kBAEFxQ,EAAK0Q,YACH/B,EAAKkB,MAAMV,WACXR,EAAKkB,MAAMH,SACXf,EAAKkB,MAAMC,SACXzB,OA5CVrU,KAAK4W,mBAAmBjC,EAAMsB,EAAeC,KAsDjDS,EAAAA,YAAA,SAAYP,GACV,OAAOA,EAAUxD,MAAM,KAAKiE,OAAO,SAAAC,GAAI,OA2KlC7D,EAAaI,KAAKrB,KA3K2B8E,KAAOpX,QAAU,GAtLvEsU,EAyLE4C,mBAAA,SAAmBjC,EAAMsB,EAAeC,GACtC,GAA6B,GAAzBA,EAAexW,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAIwW,EAAcvW,OAAQD,IACxCO,KAAK4T,yBAAyBzO,KAAK,CACjC2P,SAAUH,EAAKG,SACf,sBAAkBhP,EAClB,qBAAsBmQ,EAAcxW,UAIxC,IAAK,IAAIA,EAAI,EAAGA,EAAIgE,KAAKqF,IAAImN,EAAcvW,OAAQwW,EAAexW,QAASD,IACzEO,KAAK4T,yBAAyBzO,KAAK,CACjC2P,SAAUH,EAAKG,SACf,iBAAkBoB,EAAezW,EAAIyW,EAAexW,QACpD,qBAAsBuW,EAAcxW,EAAIwW,EAAcvW,WAO9D2W,EAAAA,qBAAA,SAAqBD,GACnB,OAAYW,KAAAA,6BAA6BX,EAAWpW,KAAK8T,gBAG3DyC,EAAAA,oBAAA,SAAoBH,GAClB,OAAYW,KAAAA,6BAA6BX,EAAWpW,KAAKsC,wBAG3DyU,EAAAA,6BAAA,SAA6BX,EAAWxO,GACtC,IAAM7I,EAAUqX,EAAUxD,MAAM,KAAKiE,OAAO,SAAAC,GAAQlP,OAAAA,EAAUoP,IAAIF,KAClE,OAAO/X,EAAUA,EAAQ,GAAK,MAxNlCiV,EA4NEqB,gBAAA,SAAgBhB,GACdpB,EAAaC,WAAW+D,UAAY5C,EAAEC,MACtC,IAAMrV,EAAQgU,EAAaC,WAAWlB,KAAKqC,EAAEH,UAC7C,IAAKjV,EACH,MAAMe,KAAKkX,WAAW7C,EAAG,0BAG3B,OADAA,EAAEC,OAASrV,EA9OW,GA8OcS,OAC7BT,EA/Oe,IAqPxB4V,EAAAA,2BAAA,SAA2BC,GACzB,IAAAxL,EAAAtJ,KAAI8U,EAASqC,WAAW,eACtBrC,EAASlC,MAAM,KAAKzQ,QAAQ,SAACiV,EAAM9C,GAC7BA,EAAQ,GACVhL,EAAKwK,cAAcuD,IAAID,MA7OjCpD,EAmPEY,mBAAA,SAAmBP,GACjB,IAAMc,EAAad,EAAEC,MACfQ,EAAW9U,KAAKsX,cAAcjD,GAAGrV,OACvC,GAAK8V,EAGL,MAAO,CACLA,SAAAA,EACAe,MAJY7V,KAAKuX,SAASlD,GAK1Bc,WAAAA,EACAO,SALerB,EAAEC,QASrBkB,EAAAA,4BAAA,SAA4BgC,GAG1B,OAAOA,EAAEC,UAFgB,KAARD,EAAE,GAAY,EAAI,EACD,KAAnBA,EAAEA,EAAE9X,OAAS,GAAY8X,EAAE9X,OAAS,EAAI8X,EAAE9X,SAI3D0V,EAAAA,aAAA,SAAaf,EAAGmD,GACd,GAAInD,EAAEH,SAASwD,OAAOrD,EAAEC,MAAOkD,EAAE9X,SAAW8X,EAC1C,MAAWN,KAAAA,WAAW7C,oCAAqCmD,GAE7DnD,EAAEC,OAASkD,EAAE9X,QA3QjBsU,EA8QE0C,YAAA,SAAY7N,EAAOE,EAAK4O,EAAatD,GACnCA,EAAEH,SAAWG,EAAEH,SAAS0D,MAAM,EAAG/O,GAAS8O,EAActD,EAAEH,SAAS0D,MAAM7O,GAIrEsL,EAAEC,OAASvL,IAEbsL,EAAEC,MAAQzL,EAAQ8O,EAAYjY,QADhB2U,EAAEC,MAAQvL,KAK5B0L,EAAAA,WAAA,SAAWJ,GACTrU,KAAKoV,aAAaf,EAAG,MACrBrU,KAAKyV,SAAS,KAAMpB,GACpBrU,KAAKoV,aAAaf,EAAG,OA5RzBL,EA+REuD,SAAA,SAASlD,GACP,IAAMc,EAAad,EAAEC,MACrBtU,KAAKoV,aAAaf,EAAG,KAErB,IADA,IAAIwD,EAAQ,EACI,GAATA,GACuB,MAAxBxD,EAAEH,SAASG,EAAEC,OACfuD,IACiC,MAAxBxD,EAAEH,SAASG,EAAEC,QACtBuD,IAEF7X,KAAK8X,QAAQzD,GAEf,IAAMqB,EAAWrB,EAAEC,MAGnB,MAAO,CAAEa,WAAAA,EAAYO,SAAAA,EAAUI,SAFdzB,EAAEH,SAAS0D,MAAMzC,EAAYO,KA5SlD1B,EAiTE8D,QAAA,SAAQzD,GAEN,GADAA,EAAEC,QACED,EAAEC,MAAQD,EAAEH,SAASxU,OACvB,MAAWwX,KAAAA,WAAW7C,EAAG,4BAI7BoB,EAAAA,SAAA,SAAS+B,EAAGnD,GAEV,IADA,IAAMc,EAAad,EAAEC,OACbtU,KAAKwU,UAAUgD,EAAGnD,IACxBrU,KAAK8X,QAAQzD,GAEf,OAAOA,EAAEH,SAAS0D,MAAMzC,EAAYd,EAAEC,QAGxCgD,EAAAA,cAAA,SAAcjD,GACZ,IAAIc,EAAad,EAAEC,MAEnB,GADAtU,KAAKyV,SAAS,IAAKpB,GACfc,IAAed,EAAEC,MACnB,MAAMrS,MAAM,kBAGd,OAAOoS,EAAEH,SAAS0D,MAAMzC,EAAYd,EAAEC,UAGxCC,cAAA,SAAcF,GAEZpB,EAAaE,YAAY8D,UAAY5C,EAAEC,MACvC,IAAMrV,EAAQgU,EAAaE,YAAYnB,KAAKqC,EAAEH,UAC1CjV,IACFoV,EAAEC,OAASrV,EA3VS,GA2VgBS,SA/U1CsU,EAmVEQ,UAAA,SAAUgD,EAAGnD,GACX,OAAOA,EAAEH,SAASwD,OAAOrD,EAAEC,MAAOkD,EAAE9X,SAAW8X,GApVnDxD,EAuVEsB,KAAA,SAAKjB,GACH,OAAOA,EAAEH,SAASG,EAAEC,QAGtB6B,EAAAA,eAAA,SAAeL,EAAUiC,GACvB,OAAOA,EAAQ/F,KAAK8D,GA1WK,GA0W2B9W,OAAO4T,MAAM,KAAKH,IAAI,SAAA2E,UAAQA,EAAKpY,UAI3F2U,MCtUA,SAASqE,EAAiBvV,GACxB,IAAM1D,EAAUkU,EAAaQ,eAAezB,KAAKvP,GAEjD,OAAI1D,EACK2D,SAASuV,eAAelZ,EAFJ,IAGP,SAAX0D,EACFC,SAASC,iBAET,KC/BX,GL0DEJ,EAA+B4C,KAAK,CAClCqB,eE6CwB9F,GAC1B,GAAIA,EAAMmH,OAAQ,OAAWuK,IAAAA,EAAwB1R,IF7CnD+F,SEuDYyR,SAAgBzV,EAAQU,EAAaoB,EAAQ4T,GAExC,SAAfhV,EAAwBA,EAAc,WAClB,UAAfA,IAAyBA,EAAc,cAgBhD,IAfA,IAXqBzD,EAWjB0Y,EACF3V,GAAUC,SAASC,iBACf,CACEqF,KAAM,EACNqQ,MAAO5V,EAAOoC,YACdkD,IAAK,EACLuQ,OAAQ7V,EAAOkC,aACf4T,MAAO9V,EAAOoC,YACd2T,OAAQ/V,EAAOkC,cAEjBlC,EAAOgW,wBAGT5F,EAAgBX,EAAoB7R,IAAIkE,GAAQgO,WAChDmG,EAAkB,GACbjZ,EAAI,EAAGA,EAAI,EAAGA,IACrBiZ,EAAgBvT,KA1BD,YADIzF,EA6BfmT,EAAcpT,IA5BT,GAAyBC,EAAO,IA6BrCD,EAAI,GAAK,EAAI2Y,EAAiBI,OAASJ,EAAiBG,OA7BG,IAG1D7Y,EAAO,IA8Bd,IAAIiZ,EACIP,EAAiBpQ,KAAO0Q,EArJrB,GAoJPC,EAIAP,EAAiBC,MACjBD,EAAiBpQ,KACjB0Q,EA1JO,GA2JPA,EA7JQ,GAsJRC,EAQGP,EAAiBrQ,IAAM2Q,EA/JpB,GAuJNC,EAWAP,EAAiBE,OACjBF,EAAiBrQ,IACjB2Q,EApKM,GAqKNA,EAnKS,GAsKTE,EAAU1G,EAAoB7R,IAAIkE,GAAQiO,MAC1C3K,EAAStD,EAAOsD,OAAO4Q,wBACvBnG,EAAY/N,EAAO+N,UAIvB,GAFmB,SAAf/N,EAAO8N,OAAiBC,EAAY,EAAIA,GAEzB,YAAfnP,EAA2B,CAC7B,IAAI0V,EACFhR,EAAOE,IACPF,EAAO2Q,OAASlG,EAChBqG,EACAlW,EAAOe,UACT,OAAIoV,EACiB,OAAfrU,EAAO8N,KAAsB5O,KAAKqF,IAAI,EAAG+P,EAAQF,GAC9ClV,KAAKuF,IAAI6P,EAAOpW,EAAOiC,aAAeiU,GAE1B,OAAfpU,EAAO8N,KAAsBwG,EAAQF,EAClCE,EAIT,IAAIA,EACFhR,EAAOG,KACPH,EAAO0Q,MAAQjG,EACfqG,EACAlW,EAAOkB,WACT,OAAIiV,EACiB,OAAfrU,EAAO8N,KAAsB5O,KAAKqF,IAAI,EAAG+P,EAAQF,GAC9ClV,KAAKuF,IAAI6P,EAAOpW,EAAOmC,YAAc+T,GAEzB,OAAfpU,EAAO8N,KAAsBwG,EAAQF,EAClCE,KEpIP/W,IAAIgX,SAAS,+BAnFnB,WAyBE,SAASC,EAAeC,GAEtB,GAAmC,IAA/BA,EAAGC,UAAUja,OAAOU,OAAxB,CAIA,IAAIwZ,EAASxF,EAAOO,oBAAoB+E,EAAGC,WAAW,GACtDC,EAASxF,EAAOO,oBAAoBiF,GAAQ,GAC5CF,EAAGC,UAAYC,GAhCK,IAAIC,iBAAiB,SAACC,GAC1C,IAAA,IAAApV,EAAAE,EAAAC,EAAoBiV,KAApBpV,EAAAE,KAAAE,MACE,IADSiV,IACiCjT,EAAlBiT,EAAAA,EADGrV,EAAAtD,MACG4Y,cAAYlT,EAAAE,KAAAlC,MAAA,CAAA,IAA/BmV,EACTnT,EAAA1F,MAAI6Y,aAAqBC,kBACvBT,EAAeQ,MAYTE,QAAQ/W,SAASgX,gBAAiB,CAC9CC,WAAW,EACXC,SAAS,IAqBXlX,SAASmX,iBAAiB,SAAS1X,QAAQ,SAAC2X,GAAD,OAASf,EAAee,KACnEpX,SACGmX,iBAAiB,QACjB1X,QAAQ,SAAC2X,MA4CZC,GAIAlY,OAAOqE,iBAAiB,iBAAkB,SAAC8T,GACzCA,EAAInS,OAAOoS,gBAAgBpD,OAAO,SAAAqD,GAAI,OAAIA,EAAKjF,gBAAkB+E,EAAI/E,gBAAe9S,QAAQ,SAAA+X,GAC1F,IAAM5D,EAAe5C,EAAOsB,sBAAsBkF,EAAKjF,cAAe+E,EAAInS,QAC1E,GAAIyO,EAAc,CAChB,IAAMhR,EA3Bd,SAA8BrF,GAC5B,IAAM0F,EAAU+N,EAAOpR,sBAAsBjC,IAAIJ,GACjD,IAAK0F,EAAS,OAAA,KAEd,IAAMwU,EAAgBnC,EAAiBrS,EAAQlD,QAM/C,OAJuB,IAAIiD,eACrByU,EAAAA,GAAAA,EAAgB,CAAE1X,OAAQuV,EAAiBrS,EAAQlD,SAAY,GACxC,QAAvBkD,EAAQxC,YAAwB,CAAEA,YAAawC,EAAQxC,aAAgB,KAmBhDiX,CAAqB9D,GAC5C,GAAI4D,EAAKxS,UAAYpC,EAAgB,CACnC,IAAM+U,EAAiB,IAAI1L,EAAeuL,EAAM5U,GAChD4U,EAAKzO,QACL4O,EAAenM,eCzEtBnM,QAAQC,eAAeH,OAAQ,iBAAkB,CAAEnB,MAAOgF,IAE3D,MAAMzD,MACJ,uFAGJ,IACGF,QAAQC,eAAeH,OAAQ,eAAgB,CAAEnB,MAAOiH,IAEzD,MAAM1F,MACJ,mFAIJ,IAAKF,QAAQC,eAAe0H,QAAQ9I,UAAW,UAAW,CAAEF,MJwiD5CiJ,SAAQ2Q,EAAW3U,GACjC,IAAM+B,EAAW/B,EAAQ+B,SAErBA,aAAoBhC,UACfC,EAAQ+B,SAEjB,IAAMnC,EAAYkE,EAAqBsG,MAAM/P,KAAM,CAACsa,EAAW3U,IACzD0U,EAAiB,IAAI1L,EAAepJ,EAAWmC,GAYrD,OAVIA,aAAoBhC,IACtBH,EAAUkG,QACN/D,aAAoBC,eACtBvH,QAAUiO,EAAgBhO,IAAIga,GAC9Bja,QAAQ2O,kBAAoB+C,EAAsBnM,EAAQ0G,WAC1DjM,QAAQ4O,gBAAkB8C,EAAsBnM,EAAQsK,UAE1DoK,EAAenM,QAGVmM,KI1jDP,MAAMpY,MACJ,6FAGJ,IAAKF,QAAQC,eAAeH,OAAQ,YAAa,CAACnB,MAAOiO,IACvD,MAAM1M,MAAM"}